{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "requestParkingSpotToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f56a1a3344c59707e8f23667fa56c63c02c293b132ee9b86dce491bf7c28ecb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "1364675",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x90522fb22853f63a6877a13c14f8458cd19710e8e90986d19abdd7ea91d11140",
    "transactionHash": "0x3f56a1a3344c59707e8f23667fa56c63c02c293b132ee9b86dce491bf7c28ecb",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "1364675",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3e829afd5ff09a83ed8a01ea9e9ed974",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"requestParkingSpotToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequestParkingSpotToken.sol\":\"RequestParkingSpotToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BokkyPooBahsDateTimeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.00 - Contract Instance\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\\n//\\n// GNU Lesser General Public License 3.0\\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\\n// ----------------------------------------------------------------------------\\n\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\ncontract BokkyPooBahsDateTimeContract {\\n    uint public constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint public constant SECONDS_PER_HOUR = 60 * 60;\\n    uint public constant SECONDS_PER_MINUTE = 60;\\n    int public constant OFFSET19700101 = 2440588;\\n\\n    uint public constant DOW_MON = 1;\\n    uint public constant DOW_TUE = 2;\\n    uint public constant DOW_WED = 3;\\n    uint public constant DOW_THU = 4;\\n    uint public constant DOW_FRI = 5;\\n    uint public constant DOW_SAT = 6;\\n    uint public constant DOW_SUN = 7;\\n\\n    function _now() public view returns (uint timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function _nowDateTime() public view returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n    function _daysFromDate(uint year, uint month, uint day) public pure returns (uint _days) {\\n        return BokkyPooBahsDateTimeLibrary._daysFromDate(year, month, day);\\n    }\\n    function _daysToDate(uint _days) public pure returns (uint year, uint month, uint day) {\\n        return BokkyPooBahsDateTimeLibrary._daysToDate(_days);\\n    }\\n    function timestampFromDate(uint year, uint month, uint day) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, day);\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(year, month, day, hour, minute, second);\\n    }\\n    function timestampToDate(uint timestamp) public pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n    }\\n    function timestampToDateTime(uint timestamp) public pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(timestamp);\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDate(year, month, day);\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDateTime(year, month, day, hour, minute, second);\\n    }\\n    function isLeapYear(uint timestamp) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary.isLeapYear(timestamp);\\n    }\\n    function _isLeapYear(uint year) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary._isLeapYear(year);\\n    }\\n    function isWeekDay(uint timestamp) public pure returns (bool weekDay) {\\n        weekDay = BokkyPooBahsDateTimeLibrary.isWeekDay(timestamp);\\n    }\\n    function isWeekEnd(uint timestamp) public pure returns (bool weekEnd) {\\n        weekEnd = BokkyPooBahsDateTimeLibrary.isWeekEnd(timestamp);\\n    }\\n\\n    function getDaysInMonth(uint timestamp) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary.getDaysInMonth(timestamp);\\n    }\\n    function _getDaysInMonth(uint year, uint month) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\\n    }\\n    function getDayOfWeek(uint timestamp) public pure returns (uint dayOfWeek) {\\n        dayOfWeek = BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp);\\n    }\\n\\n    function getYear(uint timestamp) public pure returns (uint year) {\\n        year = BokkyPooBahsDateTimeLibrary.getYear(timestamp);\\n    }\\n    function getMonth(uint timestamp) public pure returns (uint month) {\\n        month = BokkyPooBahsDateTimeLibrary.getMonth(timestamp);\\n    }\\n    function getDay(uint timestamp) public pure returns (uint day) {\\n        day = BokkyPooBahsDateTimeLibrary.getDay(timestamp);\\n    }\\n    function getHour(uint timestamp) public pure returns (uint hour) {\\n        hour = BokkyPooBahsDateTimeLibrary.getHour(timestamp);\\n    }\\n    function getMinute(uint timestamp) public pure returns (uint minute) {\\n        minute = BokkyPooBahsDateTimeLibrary.getMinute(timestamp);\\n    }\\n    function getSecond(uint timestamp) public pure returns (uint second) {\\n        second = BokkyPooBahsDateTimeLibrary.getSecond(timestamp);\\n    }\\n\\n    function addYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addYears(timestamp, _years);\\n    }\\n    function addMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMonths(timestamp, _months);\\n    }\\n    function addDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, _days);\\n    }\\n    function addHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addHours(timestamp, _hours);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMinutes(timestamp, _minutes);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addSeconds(timestamp, _seconds);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subYears(timestamp, _years);\\n    }\\n    function subMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMonths(timestamp, _months);\\n    }\\n    function subDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subDays(timestamp, _days);\\n    }\\n    function subHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subHours(timestamp, _hours);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMinutes(timestamp, _minutes);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subSeconds(timestamp, _seconds);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) public pure returns (uint _years) {\\n        _years = BokkyPooBahsDateTimeLibrary.diffYears(fromTimestamp, toTimestamp);\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) public pure returns (uint _months) {\\n        _months = BokkyPooBahsDateTimeLibrary.diffMonths(fromTimestamp, toTimestamp);\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) public pure returns (uint _days) {\\n        _days = BokkyPooBahsDateTimeLibrary.diffDays(fromTimestamp, toTimestamp);\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) public pure returns (uint _hours) {\\n        _hours = BokkyPooBahsDateTimeLibrary.diffHours(fromTimestamp, toTimestamp);\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) public pure returns (uint _minutes) {\\n        _minutes = BokkyPooBahsDateTimeLibrary.diffMinutes(fromTimestamp, toTimestamp);\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) public pure returns (uint _seconds) {\\n        _seconds = BokkyPooBahsDateTimeLibrary.diffSeconds(fromTimestamp, toTimestamp);\\n    }\\n}\",\"keccak256\":\"0xe9913c812a72dc0d88521026abc5a107b82028b536cb12b5c0a20ddcfbe766ca\",\"license\":\"MIT\"},\"contracts/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x6a972bde66695cafc06e4f6beabef5f5a9386196a62f611d5be2d2e5a3a4967f\",\"license\":\"MIT\"},\"contracts/RequestParkingSpotToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./BokkyPooBahsDateTimeContract.sol\\\";\\n\\ninterface ParkingSpotAttributes {\\n    function checkSpotAvailability(uint) external view returns (bool);\\n    function checkSpotPermittedParkingStartTime(uint ) external view returns (uint8, uint8);\\n    function checkSpotPermittedParkingEndTime(uint ) external view returns (uint8, uint8);\\n    function checkParkingSpotTimezone(uint ) external view returns (uint8);\\n\\n\\n}\\n\\ninterface ParkingSpotToken {\\n    function ownerOf(uint256) external returns (address);\\n    function safeTransferFrom(address,address,uint256) external;\\n\\n}\\n\\ncontract RequestParkingSpotToken {\\nusing BokkyPooBahsDateTimeLibrary for *;\\n\\n    struct DateTime {\\n        uint256 Year;\\n        uint256 Month; \\n        uint256 Day;\\n        uint256 Hour; \\n        uint256 Minute;\\n        uint256 Second;\\n    }\\n\\n    DateTime current = DateTime(0,0,0,0,0,0);\\n\\n    mapping(address=>uint256) public depositors;\\n\\n    ParkingSpotAttributes constant psa = ParkingSpotAttributes(0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9);\\n    ParkingSpotToken constant pst = ParkingSpotToken(0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9);\\n\\n\\n\\n    // Payable address can receive Ether\\n    address payable public owner;\\n\\n    // Payable constructor can receive Ether\\n    constructor() payable {\\n        owner = payable(msg.sender);\\n    }\\n\\n    function deposit() public payable {\\n        depositors[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw(uint256 _amount) public {\\n        require(_amount <= depositors[msg.sender], \\\"Not enough ETH deposited\\\");\\n        depositors[msg.sender] -= _amount;\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n\\n    }\\n    \\n    function getCurrentDateTime () internal {\\n        (current.Year, current.Month, current.Day, current.Hour, current.Minute, current.Second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n\\n    function genericTimeFrameToCurrentUnixTime(uint8 _hour, uint8 _minute) internal returns (uint) {\\n        getCurrentDateTime();\\n       return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(current.Year, current.Month, current.Day, _hour, _minute, 0);\\n    }\\n\\n    function checkAndConvertAvailabilityTime(uint _tokenId) internal returns (uint256, uint256) {\\n        (uint8 permittedStartHour, uint8 permittedStartMinute) = psa.checkSpotPermittedParkingStartTime(_tokenId);\\n        (uint8 permittedEndHour, uint8 permittedEndMinute) = psa.checkSpotPermittedParkingEndTime(_tokenId);\\n\\n        uint permittedStartTimeUnix = genericTimeFrameToCurrentUnixTime(permittedStartHour, permittedStartMinute);\\n        uint permittedEndTimeUnix = genericTimeFrameToCurrentUnixTime(permittedEndHour, permittedEndMinute);\\n        (permittedEndTimeUnix, permittedEndTimeUnix) = accountForTimezone(permittedStartTimeUnix, permittedEndTimeUnix, _tokenId);\\n        return (permittedStartTimeUnix, permittedEndTimeUnix);\\n\\n    }\\n\\n    function accountForTimezone(uint _start_time, uint _end_time, uint _tokenId) internal returns (uint256, uint256) {\\n        int256 timezone = int256(int8(psa.checkParkingSpotTimezone(_tokenId)));\\n\\n        if (timezone > 12) {\\n            timezone = timezone - 12;\\n            timezone * -1;\\n        }\\n\\n        int256 offset = timezone * 3600;\\n\\n      int256 _start_time_with_offset = int256(_start_time) + offset;\\n      int256 _end_time_with_offset = int256(_end_time) + offset;\\n\\n        _start_time = uint256(_start_time_with_offset);\\n        _end_time = uint256(_end_time_with_offset);\\n\\n        return (_start_time, _end_time);\\n\\n    }\\n\\n    function requestParkingSpotToken(uint256 _tokenId) public {\\n        // require(_requestStartTime > );\\n        (uint parkingSpotStartTime, uint parkingSpotEndTime) = checkAndConvertAvailabilityTime(_tokenId);\\n        uint256 currentTimeUnix = block.timestamp;\\n\\n        require(depositors[msg.sender] >= 1000000000000000000, \\\"Must deposit at least 1 Eth\\\");\\n        require(psa.checkSpotAvailability(_tokenId) == true, \\\"Parking spot is unavailable!\\\");\\n        require(block.timestamp > parkingSpotStartTime && block.timestamp < parkingSpotEndTime , \\\"Parking spot unavailable at this time!\\\");\\n\\n        address currentOwner;\\n        currentOwner = pst.ownerOf(_tokenId);\\n        pst.safeTransferFrom(currentOwner, msg.sender, _tokenId);\\n\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0x3fdfaf28f626427c4994914e0a453d635dc13be169e00a16432ac0b6ed87d4f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525060008082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155505033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611722806100c66000396000f3fe60806040526004361061004a5760003560e01c80632e1a7d4d1461004f57806374c340b7146100785780638da5cb5b146100a1578063d0e30db0146100cc578063eed75f6d146100d6575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610d4b565b610113565b005b34801561008457600080fd5b5061009f600480360381019061009a9190610d4b565b61029b565b005b3480156100ad57600080fd5b506100b6610579565b6040516100c39190610db9565b60405180910390f35b6100d461059f565b005b3480156100e257600080fd5b506100fd60048036038101906100f89190610e12565b6105f7565b60405161010a9190610e4e565b60405180910390f35b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018c90610ec6565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546101e49190610f15565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161021190610f7a565b60006040518083038185875af1925050503d806000811461024e576040519150601f19603f3d011682016040523d82523d6000602084013e610253565b606091505b5050905080610297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028e90610fdb565b60405180910390fd5b5050565b6000806102a78361060f565b915091506000429050670de0b6b3a7640000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561033a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033190611047565b60405180910390fd5b6001151573dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663e91926f1866040518263ffffffff1660e01b815260040161038b9190610e4e565b602060405180830381865afa1580156103a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cc919061109f565b15151461040e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040590611118565b60405180910390fd5b824211801561041c57508142105b61045b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610452906111aa565b60405180910390fd5b600073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b81526004016104aa9190610e4e565b6020604051808303816000875af11580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed91906111df565b905073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff166342842e0e8233886040518463ffffffff1660e01b81526004016105409392919061121b565b600060405180830381600087803b15801561055a57600080fd5b505af115801561056e573d6000803e3d6000fd5b505050505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b34600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ee9190611252565b92505081905550565b60066020528060005260406000206000915090505481565b60008060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663ccc5ffe9866040518263ffffffff1660e01b81526004016106629190610e4e565b6040805180830381865afa15801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a291906112e1565b9150915060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16631a1089c2886040518263ffffffff1660e01b81526004016106f69190610e4e565b6040805180830381865afa158015610712573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073691906112e1565b915091506000610746858561077a565b90506000610754848461077a565b905061076182828b6107af565b8092508192505050818197509750505050505050915091565b60006107846108d7565b6107a760008001546000600101546000600201548660ff168660ff16600061092a565b905092915050565b600080600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16635fe20047856040518263ffffffff1660e01b81526004016108019190610e4e565b602060405180830381865afa15801561081e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108429190611321565b60000b9050600c81131561088d57600c8161085d9190611358565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8161088b91906113ec565b505b6000610e108261089d91906113ec565b9050600081886108ad9190611503565b9050600082886108bd9190611503565b905081985080975088889550955050505050935093915050565b6108e04261098b565b6000800160008060010160008060020160008060030160008060040160008060050160008c919050558b919050558a91905055899190505588919050558791905055505050505050565b600081603c8461093a9190611597565b610e10866109489190611597565b620151806109578b8b8b610a12565b6109619190611597565b61096b9190611252565b6109759190611252565b61097f9190611252565b90509695505050505050565b6000806000806000806109ab62015180886109a69190611620565b610b71565b809650819750829850505050600062015180886109c89190611651565b9050610e10816109d89190611620565b9350610e10816109e89190611651565b9050603c816109f79190611620565b9250603c81610a069190611651565b91505091939550919395565b60006107b2841015610a2357600080fd5b600084905060008490506000849050600062253d8c60046064600c600e87610a4b9190611358565b610a559190611682565b61132488610a639190611503565b610a6d9190611503565b610a779190611682565b6003610a8391906113ec565b610a8d9190611682565b600c80600c600e88610a9f9190611358565b610aa99190611682565b610ab391906113ec565b600287610ac09190611358565b610aca9190611358565b61016f610ad791906113ec565b610ae19190611682565b6004600c600e88610af29190611358565b610afc9190611682565b6112c089610b0a9190611503565b610b149190611503565b6105b5610b2191906113ec565b610b2b9190611682565b617d4b86610b399190611358565b610b439190611503565b610b4d9190611503565b610b579190611358565b610b619190611358565b9050809450505050509392505050565b600080600080849050600062253d8c62010bd983610b8f9190611503565b610b999190611503565b9050600062023ab1826004610bae91906113ec565b610bb89190611682565b9050600460038262023ab1610bcd91906113ec565b610bd79190611503565b610be19190611682565b82610bec9190611358565b9150600062164b09600184610c019190611503565b610fa0610c0e91906113ec565b610c189190611682565b9050601f6004826105b5610c2c91906113ec565b610c369190611682565b84610c419190611358565b610c4b9190611503565b9250600061098f846050610c5f91906113ec565b610c699190611682565b9050600060508261098f610c7d91906113ec565b610c879190611682565b85610c929190611358565b9050600b82610ca19190611682565b945084600c610cb091906113ec565b600283610cbd9190611503565b610cc79190611358565b91508483603186610cd89190611358565b6064610ce491906113ec565b610cee9190611503565b610cf89190611503565b92508298508197508096505050505050509193909250565b600080fd5b6000819050919050565b610d2881610d15565b8114610d3357600080fd5b50565b600081359050610d4581610d1f565b92915050565b600060208284031215610d6157610d60610d10565b5b6000610d6f84828501610d36565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610da382610d78565b9050919050565b610db381610d98565b82525050565b6000602082019050610dce6000830184610daa565b92915050565b6000610ddf82610d78565b9050919050565b610def81610dd4565b8114610dfa57600080fd5b50565b600081359050610e0c81610de6565b92915050565b600060208284031215610e2857610e27610d10565b5b6000610e3684828501610dfd565b91505092915050565b610e4881610d15565b82525050565b6000602082019050610e636000830184610e3f565b92915050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820455448206465706f73697465640000000000000000600082015250565b6000610eb0601883610e69565b9150610ebb82610e7a565b602082019050919050565b60006020820190508181036000830152610edf81610ea3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f2082610d15565b9150610f2b83610d15565b925082821015610f3e57610f3d610ee6565b5b828203905092915050565b600081905092915050565b50565b6000610f64600083610f49565b9150610f6f82610f54565b600082019050919050565b6000610f8582610f57565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610fc5601483610e69565b9150610fd082610f8f565b602082019050919050565b60006020820190508181036000830152610ff481610fb8565b9050919050565b7f4d757374206465706f736974206174206c656173742031204574680000000000600082015250565b6000611031601b83610e69565b915061103c82610ffb565b602082019050919050565b6000602082019050818103600083015261106081611024565b9050919050565b60008115159050919050565b61107c81611067565b811461108757600080fd5b50565b60008151905061109981611073565b92915050565b6000602082840312156110b5576110b4610d10565b5b60006110c38482850161108a565b91505092915050565b7f5061726b696e672073706f7420697320756e617661696c61626c652100000000600082015250565b6000611102601c83610e69565b915061110d826110cc565b602082019050919050565b60006020820190508181036000830152611131816110f5565b9050919050565b7f5061726b696e672073706f7420756e617661696c61626c65206174207468697360008201527f2074696d65210000000000000000000000000000000000000000000000000000602082015250565b6000611194602683610e69565b915061119f82611138565b604082019050919050565b600060208201905081810360008301526111c381611187565b9050919050565b6000815190506111d981610de6565b92915050565b6000602082840312156111f5576111f4610d10565b5b6000611203848285016111ca565b91505092915050565b61121581610dd4565b82525050565b6000606082019050611230600083018661120c565b61123d602083018561120c565b61124a6040830184610e3f565b949350505050565b600061125d82610d15565b915061126883610d15565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561129d5761129c610ee6565b5b828201905092915050565b600060ff82169050919050565b6112be816112a8565b81146112c957600080fd5b50565b6000815190506112db816112b5565b92915050565b600080604083850312156112f8576112f7610d10565b5b6000611306858286016112cc565b9250506020611317858286016112cc565b9150509250929050565b60006020828403121561133757611336610d10565b5b6000611345848285016112cc565b91505092915050565b6000819050919050565b60006113638261134e565b915061136e8361134e565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156113a9576113a8610ee6565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156113e1576113e0610ee6565b5b828203905092915050565b60006113f78261134e565b91506114028361134e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561144157611440610ee6565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561147e5761147d610ee6565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156114bb576114ba610ee6565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156114f8576114f7610ee6565b5b828202905092915050565b600061150e8261134e565b91506115198361134e565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561155457611553610ee6565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561158c5761158b610ee6565b5b828201905092915050565b60006115a282610d15565b91506115ad83610d15565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115e6576115e5610ee6565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061162b82610d15565b915061163683610d15565b925082611646576116456115f1565b5b828204905092915050565b600061165c82610d15565b915061166783610d15565b925082611677576116766115f1565b5b828206905092915050565b600061168d8261134e565b91506116988361134e565b9250826116a8576116a76115f1565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156116e1576116e0610ee6565b5b82820590509291505056fea2646970667358221220d1b3fafc76a30c66f41bf2b07adecd133bc5b1a07d4130a870905b3a336bd29964736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c80632e1a7d4d1461004f57806374c340b7146100785780638da5cb5b146100a1578063d0e30db0146100cc578063eed75f6d146100d6575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610d4b565b610113565b005b34801561008457600080fd5b5061009f600480360381019061009a9190610d4b565b61029b565b005b3480156100ad57600080fd5b506100b6610579565b6040516100c39190610db9565b60405180910390f35b6100d461059f565b005b3480156100e257600080fd5b506100fd60048036038101906100f89190610e12565b6105f7565b60405161010a9190610e4e565b60405180910390f35b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018c90610ec6565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546101e49190610f15565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161021190610f7a565b60006040518083038185875af1925050503d806000811461024e576040519150601f19603f3d011682016040523d82523d6000602084013e610253565b606091505b5050905080610297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028e90610fdb565b60405180910390fd5b5050565b6000806102a78361060f565b915091506000429050670de0b6b3a7640000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561033a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033190611047565b60405180910390fd5b6001151573dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663e91926f1866040518263ffffffff1660e01b815260040161038b9190610e4e565b602060405180830381865afa1580156103a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cc919061109f565b15151461040e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040590611118565b60405180910390fd5b824211801561041c57508142105b61045b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610452906111aa565b60405180910390fd5b600073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b81526004016104aa9190610e4e565b6020604051808303816000875af11580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed91906111df565b905073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff166342842e0e8233886040518463ffffffff1660e01b81526004016105409392919061121b565b600060405180830381600087803b15801561055a57600080fd5b505af115801561056e573d6000803e3d6000fd5b505050505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b34600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ee9190611252565b92505081905550565b60066020528060005260406000206000915090505481565b60008060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663ccc5ffe9866040518263ffffffff1660e01b81526004016106629190610e4e565b6040805180830381865afa15801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a291906112e1565b9150915060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16631a1089c2886040518263ffffffff1660e01b81526004016106f69190610e4e565b6040805180830381865afa158015610712573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073691906112e1565b915091506000610746858561077a565b90506000610754848461077a565b905061076182828b6107af565b8092508192505050818197509750505050505050915091565b60006107846108d7565b6107a760008001546000600101546000600201548660ff168660ff16600061092a565b905092915050565b600080600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16635fe20047856040518263ffffffff1660e01b81526004016108019190610e4e565b602060405180830381865afa15801561081e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108429190611321565b60000b9050600c81131561088d57600c8161085d9190611358565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8161088b91906113ec565b505b6000610e108261089d91906113ec565b9050600081886108ad9190611503565b9050600082886108bd9190611503565b905081985080975088889550955050505050935093915050565b6108e04261098b565b6000800160008060010160008060020160008060030160008060040160008060050160008c919050558b919050558a91905055899190505588919050558791905055505050505050565b600081603c8461093a9190611597565b610e10866109489190611597565b620151806109578b8b8b610a12565b6109619190611597565b61096b9190611252565b6109759190611252565b61097f9190611252565b90509695505050505050565b6000806000806000806109ab62015180886109a69190611620565b610b71565b809650819750829850505050600062015180886109c89190611651565b9050610e10816109d89190611620565b9350610e10816109e89190611651565b9050603c816109f79190611620565b9250603c81610a069190611651565b91505091939550919395565b60006107b2841015610a2357600080fd5b600084905060008490506000849050600062253d8c60046064600c600e87610a4b9190611358565b610a559190611682565b61132488610a639190611503565b610a6d9190611503565b610a779190611682565b6003610a8391906113ec565b610a8d9190611682565b600c80600c600e88610a9f9190611358565b610aa99190611682565b610ab391906113ec565b600287610ac09190611358565b610aca9190611358565b61016f610ad791906113ec565b610ae19190611682565b6004600c600e88610af29190611358565b610afc9190611682565b6112c089610b0a9190611503565b610b149190611503565b6105b5610b2191906113ec565b610b2b9190611682565b617d4b86610b399190611358565b610b439190611503565b610b4d9190611503565b610b579190611358565b610b619190611358565b9050809450505050509392505050565b600080600080849050600062253d8c62010bd983610b8f9190611503565b610b999190611503565b9050600062023ab1826004610bae91906113ec565b610bb89190611682565b9050600460038262023ab1610bcd91906113ec565b610bd79190611503565b610be19190611682565b82610bec9190611358565b9150600062164b09600184610c019190611503565b610fa0610c0e91906113ec565b610c189190611682565b9050601f6004826105b5610c2c91906113ec565b610c369190611682565b84610c419190611358565b610c4b9190611503565b9250600061098f846050610c5f91906113ec565b610c699190611682565b9050600060508261098f610c7d91906113ec565b610c879190611682565b85610c929190611358565b9050600b82610ca19190611682565b945084600c610cb091906113ec565b600283610cbd9190611503565b610cc79190611358565b91508483603186610cd89190611358565b6064610ce491906113ec565b610cee9190611503565b610cf89190611503565b92508298508197508096505050505050509193909250565b600080fd5b6000819050919050565b610d2881610d15565b8114610d3357600080fd5b50565b600081359050610d4581610d1f565b92915050565b600060208284031215610d6157610d60610d10565b5b6000610d6f84828501610d36565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610da382610d78565b9050919050565b610db381610d98565b82525050565b6000602082019050610dce6000830184610daa565b92915050565b6000610ddf82610d78565b9050919050565b610def81610dd4565b8114610dfa57600080fd5b50565b600081359050610e0c81610de6565b92915050565b600060208284031215610e2857610e27610d10565b5b6000610e3684828501610dfd565b91505092915050565b610e4881610d15565b82525050565b6000602082019050610e636000830184610e3f565b92915050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820455448206465706f73697465640000000000000000600082015250565b6000610eb0601883610e69565b9150610ebb82610e7a565b602082019050919050565b60006020820190508181036000830152610edf81610ea3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f2082610d15565b9150610f2b83610d15565b925082821015610f3e57610f3d610ee6565b5b828203905092915050565b600081905092915050565b50565b6000610f64600083610f49565b9150610f6f82610f54565b600082019050919050565b6000610f8582610f57565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610fc5601483610e69565b9150610fd082610f8f565b602082019050919050565b60006020820190508181036000830152610ff481610fb8565b9050919050565b7f4d757374206465706f736974206174206c656173742031204574680000000000600082015250565b6000611031601b83610e69565b915061103c82610ffb565b602082019050919050565b6000602082019050818103600083015261106081611024565b9050919050565b60008115159050919050565b61107c81611067565b811461108757600080fd5b50565b60008151905061109981611073565b92915050565b6000602082840312156110b5576110b4610d10565b5b60006110c38482850161108a565b91505092915050565b7f5061726b696e672073706f7420697320756e617661696c61626c652100000000600082015250565b6000611102601c83610e69565b915061110d826110cc565b602082019050919050565b60006020820190508181036000830152611131816110f5565b9050919050565b7f5061726b696e672073706f7420756e617661696c61626c65206174207468697360008201527f2074696d65210000000000000000000000000000000000000000000000000000602082015250565b6000611194602683610e69565b915061119f82611138565b604082019050919050565b600060208201905081810360008301526111c381611187565b9050919050565b6000815190506111d981610de6565b92915050565b6000602082840312156111f5576111f4610d10565b5b6000611203848285016111ca565b91505092915050565b61121581610dd4565b82525050565b6000606082019050611230600083018661120c565b61123d602083018561120c565b61124a6040830184610e3f565b949350505050565b600061125d82610d15565b915061126883610d15565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561129d5761129c610ee6565b5b828201905092915050565b600060ff82169050919050565b6112be816112a8565b81146112c957600080fd5b50565b6000815190506112db816112b5565b92915050565b600080604083850312156112f8576112f7610d10565b5b6000611306858286016112cc565b9250506020611317858286016112cc565b9150509250929050565b60006020828403121561133757611336610d10565b5b6000611345848285016112cc565b91505092915050565b6000819050919050565b60006113638261134e565b915061136e8361134e565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156113a9576113a8610ee6565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156113e1576113e0610ee6565b5b828203905092915050565b60006113f78261134e565b91506114028361134e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561144157611440610ee6565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561147e5761147d610ee6565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156114bb576114ba610ee6565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156114f8576114f7610ee6565b5b828202905092915050565b600061150e8261134e565b91506115198361134e565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561155457611553610ee6565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561158c5761158b610ee6565b5b828201905092915050565b60006115a282610d15565b91506115ad83610d15565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115e6576115e5610ee6565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061162b82610d15565b915061163683610d15565b925082611646576116456115f1565b5b828204905092915050565b600061165c82610d15565b915061166783610d15565b925082611677576116766115f1565b5b828206905092915050565b600061168d8261134e565b91506116988361134e565b9250826116a8576116a76115f1565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156116e1576116e0610ee6565b5b82820590509291505056fea2646970667358221220d1b3fafc76a30c66f41bf2b07adecd133bc5b1a07d4130a870905b3a336bd29964736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2355,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "current",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(DateTime)2344_storage"
      },
      {
        "astId": 2359,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "depositors",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2373,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DateTime)2344_storage": {
        "encoding": "inplace",
        "label": "struct RequestParkingSpotToken.DateTime",
        "members": [
          {
            "astId": 2333,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Year",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2335,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Month",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2337,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Day",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2339,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Hour",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2341,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Minute",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2343,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Second",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
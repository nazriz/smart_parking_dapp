{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestedStartHour",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestedStartMinute",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestedEndHour",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestedEndMinute",
          "type": "uint8"
        }
      ],
      "name": "ActiveParkingSesion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "EndActiveParkingSesion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "EstimatedSessionCost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthWithdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeSessions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimeUnix",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTimeUnix",
          "type": "uint256"
        }
      ],
      "name": "calculateSessionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentParkingSpotOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeParkingSpots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getReservedParkingTimes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hashedVehicleRegistration",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "registrationNumber",
          "type": "bytes"
        }
      ],
      "name": "reportParkingSpotOveruse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestedParkingTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartMinute",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndMinute",
          "type": "uint8"
        }
      ],
      "name": "reserveParkingSpotToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reservedParkingTimes",
      "outputs": [
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sessionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sessionInProgress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "setVehicleRegistrationHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "spotLastUsedBy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tempReservedParkingTimes",
      "outputs": [
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testHashPayload",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x34568f85a877d8992a1be6511837da6046ad23810401b71d2bafe0d2e284929c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "4809223",
    "logsBloom": "0x
    "blockHash": "0xd29c8a42ba3b1e00ca6c2ca521bb851010142533f9271e50bf50114caef549b2",
    "transactionHash": "0x34568f85a877d8992a1be6511837da6046ad23810401b71d2bafe0d2e284929c",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "4809223",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6a60cae2d75cbe2a75702ebdebbd8c95",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestedStartHour\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestedStartMinute\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestedEndHour\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestedEndMinute\",\"type\":\"uint8\"}],\"name\":\"ActiveParkingSesion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EndActiveParkingSesion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"EstimatedSessionCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeSessions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimeUnix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimeUnix\",\"type\":\"uint256\"}],\"name\":\"calculateSessionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentParkingSpotOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeParkingSpots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getReservedParkingTimes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hashedVehicleRegistration\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"registrationNumber\",\"type\":\"bytes\"}],\"name\":\"reportParkingSpotOveruse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestedParkingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartMinute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndMinute\",\"type\":\"uint8\"}],\"name\":\"reserveParkingSpotToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reservedParkingTimes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sessionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sessionInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"setVehicleRegistrationHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"spotLastUsedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tempReservedParkingTimes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testHashPayload\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequestParkingSpotToken.sol\":\"RequestParkingSpotToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/BokkyPooBahsDateTimeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.00 - Contract Instance\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\\n//\\n// GNU Lesser General Public License 3.0\\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\\n// ----------------------------------------------------------------------------\\n\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\ncontract BokkyPooBahsDateTimeContract {\\n    uint public constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint public constant SECONDS_PER_HOUR = 60 * 60;\\n    uint public constant SECONDS_PER_MINUTE = 60;\\n    int public constant OFFSET19700101 = 2440588;\\n\\n    uint public constant DOW_MON = 1;\\n    uint public constant DOW_TUE = 2;\\n    uint public constant DOW_WED = 3;\\n    uint public constant DOW_THU = 4;\\n    uint public constant DOW_FRI = 5;\\n    uint public constant DOW_SAT = 6;\\n    uint public constant DOW_SUN = 7;\\n\\n    function _now() public view returns (uint timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function _nowDateTime() public view returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n    function _daysFromDate(uint year, uint month, uint day) public pure returns (uint _days) {\\n        return BokkyPooBahsDateTimeLibrary._daysFromDate(year, month, day);\\n    }\\n    function _daysToDate(uint _days) public pure returns (uint year, uint month, uint day) {\\n        return BokkyPooBahsDateTimeLibrary._daysToDate(_days);\\n    }\\n    function timestampFromDate(uint year, uint month, uint day) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, day);\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(year, month, day, hour, minute, second);\\n    }\\n    function timestampToDate(uint timestamp) public pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n    }\\n    function timestampToDateTime(uint timestamp) public pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(timestamp);\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDate(year, month, day);\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDateTime(year, month, day, hour, minute, second);\\n    }\\n    function isLeapYear(uint timestamp) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary.isLeapYear(timestamp);\\n    }\\n    function _isLeapYear(uint year) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary._isLeapYear(year);\\n    }\\n    function isWeekDay(uint timestamp) public pure returns (bool weekDay) {\\n        weekDay = BokkyPooBahsDateTimeLibrary.isWeekDay(timestamp);\\n    }\\n    function isWeekEnd(uint timestamp) public pure returns (bool weekEnd) {\\n        weekEnd = BokkyPooBahsDateTimeLibrary.isWeekEnd(timestamp);\\n    }\\n\\n    function getDaysInMonth(uint timestamp) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary.getDaysInMonth(timestamp);\\n    }\\n    function _getDaysInMonth(uint year, uint month) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\\n    }\\n    function getDayOfWeek(uint timestamp) public pure returns (uint dayOfWeek) {\\n        dayOfWeek = BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp);\\n    }\\n\\n    function getYear(uint timestamp) public pure returns (uint year) {\\n        year = BokkyPooBahsDateTimeLibrary.getYear(timestamp);\\n    }\\n    function getMonth(uint timestamp) public pure returns (uint month) {\\n        month = BokkyPooBahsDateTimeLibrary.getMonth(timestamp);\\n    }\\n    function getDay(uint timestamp) public pure returns (uint day) {\\n        day = BokkyPooBahsDateTimeLibrary.getDay(timestamp);\\n    }\\n    function getHour(uint timestamp) public pure returns (uint hour) {\\n        hour = BokkyPooBahsDateTimeLibrary.getHour(timestamp);\\n    }\\n    function getMinute(uint timestamp) public pure returns (uint minute) {\\n        minute = BokkyPooBahsDateTimeLibrary.getMinute(timestamp);\\n    }\\n    function getSecond(uint timestamp) public pure returns (uint second) {\\n        second = BokkyPooBahsDateTimeLibrary.getSecond(timestamp);\\n    }\\n\\n    function addYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addYears(timestamp, _years);\\n    }\\n    function addMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMonths(timestamp, _months);\\n    }\\n    function addDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, _days);\\n    }\\n    function addHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addHours(timestamp, _hours);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMinutes(timestamp, _minutes);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addSeconds(timestamp, _seconds);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subYears(timestamp, _years);\\n    }\\n    function subMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMonths(timestamp, _months);\\n    }\\n    function subDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subDays(timestamp, _days);\\n    }\\n    function subHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subHours(timestamp, _hours);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMinutes(timestamp, _minutes);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subSeconds(timestamp, _seconds);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) public pure returns (uint _years) {\\n        _years = BokkyPooBahsDateTimeLibrary.diffYears(fromTimestamp, toTimestamp);\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) public pure returns (uint _months) {\\n        _months = BokkyPooBahsDateTimeLibrary.diffMonths(fromTimestamp, toTimestamp);\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) public pure returns (uint _days) {\\n        _days = BokkyPooBahsDateTimeLibrary.diffDays(fromTimestamp, toTimestamp);\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) public pure returns (uint _hours) {\\n        _hours = BokkyPooBahsDateTimeLibrary.diffHours(fromTimestamp, toTimestamp);\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) public pure returns (uint _minutes) {\\n        _minutes = BokkyPooBahsDateTimeLibrary.diffMinutes(fromTimestamp, toTimestamp);\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) public pure returns (uint _seconds) {\\n        _seconds = BokkyPooBahsDateTimeLibrary.diffSeconds(fromTimestamp, toTimestamp);\\n    }\\n}\",\"keccak256\":\"0xe9913c812a72dc0d88521026abc5a107b82028b536cb12b5c0a20ddcfbe766ca\",\"license\":\"MIT\"},\"contracts/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x6a972bde66695cafc06e4f6beabef5f5a9386196a62f611d5be2d2e5a3a4967f\",\"license\":\"MIT\"},\"contracts/RequestParkingSpotToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./BokkyPooBahsDateTimeContract.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\ninterface ParkingSpotAttributes {\\n    function checkSpotAvailability(uint) external view returns (bool);\\n    function checkSpotPermittedParkingStartTime(uint ) external view returns (uint8, uint8);\\n    function checkSpotPermittedParkingEndTime(uint ) external view returns (uint8, uint8);\\n    function checkParkingSpotTimezone(uint ) external view returns (uint8[2] memory);\\n    function spotInUse(uint) external view returns (bool);\\n    function setSpotInUse(uint, bool ) external;\\n    function pricePerHour(uint) external view returns (uint);\\n\\n}\\n\\ninterface ParkingSpotToken {\\n    function ownerOf(uint256) external returns (address);\\n    function safeTransferFrom(address,address,uint256) external;\\n    function safeTransferFromWithOwnerApprovals(address,address,uint256) external;\\n    function _parkingSpotOwners(uint) external view returns (address);\\n    function paymentAddress(uint) external view returns (address);\\n    function getTokenCount() external view returns (uint256);\\n \\n}\\n\\n\\n\\ncontract RequestParkingSpotToken {\\nusing BokkyPooBahsDateTimeLibrary for *;\\n\\nevent EthDeposit(address user, uint256 amount);\\nevent EthWithdraw(address user, uint256 amount);\\nevent EstimatedSessionCost(uint256 tokenId, uint256 cost);\\nevent ActiveParkingSesion(uint256 tokenId, uint8 requestedStartHour, uint8 requestedStartMinute, uint8 requestedEndHour, uint8 requestedEndMinute);\\nevent EndActiveParkingSesion(uint256 tokenId);\\n\\n    struct DateTime {\\n        uint256 Year;\\n        uint256 Month; \\n        uint256 Day;\\n        uint256 Hour; \\n        uint256 Minute;\\n        uint256 Second;\\n    }\\n\\n    struct TimeSlots {\\n        address walletAddress;\\n        uint256 startTime;\\n        uint256 endTime; \\n    }\\n\\n    DateTime current = DateTime(0,0,0,0,0,0);\\n\\n    mapping(address=>uint256) public depositors;\\n    mapping(uint256=> address) public currentParkingSpotOwner;\\n    // mapping(uint256=>uint256[2]) public permittedParkingTimes;\\n    mapping(uint256=>uint256[2]) public requestedParkingTimes;\\n    mapping(address=>bool) public sessionInProgress;\\n    mapping(uint256=>uint256) public sessionCost;\\n    mapping(uint256=>TimeSlots) availableSlots;\\n    uint256[] public activeSessions;\\n    mapping(uint256=>TimeSlots[]) public reservedParkingTimes;\\n    mapping(uint256=>TimeSlots[]) public tempReservedParkingTimes;\\n    mapping(address=>bytes32) public hashedVehicleRegistration;\\n    mapping(uint256=>address) public spotLastUsedBy;\\n\\n\\n    bytes public testHashPayload;\\n    AggregatorV3Interface internal ethUSDpriceFeed;\\n\\n    // //localhost:\\n    ParkingSpotAttributes constant psa = ParkingSpotAttributes(0x5FC8d32690cc91D4c39d9d3abcBD16989F875707);\\n    ParkingSpotToken constant pst = ParkingSpotToken(0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9);\\n    // Goerli:\\n    // ParkingSpotAttributes constant psa = ParkingSpotAttributes(0x0A0Bbb42636AB8C3516882519ADD39DF56dCc5A5);\\n    // ParkingSpotToken constant pst = ParkingSpotToken(0x7380e28aB1F6ED032671b085390194F07aBC2606);\\n\\n    // Payable address can receive Ether\\n    address payable public owner;\\n\\n    // Payable constructor can receive Ether\\n    // constructor() payable {\\n    //     owner = payable(msg.sender);\\n    //     ethUSDpriceFeed = AggregatorV3Interface(0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512);\\n    // }\\n\\n    constructor() payable {\\n        owner = payable(msg.sender);\\n        //localhost\\n        ethUSDpriceFeed = AggregatorV3Interface(0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512);\\n        //goerli\\n        // ethUSDpriceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\n    }\\n\\n    function deposit() public payable {\\n        depositors[msg.sender] += msg.value;\\n        emit EthDeposit(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 _amount) public {\\n        require(_amount <= depositors[msg.sender], \\\"Not enough ETH deposited\\\");\\n        depositors[msg.sender] -= _amount;\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n        require(sessionInProgress[msg.sender] == false, \\\"You cannot withdraw ETH while parking session in progress. Please wait until the session is completed, or end the session manually!\\\");\\n        emit EthWithdraw(msg.sender, _amount);\\n\\n    }\\n    \\n    function getCurrentDateTime () internal {\\n        (current.Year, current.Month, current.Day, current.Hour, current.Minute, current.Second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n\\n    function genericTimeFrameToCurrentUnixTime(uint8 _hour, uint8 _minute) internal returns (uint) {\\n        getCurrentDateTime();\\n       return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(current.Year, current.Month, current.Day, _hour, _minute, 0);\\n    }\\n\\n    function retrievePermittedParkingTimes(uint _tokenId) internal returns (uint256, uint256) {\\n        (uint8 permittedStartHour, uint8 permittedStartMinute) = psa.checkSpotPermittedParkingStartTime(_tokenId);\\n        (uint8 permittedEndHour, uint8 permittedEndMinute) = psa.checkSpotPermittedParkingEndTime(_tokenId);\\n\\n        uint permittedStartTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(permittedStartHour, permittedStartMinute), _tokenId);\\n        uint permittedEndTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(permittedEndHour, permittedEndMinute), _tokenId);\\n\\n        // permittedStartTimeUnix = accountForTimezone(permittedStartTimeUnix, _tokenId);\\n        // permittedEndTimeUnix  =  accountForTimezone(permittedEndTimeUnix, _tokenId);\\n\\n        // permittedParkingTimes[_tokenId] = [permittedStartTimeUnix, permittedEndTimeUnix];\\n\\n        return (permittedStartTimeUnix, permittedEndTimeUnix);\\n    }\\n\\n    function setIsNegative(bool _isNegative) internal {\\n        _isNegative = true;\\n    }\\n\\n    function setSessionInProgress(address _address, bool _status) internal {\\n        sessionInProgress[_address] = _status;\\n    }\\n\\n    // function getStartTimeLength(uint256 _tokenId) public view returns (uint256) {\\n    //     return availableSlots[_tokenId].startTime.length;\\n    // }\\n\\n    // function getEndTimeLength(uint256 _tokenId) public view returns (uint256) {\\n    //     return availableSlots[_tokenId].endTime.length;\\n    // }\\n\\n    function getReservedParkingTimes(uint256 _tokenId, uint256 _index) public view returns (address, uint256, uint256) {\\n        return (reservedParkingTimes[_tokenId][_index].walletAddress,reservedParkingTimes[_tokenId][_index].startTime, reservedParkingTimes[_tokenId][_index].endTime );\\n    }\\n\\n    function accountForTimezone(uint _unixTime, uint _tokenId) internal returns (uint256) {\\n        uint8[2] memory timezoneAttributes  = (psa.checkParkingSpotTimezone(_tokenId));    \\n        uint256 offset = (timezoneAttributes[1] * 3600);\\n        uint256 newTime;\\n        if (timezoneAttributes[0] == 1) {\\n         newTime = (_unixTime - offset);\\n\\n        } else {\\n        newTime = (_unixTime + offset);\\n        }\\n\\n        return newTime;\\n\\n    }\\n\\n\\n    function calculateSessionCost(uint256 _tokenId, uint256 _startTimeUnix, uint256 _endTimeUnix) public returns (uint256) {\\n        uint256 hourlyRateUSD = (psa.pricePerHour(_tokenId) * (10**8));\\n        int256 ethUSDPrice = getLatestPrice();\\n        uint256 hourlyRateGwei = (1000000000000000000 / (uint256(ethUSDPrice) / hourlyRateUSD));   \\n        uint256 gweiBySecond = ((hourlyRateGwei / 3600) / 10**2);\\n\\n        uint256 duration = (_endTimeUnix - _startTimeUnix);\\n\\n\\n        emit EstimatedSessionCost(_tokenId, duration * gweiBySecond);\\n\\n        return duration * gweiBySecond;\\n    }\\n\\n    // function requestParkingSpotToken(uint256 _tokenId, uint8 _requestedStartHour, uint8 _requestedStartMinute, uint8 _requestedEndHour, uint8 _requestedEndMinute) public {\\n    //     require(_requestedStartHour <= 23, \\\"Start hour must be between 0 and 23\\\");\\n    //     require(_requestedStartMinute <= 59, \\\"Start minute must be between 0 and 59\\\");\\n    //     require(_requestedEndHour <= 23, \\\"End hour must be between 0 and 23\\\");\\n    //     require(_requestedEndMinute <= 59, \\\"End minute must be between 0 and 59\\\");\\n    //     require(psa.spotInUse(_tokenId) == false, \\\"Parking spot currently in use!\\\");\\n\\n    //     (uint256 parkingSpotStartTime, uint256 parkingSpotEndTime) = retrievePermittedParkingTimes(_tokenId);\\n\\n    //     uint256 requestedStartTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedStartHour,_requestedStartMinute), _tokenId);\\n    //     uint256 requestedEndTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedEndHour,_requestedEndMinute), _tokenId);\\n    //     // require(requestedStartTimeUnix > block.timestamp, \\\"Can't request parking spot in the past!\\\");\\n    //     // require(depositors[msg.sender] >= 1000000000000000000, \\\"Must deposit at least 1 Eth\\\");\\n    //     require(depositors[msg.sender] >= 10000000000000000, \\\"Must deposit at least 0.01 Eth\\\");\\n    //     uint256 calculatedSessionCost = calculateSessionCost(_tokenId,requestedStartTimeUnix,requestedEndTimeUnix);\\n    //     require(depositors[msg.sender] >= calculatedSessionCost , \\\"You don't have enough ETH deposited to pay for your requested duration!\\\" );\\n    // //     require(psa.checkSpotAvailability(_tokenId) == true, \\\"Parking spot is unavailable!\\\");\\n    //     require(requestedStartTimeUnix > parkingSpotStartTime && requestedEndTimeUnix < parkingSpotEndTime , \\\"Parking spot unavailable at this time!\\\");\\n\\n    //    address currentOwner = pst.ownerOf(_tokenId);\\n    //     currentParkingSpotOwner[_tokenId] = currentOwner;\\n    //     pst.safeTransferFrom(currentOwner, msg.sender, _tokenId);\\n    //     psa.setSpotInUse(_tokenId, true);\\n    //     requestedParkingTimes[_tokenId] = [requestedStartTimeUnix, requestedEndTimeUnix ];\\n    //     setSessionInProgress(msg.sender, true);\\n    //     sessionCost[_tokenId] = calculatedSessionCost;\\n    //     activeSessions.push(_tokenId);\\n\\n    //    TimeSlots memory tempTimeSlot ;\\n    //    tempTimeSlot.walletAddress = msg.sender;\\n    //    tempTimeSlot.startTime = requestedStartTimeUnix;\\n    //    tempTimeSlot.endTime = requestedEndTimeUnix;\\n\\n    //     reservedParkingTimes[_tokenId].push(tempTimeSlot);\\n    \\n    //     emit ActiveParkingSesion(_tokenId, _requestedStartHour, _requestedStartMinute, _requestedEndHour, _requestedEndMinute);\\n    // }\\n\\n\\n\\n    function slotInMiddleForOther(uint256 _tokenId, address caller, uint256 requestedStartTime, uint256 requestedEndTime, uint timeSlotsLength, uint _index) internal returns (bool) {\\n                                delete tempReservedParkingTimes[_tokenId];\\n\\n                                TimeSlots memory tempTimeSlot;\\n\\n                                for (uint x = 0; x <= _index; x++) {\\n                                tempTimeSlot.walletAddress = reservedParkingTimes[_tokenId][x].walletAddress;\\n                                tempTimeSlot.startTime = reservedParkingTimes[_tokenId][x].startTime;\\n                                tempTimeSlot.endTime = reservedParkingTimes[_tokenId][x].endTime;\\n\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                                }                             \\n\\n                                tempTimeSlot.walletAddress = caller;\\n                                tempTimeSlot.startTime = requestedStartTime;\\n                                tempTimeSlot.endTime = requestedEndTime;\\n\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                                uint j = _index + 1;\\n                                for (j; j < timeSlotsLength; j++ ) {\\n                                \\n                                tempTimeSlot.walletAddress = reservedParkingTimes[_tokenId][j].walletAddress;\\n                                tempTimeSlot.startTime = reservedParkingTimes[_tokenId][j].startTime;\\n                                tempTimeSlot.endTime = reservedParkingTimes[_tokenId][j].endTime;\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                                 }\\n\\n                                reservedParkingTimes[_tokenId] = tempReservedParkingTimes[_tokenId];\\n                                return true;\\n\\n    }\\n\\n    function slotInMiddleForZero(uint256 _tokenId, address caller, uint256 requestedStartTime, uint256 requestedEndTime, uint timeSlotsLength) internal returns (bool) {\\n                                delete tempReservedParkingTimes[_tokenId];\\n\\n                                TimeSlots memory tempTimeSlot;\\n                                 \\n                                tempTimeSlot.walletAddress = reservedParkingTimes[_tokenId][0].walletAddress;\\n                                tempTimeSlot.startTime = reservedParkingTimes[_tokenId][0].startTime;\\n                                tempTimeSlot.endTime = reservedParkingTimes[_tokenId][0].endTime;\\n\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                                tempTimeSlot.walletAddress = caller;\\n                                tempTimeSlot.startTime = requestedStartTime;\\n                                tempTimeSlot.endTime = requestedEndTime;\\n\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                                \\n                                for (uint j = 1; j < timeSlotsLength; j++ ) {\\n                                \\n                                tempTimeSlot.walletAddress = reservedParkingTimes[_tokenId][j].walletAddress;\\n                                tempTimeSlot.startTime = reservedParkingTimes[_tokenId][j].startTime;\\n                                tempTimeSlot.endTime = reservedParkingTimes[_tokenId][j].endTime;\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                                 }\\n\\n                                reservedParkingTimes[_tokenId] = tempReservedParkingTimes[_tokenId];\\n                                return true;\\n\\n    }\\n\\n\\n    function slotTimeSlotinMiddle(uint256 _tokenId, address caller, uint256 requestedStartTime, uint256 requestedEndTime, uint timeSlotsLength) internal returns (bool) {\\n                uint i = 0;\\n            for (i; i < timeSlotsLength; i++) {\\n                    uint overflowCheck = i;\\n                    overflowCheck++;\\n\\n                     if (requestedStartTime > reservedParkingTimes[_tokenId][i].endTime) {\\n                        if (overflowCheck > timeSlotsLength) {\\n\\n                                TimeSlots memory tempTimeSlot;\\n                        \\n                                tempTimeSlot.walletAddress = caller;\\n                                tempTimeSlot.startTime = requestedStartTime;\\n                                tempTimeSlot.endTime = requestedEndTime;\\n\\n                                reservedParkingTimes[_tokenId].push(tempTimeSlot);\\n                                break;\\n                        } else {\\n                            if(requestedEndTime < reservedParkingTimes[_tokenId][overflowCheck].startTime) {\\n                                if  (i == 0) {\\n                                 slotInMiddleForZero(_tokenId, caller, requestedStartTime, requestedEndTime, timeSlotsLength);\\n                                 return true;\\n                            } else {\\n                                slotInMiddleForOther(_tokenId, caller, requestedStartTime, requestedEndTime, timeSlotsLength, i);\\n                                return true;\\n                            }\\n                                continue;\\n                            }\\n\\n                        }\\n                        continue;\\n\\n                 } else {\\n                    revert(\\\"Invalid parking time slot\\\");\\n\\n                 } \\n \\n            }\\n\\n            return true;\\n\\n     }\\n\\n     function addTimeSlotToEnd(uint256 _tokenId, address caller, uint256 requestedStartTime, uint256 requestedEndTime) internal returns (bool) {\\n\\n        TimeSlots memory tempTimeSlot;\\n\\n        tempTimeSlot.walletAddress = caller;\\n        tempTimeSlot.startTime = requestedStartTime;\\n        tempTimeSlot.endTime = requestedEndTime;\\n        reservedParkingTimes[_tokenId].push(tempTimeSlot);\\n        return true;\\n\\n     }\\n\\n     function addTimeSlotToStart(uint256 _tokenId, address caller, uint256 requestedStartTime, uint256 requestedEndTime, uint256 timeSlotsLength) internal returns (bool) {\\n\\n                                delete tempReservedParkingTimes[_tokenId];\\n\\n                                TimeSlots memory tempTimeSlot;\\n                                 \\n                                tempTimeSlot.walletAddress = caller;\\n                                tempTimeSlot.startTime = requestedStartTime;\\n                                tempTimeSlot.endTime = requestedEndTime;\\n\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                                \\n                                for (uint j = 0; j < timeSlotsLength; j++ ) {\\n                                \\n                                tempTimeSlot.walletAddress = reservedParkingTimes[_tokenId][j].walletAddress;\\n                                tempTimeSlot.startTime = reservedParkingTimes[_tokenId][j].startTime;\\n                                tempTimeSlot.endTime = reservedParkingTimes[_tokenId][j].endTime;\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                                 }\\n\\n                                reservedParkingTimes[_tokenId] = tempReservedParkingTimes[_tokenId];\\n                                return true;\\n\\n     }\\n\\n    function reserveParkingSpotToken(uint256 _tokenId, uint8 _requestedStartHour, uint8 _requestedStartMinute, uint8 _requestedEndHour, uint8 _requestedEndMinute) public returns (bool) {\\n        require(_requestedStartHour <= 23, \\\"Start hour must be between 0 and 23\\\");\\n        require(_requestedStartMinute <= 59, \\\"Start minute must be between 0 and 59\\\");\\n        require(_requestedEndHour <= 23, \\\"End hour must be between 0 and 23\\\");\\n        require(_requestedEndMinute <= 59, \\\"End minute must be between 0 and 59\\\");\\n        require(depositors[msg.sender] >= 10000000000000000, \\\"Must deposit at least 0.01 Eth\\\");\\n\\n        (uint256 parkingSpotStartTime, uint256 parkingSpotEndTime) = retrievePermittedParkingTimes(_tokenId);\\n        uint256 requestedStartTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedStartHour,_requestedStartMinute), _tokenId);\\n        uint256 requestedEndTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedEndHour,_requestedEndMinute), _tokenId);\\n\\n        TimeSlots memory tempTimeSlot ;\\n        uint timeSlotsLength = reservedParkingTimes[_tokenId].length;\\n        uint lastIndex;\\n\\n        if (timeSlotsLength > 1) {\\n            lastIndex = (timeSlotsLength - 1);\\n        }\\n\\n    \\n        if (timeSlotsLength == 0) {\\n\\n        tempTimeSlot.walletAddress = msg.sender;\\n        tempTimeSlot.startTime = requestedStartTimeUnix;\\n        tempTimeSlot.endTime = requestedEndTimeUnix;\\n        reservedParkingTimes[_tokenId].push(tempTimeSlot);\\n            return true;\\n\\n\\n        } else if (timeSlotsLength == 1) {\\n            if (requestedStartTimeUnix > reservedParkingTimes[_tokenId][lastIndex].endTime) {\\n                addTimeSlotToEnd(_tokenId, msg.sender, requestedStartTimeUnix, requestedEndTimeUnix);\\n                return true;\\n            }\\n\\n\\n            if (reservedParkingTimes[_tokenId][0].endTime < requestedStartTimeUnix) {\\n                tempTimeSlot.walletAddress = msg.sender;\\n                tempTimeSlot.startTime = requestedStartTimeUnix;\\n                tempTimeSlot.endTime = requestedEndTimeUnix;\\n                reservedParkingTimes[_tokenId].push(tempTimeSlot);\\n            return true;\\n\\n            } else {\\n                revert(\\\"Time Slot unavailable, please try again\\\");\\n            }\\n        } else {\\n            if (requestedStartTimeUnix > reservedParkingTimes[_tokenId][lastIndex].endTime) {\\n                addTimeSlotToEnd(_tokenId, msg.sender, requestedStartTimeUnix, requestedEndTimeUnix);\\n                return true;\\n            }\\n            slotTimeSlotinMiddle(_tokenId, msg.sender, requestedStartTimeUnix, requestedEndTimeUnix, timeSlotsLength);\\n            return true;\\n        }\\n    }\\n\\n\\n\\n    // function endParkingSession(uint256 _tokenId) public returns (bool) {\\n    //     require(msg.sender == pst.ownerOf(_tokenId);)\\n\\n    // }\\n\\n    // function returnParkingSpotToken(uint256 _tokenId) public returns (bool) {\\n\\n    //     uint256 parkingEndtimeUnix = requestedParkingTimes[_tokenId][1];\\n\\n    //     if (block.timestamp >= parkingEndtimeUnix) {\\n    //         address currentUser = pst.ownerOf(_tokenId);\\n    //             pst.safeTransferFrom(currentUser, pst._parkingSpotOwners(_tokenId), _tokenId);\\n    //             psa.setSpotInUse(_tokenId, false);\\n    //             setSessionInProgress(currentUser, false);\\n    //             depositors[currentUser] -= sessionCost[_tokenId];\\n    //             payable(pst.paymentAddress(_tokenId)).transfer(sessionCost[_tokenId]);\\n    //             return true;\\n    //         } else {\\n    //             revert(\\\"Session is not over!\\\");\\n                \\n    // //         } \\n    // //     } else if (parkingEndtimeUnix == 0) {\\n    // //             address currentUser = pst.ownerOf(_tokenId);\\n    // //             pst.safeTransferFrom(currentUser, parkingSpotOwner[_tokenId], _tokenId);\\n    // //             psa.setSpotInUse(_tokenId, false);\\n    // //             return true;\\n    // //         } else {\\n    // //             revert(\\\"Session has is not over!\\\");\\n    // // }\\n\\n    //     revert(\\\"Session is not over!\\\");\\n\\n    //         }\\n\\n    // emit EndActiveParkingSesion(_tokenId);\\n\\n// }\\n\\nfunction getLatestPrice() public view returns (int) {\\n        (\\n            /*uint80 roundID*/,\\n            int price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = ethUSDpriceFeed.latestRoundData();\\n        return price;\\n    }\\n\\n// function removeActiveSession(uint _index) public {\\n//         require(_index < activeSessions.length, \\\"index out of bound\\\");\\n\\n//         for (uint i = _index; i < activeSessions.length - 1; i++) {\\n//             activeSessions[i] = activeSessions[i + 1];\\n//         }\\n//         activeSessions.pop();\\n//     }\\n\\n//     function checkIfParkingSessionOver() external {\\n//         for (uint i = 0; i < activeSessions.length; i++) {\\n//         uint256 parkingEndtimeUnix = requestedParkingTimes[activeSessions[i]][1];\\n\\n//         if (block.timestamp > parkingEndtimeUnix) {\\n//             returnParkingSpotToken(activeSessions[i]);\\n//             removeActiveSession(i);\\n//         }\\n\\n\\n//         }\\n\\n//     }\\n\\n    function distributeParkingSpots() external {\\n        uint256 tokenCount = pst.getTokenCount();\\n\\n        for (uint x = 1; x <= tokenCount; x ++) {\\n            for (uint y=0; y < reservedParkingTimes[x].length; y++ ) {\\n                \\n                // start of new session\\n                if (reservedParkingTimes[x][y].startTime < block.timestamp) {\\n\\n                    if (!(pst.ownerOf(x) == pst._parkingSpotOwners(x))) {\\n                    endParkingSession(x);\\n\\n                    if (!(y+1 > reservedParkingTimes[x].length)) {\\n                    uint timeToNextUser =  (block.timestamp % reservedParkingTimes[x][y+1].startTime);\\n                    if (timeToNextUser > 300 ) {\\n                     pst.safeTransferFrom(pst.ownerOf(x), pst._parkingSpotOwners(x), x);\\n                    } else {\\n                    address nextUser = reservedParkingTimes[x][y+1].walletAddress;\\n                    uint256 nextStartTime = reservedParkingTimes[x][y+1].startTime;\\n                    uint256 nextEndTime = reservedParkingTimes[x][y+1].endTime;\\n\\n                    startParkingSession(x, nextUser,nextStartTime,nextEndTime);\\n                    pst.safeTransferFrom(pst.ownerOf(x), nextUser, x);\\n\\n                    removeOldReservation(x, y);\\n\\n                    }\\n\\n                } else {\\n                    pst.safeTransferFrom(pst.ownerOf(x), pst._parkingSpotOwners(x), x);\\n\\n                }\\n\\n\\n                } else {\\n                    address nextUser = reservedParkingTimes[x][y].walletAddress;\\n                    uint256 nextStartTime = reservedParkingTimes[x][y].startTime;\\n                    uint256 nextEndTime = reservedParkingTimes[x][y].endTime;\\n\\n                    startParkingSession(x, nextUser,nextStartTime,nextEndTime);\\n                    pst.safeTransferFrom(pst.ownerOf(x), nextUser, x);\\n\\n                    removeOldReservation(x, y);\\n\\n                }\\n\\n                   } \\n\\n\\n\\n                // end of present session\\n                if ( block.timestamp > reservedParkingTimes[x][y].endTime) {\\n                    \\n                endParkingSession(x);\\n\\n                // transfer token back to owner\\n                pst.safeTransferFrom(pst.ownerOf(x), pst._parkingSpotOwners(x), x);\\n\\n\\n                }\\n\\n\\n            }\\n            \\n\\n\\n        }\\n\\n    }\\n\\n    function endParkingSession(uint256 _tokenId) internal {\\n\\n        // charges user and updates mappings\\n        address currentUser = pst.ownerOf(_tokenId);\\n        address tokenOwner = pst._parkingSpotOwners(_tokenId);\\n        psa.setSpotInUse(_tokenId, false);\\n        setSessionInProgress(currentUser, false);\\n        depositors[currentUser] -= sessionCost[_tokenId];\\n        depositors[tokenOwner] += sessionCost[_tokenId];\\n        spotLastUsedBy[_tokenId] = currentUser;\\n\\n    }\\n\\n    function startParkingSession(uint256 _tokenId, address _currentUser, uint256 _startTime, uint256 _endTime) internal {\\n\\n        psa.setSpotInUse(_tokenId, true);\\n        setSessionInProgress(_currentUser, true);\\n        sessionCost[_tokenId] = calculateSessionCost(_tokenId, _startTime, _endTime);\\n        activeSessions.push(_tokenId);\\n\\n    }\\n\\n    function removeOldReservation(uint256 _tokenId, uint256 _index) internal {\\n        delete tempReservedParkingTimes[_tokenId];\\n\\n        TimeSlots memory tempTimeSlot ;\\n\\n\\n            uint i = _index;\\n            i = i + 1;\\n        for (i; i < reservedParkingTimes[_tokenId].length; i++ ) {\\n        \\n        tempTimeSlot.walletAddress = reservedParkingTimes[_tokenId][i].walletAddress;\\n        tempTimeSlot.startTime = reservedParkingTimes[_tokenId][i].startTime;\\n        tempTimeSlot.endTime = reservedParkingTimes[_tokenId][i].endTime;\\n        tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n            }\\n\\n        reservedParkingTimes[_tokenId] = tempReservedParkingTimes[_tokenId];\\n\\n    }\\n\\n    function reportParkingSpotOveruse(uint256 _tokenId, bytes memory registrationNumber ) public {\\n\\n        string memory addressString = Strings.toHexString(uint160(spotLastUsedBy[_tokenId]), 20);\\n        bytes memory addressBytes = bytes(addressString);\\n        \\n        bytes memory hashPayload =  bytes.concat(addressBytes,registrationNumber);\\n\\n        testHashPayload = hashPayload;\\n\\n\\n        // bytes32 hashToCheck = sha256(hashPayload);\\n\\n        // if (hashPayload == hashedVehicleRegistration[spotLastUsedBy[_tokenId]]) {\\n        //     revert(\\\"We have a WEINER!!\\\");\\n        // }\\n\\n\\n    }\\n\\n    function setVehicleRegistrationHash(bytes32 _hash) external {\\n        hashedVehicleRegistration[msg.sender] = _hash;\\n    }\\n\\n    function checkVehicleRegistrationHash(address _address) internal returns (bool) {\\n        if (!(hashedVehicleRegistration[_address] == 0)) {\\n            return true;\\n        }\\n    } \\n\\n\\n}\\n\\n\",\"keccak256\":\"0xcf901e8b294af8823fdb531ca1bbc935a0d15436af4597b91c5bbe1a52acd96a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525060008082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155505033601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073e7f1725e7734ce288f8367e1bb143e90bb3f0512601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061552c8061011b6000396000f3fe60806040526004361061012a5760003560e01c8063789e8cef116100ab578063adc99c4d1161006f578063adc99c4d1461042e578063b919310c1461046b578063c6e5a419146104aa578063d0e30db0146104e7578063d2182855146104f1578063eed75f6d1461052e5761012a565b8063789e8cef146103455780638cd443c51461035c5780638da5cb5b1461039b5780638e15f473146103c65780639e698c5f146103f15761012a565b806340eb2f05116100f257806340eb2f051461022657806355f8d9b9146102635780636312c05d1461028c5780636c749f67146102c9578063727bc20a146103065761012a565b8063088c05eb1461012f5780630b58b7761461016c5780632bebbe4d146101975780632e1a7d4d146101d45780632e491cc8146101fd575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190613f7e565b61056b565b6040516101639190613fc6565b60405180910390f35b34801561017857600080fd5b5061018161058b565b60405161018e919061407a565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b991906140d2565b610619565b6040516101cb9190614121565b60405180910390f35b3480156101e057600080fd5b506101fb60048036038101906101f6919061413c565b610641565b005b34801561020957600080fd5b50610224600480360381019061021f919061429e565b610895565b005b34801561023257600080fd5b5061024d6004803603810190610248919061413c565b610936565b60405161025a9190614309565b60405180910390f35b34801561026f57600080fd5b5061028a6004803603810190610285919061435a565b610969565b005b34801561029857600080fd5b506102b360048036038101906102ae9190614387565b6109b0565b6040516102c09190614121565b60405180910390f35b3480156102d557600080fd5b506102f060048036038101906102eb919061413c565b610b0d565b6040516102fd9190614309565b60405180910390f35b34801561031257600080fd5b5061032d600480360381019061032891906140d2565b610b40565b60405161033c939291906143da565b60405180910390f35b34801561035157600080fd5b5061035a610c17565b005b34801561036857600080fd5b50610383600480360381019061037e91906140d2565b611868565b604051610392939291906143da565b60405180910390f35b3480156103a757600080fd5b506103b06118cf565b6040516103bd9190614432565b60405180910390f35b3480156103d257600080fd5b506103db6118f5565b6040516103e89190614466565b60405180910390f35b3480156103fd57600080fd5b50610418600480360381019061041391906144ba565b611996565b6040516104259190613fc6565b60405180910390f35b34801561043a57600080fd5b5061045560048036038101906104509190613f7e565b611f0a565b6040516104629190614544565b60405180910390f35b34801561047757600080fd5b50610492600480360381019061048d91906140d2565b611f22565b6040516104a1939291906143da565b60405180910390f35b3480156104b657600080fd5b506104d160048036038101906104cc919061413c565b611f89565b6040516104de9190614121565b60405180910390f35b6104ef611fad565b005b3480156104fd57600080fd5b506105186004803603810190610513919061413c565b61203e565b6040516105259190614121565b60405180910390f35b34801561053a57600080fd5b5061055560048036038101906105509190613f7e565b612056565b6040516105629190614121565b60405180910390f35b60096020528060005260406000206000915054906101000a900460ff1681565b601180546105989061458e565b80601f01602080910402602001604051908101604052809291908181526020018280546105c49061458e565b80156106115780601f106105e657610100808354040283529160200191610611565b820191906000526020600020905b8154815290600101906020018083116105f457829003601f168201915b505050505081565b6008602052816000526040600020816002811061063557600080fd5b01600091509150505481565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba9061461d565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610712919061466c565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161073f906146d1565b60006040518083038185875af1925050503d806000811461077c576040519150601f19603f3d011682016040523d82523d6000602084013e610781565b606091505b50509050806107c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc90614732565b60405180910390fd5b60001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084f90614836565b60405180910390fd5b7f109ee141209f6239a23d90572cc3e0474bd55208d82e0b5ad378d8ee7d9223ea3383604051610889929190614856565b60405180910390a15050565b60006108eb6010600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16601461206e565b90506000819050600081846040516020016109079291906148b0565b6040516020818303038152906040529050806011908051906020019061092e929190613ced565b505050505050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000806305f5e100735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff1663828f74b1876040518263ffffffff1660e01b8152600401610a059190614121565b602060405180830381865afa158015610a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4691906148e9565b610a509190614916565b90506000610a5c6118f5565b905060008282610a6c919061499f565b670de0b6b3a7640000610a7f919061499f565b905060006064610e1083610a93919061499f565b610a9d919061499f565b905060008787610aad919061466c565b90507fcf373849aa984dfd76504d4f7b03864086718e62d57440024002847b16783a81898383610add9190614916565b604051610aeb9291906149d0565b60405180910390a18181610aff9190614916565b955050505050509392505050565b60106020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600d60008681526020019081526020016000208481548110610b6a57610b696149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d60008781526020019081526020016000208581548110610bc157610bc06149f9565b5b906000526020600020906003020160010154600d60008881526020019081526020016000208681548110610bf857610bf76149f9565b5b9060005260206000209060030201600201549250925092509250925092565b600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166378a895676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9c91906148e9565b90506000600190505b8181116118645760005b600d6000838152602001908152602001600020805490508110156118505742600d60008481526020019081526020016000208281548110610cf357610cf26149f9565b5b90600052602060002090600302016001015410156116565773dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663c55fd06b836040518263ffffffff1660e01b8152600401610d589190614121565b602060405180830381865afa158015610d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d999190614a3d565b73ffffffffffffffffffffffffffffffffffffffff1673dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610dfc9190614121565b6020604051808303816000875af1158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f9190614a3d565b73ffffffffffffffffffffffffffffffffffffffff161461145857610e63826122aa565b600d600083815260200190815260200160002080549050600182610e879190614a6a565b116112b3576000600d6000848152602001908152602001600020600183610eae9190614a6a565b81548110610ebf57610ebe6149f9565b5b90600052602060002090600302016001015442610edc9190614ac0565b905061012c81111561108c5773dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b8152600401610f659190614121565b6020604051808303816000875af1158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa89190614a3d565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663c55fd06b876040518263ffffffff1660e01b8152600401610ff59190614121565b602060405180830381865afa158015611012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110369190614a3d565b866040518463ffffffff1660e01b815260040161105593929190614af1565b600060405180830381600087803b15801561106f57600080fd5b505af1158015611083573d6000803e3d6000fd5b505050506112ad565b6000600d60008581526020019081526020016000206001846110ae9190614a6a565b815481106110bf576110be6149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600d60008681526020019081526020016000206001856111159190614a6a565b81548110611126576111256149f9565b5b90600052602060002090600302016001015490506000600d600087815260200190815260200160002060018661115c9190614a6a565b8154811061116d5761116c6149f9565b5b906000526020600020906003020160020154905061118d86848484612586565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff1660e01b815260040161120a9190614121565b6020604051808303816000875af1158015611229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d9190614a3d565b85896040518463ffffffff1660e01b815260040161126d93929190614af1565b600060405180830381600087803b15801561128757600080fd5b505af115801561129b573d6000803e3d6000fd5b505050506112a98686612664565b5050505b50611453565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016113309190614121565b6020604051808303816000875af115801561134f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113739190614a3d565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663c55fd06b866040518263ffffffff1660e01b81526004016113c09190614121565b602060405180830381865afa1580156113dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114019190614a3d565b856040518463ffffffff1660e01b815260040161142093929190614af1565b600060405180830381600087803b15801561143a57600080fd5b505af115801561144e573d6000803e3d6000fd5b505050505b611655565b6000600d6000848152602001908152602001600020828154811061147f5761147e6149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600d600085815260200190815260200160002083815481106114da576114d96149f9565b5b90600052602060002090600302016001015490506000600d60008681526020019081526020016000208481548110611515576115146149f9565b5b906000526020600020906003020160020154905061153585848484612586565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e886040518263ffffffff1660e01b81526004016115b29190614121565b6020604051808303816000875af11580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190614a3d565b85886040518463ffffffff1660e01b815260040161161593929190614af1565b600060405180830381600087803b15801561162f57600080fd5b505af1158015611643573d6000803e3d6000fd5b505050506116518585612664565b5050505b5b600d6000838152602001908152602001600020818154811061167b5761167a6149f9565b5b90600052602060002090600302016002015442111561183d5761169d826122aa565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161171a9190614121565b6020604051808303816000875af1158015611739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175d9190614a3d565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663c55fd06b866040518263ffffffff1660e01b81526004016117aa9190614121565b602060405180830381865afa1580156117c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117eb9190614a3d565b856040518463ffffffff1660e01b815260040161180a93929190614af1565b600060405180830381600087803b15801561182457600080fd5b505af1158015611838573d6000803e3d6000fd5b505050505b808061184890614b28565b915050610caf565b50808061185c90614b28565b915050610ca5565b5050565b600d602052816000526040600020818154811061188457600080fd5b9060005260206000209060030201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119899190614bdf565b5050509150508091505090565b600060178560ff1611156119df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d690614ccc565b60405180910390fd5b603b8460ff161115611a26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1d90614d5e565b60405180910390fd5b60178360ff161115611a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6490614df0565b60405180910390fd5b603b8260ff161115611ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aab90614e82565b60405180910390fd5b662386f26fc10000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611b3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3490614eee565b60405180910390fd5b600080611b49886128b4565b915091506000611b62611b5c8989612a1e565b8a612a53565b90506000611b79611b738888612a1e565b8b612a53565b9050611b83613d73565b6000600d60008d815260200190815260200160002080549050905060006001821115611bb957600182611bb6919061466c565b90505b6000821415611cb85733836000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508483602001818152505083836040018181525050600d60008e815260200190815260200160002083908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506001975050505050505050611f01565b6001821415611e8c57600d60008e81526020019081526020016000208181548110611ce657611ce56149f9565b5b906000526020600020906003020160020154851115611d1c57611d0b8d338787612b6a565b506001975050505050505050611f01565b84600d60008f8152602001908152602001600020600081548110611d4357611d426149f9565b5b9060005260206000209060030201600201541015611e515733836000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508483602001818152505083836040018181525050600d60008e815260200190815260200160002083908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506001975050505050505050611f01565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8390614f80565b60405180910390fd5b600d60008e81526020019081526020016000208181548110611eb157611eb06149f9565b5b906000526020600020906003020160020154851115611ee757611ed68d338787612b6a565b506001975050505050505050611f01565b611ef48d33878786612c67565b5060019750505050505050505b95945050505050565b600f6020528060005260406000206000915090505481565b600e6020528160005260406000208181548110611f3e57600080fd5b9060005260206000209060030201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b600c8181548110611f9957600080fd5b906000526020600020016000915090505481565b34600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ffc9190614a6a565b925050819055507f7c4b3a8770ca0dfa675823896daf246993d41e6c18b0e130407888511d56f53a3334604051612034929190614856565b60405180910390a1565b600a6020528060005260406000206000915090505481565b60066020528060005260406000206000915090505481565b6060600060028360026120819190614916565b61208b9190614a6a565b67ffffffffffffffff8111156120a4576120a3614173565b5b6040519080825280601f01601f1916602001820160405280156120d65781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061210e5761210d6149f9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612172576121716149f9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026121b29190614916565b6121bc9190614a6a565b90505b600181111561225c577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106121fe576121fd6149f9565b5b1a60f81b828281518110612215576122146149f9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061225590614fa0565b90506121bf565b50600084146122a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229790615016565b60405180910390fd5b8091505092915050565b600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016122f99190614121565b6020604051808303816000875af1158015612318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233c9190614a3d565b9050600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663c55fd06b846040518263ffffffff1660e01b815260040161238d9190614121565b602060405180830381865afa1580156123aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ce9190614a3d565b9050735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16633ee036878460006040518363ffffffff1660e01b8152600401612420929190615036565b600060405180830381600087803b15801561243a57600080fd5b505af115801561244e573d6000803e3d6000fd5b5050505061245d826000612ea2565b600a600084815260200190815260200160002054600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124bf919061466c565b92505081905550600a600084815260200190815260200160002054600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125289190614a6a565b92505081905550816010600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16633ee036878560016040518363ffffffff1660e01b81526004016125d6929190615036565b600060405180830381600087803b1580156125f057600080fd5b505af1158015612604573d6000803e3d6000fd5b50505050612613836001612ea2565b61261e8483836109b0565b600a600086815260200190815260200160002081905550600c84908060018154018082558091505060019003906000526020600020016000909190919091505550505050565b600e600083815260200190815260200160002060006126839190613daa565b61268b613d73565b600082905060018161269d9190614a6a565b90505b600d60008581526020019081526020016000208054905081101561287957600d600085815260200190815260200160002081815481106126e3576126e26149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d60008581526020019081526020016000208181548110612771576127706149f9565b5b906000526020600020906003020160010154826020018181525050600d600085815260200190815260200160002081815481106127b1576127b06149f9565b5b906000526020600020906003020160020154826040018181525050600e600085815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050808061287190614b28565b9150506126a0565b600e6000858152602001908152602001600020600d60008681526020019081526020016000209080546128ad929190613dce565b5050505050565b600080600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff1663ccc5ffe9866040518263ffffffff1660e01b81526004016129079190614121565b6040805180830381865afa158015612923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129479190615074565b91509150600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16631a1089c2886040518263ffffffff1660e01b815260040161299b9190614121565b6040805180830381865afa1580156129b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129db9190615074565b9150915060006129f46129ee8686612a1e565b89612a53565b90506000612a0b612a058585612a1e565b8a612a53565b9050818197509750505050505050915091565b6000612a28612efd565b612a4b60008001546000600101546000600201548660ff168660ff166000612f50565b905092915050565b600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16635fe20047846040518263ffffffff1660e01b8152600401612aa39190614121565b6040805180830381865afa158015612abf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae3919061516a565b90506000610e1082600160028110612afe57612afd6149f9565b5b602002015160ff16612b1091906151a5565b61ffff1690506000600183600060028110612b2e57612b2d6149f9565b5b602002015160ff161415612b4f578186612b48919061466c565b9050612b5e565b8186612b5b9190614a6a565b90505b80935050505092915050565b6000612b74613d73565b84816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505082816040018181525050600d600087815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506001915050949350505050565b600080600090505b82811015612e935760008190508080612c8790614b28565b915050600d60008981526020019081526020016000208281548110612caf57612cae6149f9565b5b906000526020600020906003020160020154861115612e455783811115612dc557612cd8613d73565b87816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508681602001818152505085816040018181525050600d60008a815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550505050612e93565b600d60008981526020019081526020016000208181548110612dea57612de96149f9565b5b906000526020600020906003020160010154851015612e3f576000821415612e2557612e198888888888612fb1565b50600192505050612e99565b612e33888888888887613479565b50600192505050612e99565b50612e80565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e779061522d565b60405180910390fd5b8080612e8b90614b28565b915050612c6f565b60019150505b95945050505050565b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b612f0642613968565b6000800160008060010160008060020160008060030160008060040160008060050160008c919050558b919050558a91905055899190505588919050558791905055505050505050565b600081603c84612f609190614916565b610e1086612f6e9190614916565b62015180612f7d8b8b8b6139ef565b612f879190614916565b612f919190614a6a565b612f9b9190614a6a565b612fa59190614a6a565b90509695505050505050565b6000600e60008781526020019081526020016000206000612fd29190613daa565b612fda613d73565b600d600088815260200190815260200160002060008154811061300057612fff6149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d600088815260200190815260200160002060008154811061308f5761308e6149f9565b5b906000526020600020906003020160010154816020018181525050600d60008881526020019081526020016000206000815481106130d0576130cf6149f9565b5b906000526020600020906003020160020154816040018181525050600e600088815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505085816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508481602001818152505083816040018181525050600e600088815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506000600190505b8381101561343557600d6000898152602001908152602001600020818154811061329f5761329e6149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d6000898152602001908152602001600020818154811061332d5761332c6149f9565b5b906000526020600020906003020160010154826020018181525050600d6000898152602001908152602001600020818154811061336d5761336c6149f9565b5b906000526020600020906003020160020154826040018181525050600e600089815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050808061342d90614b28565b915050613272565b50600e6000888152602001908152602001600020600d600089815260200190815260200160002090805461346a929190613dce565b50600191505095945050505050565b6000600e6000888152602001908152602001600020600061349a9190613daa565b6134a2613d73565b60005b83811161366757600d60008a815260200190815260200160002081815481106134d1576134d06149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d60008a8152602001908152602001600020818154811061355f5761355e6149f9565b5b906000526020600020906003020160010154826020018181525050600d60008a8152602001908152602001600020818154811061359f5761359e6149f9565b5b906000526020600020906003020160020154826040018181525050600e60008a815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050808061365f90614b28565b9150506134a5565b5086816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508581602001818152505084816040018181525050600e600089815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050600060018461375d9190614a6a565b90505b8481101561392357600d60008a8152602001908152602001600020818154811061378d5761378c6149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d60008a8152602001908152602001600020818154811061381b5761381a6149f9565b5b906000526020600020906003020160010154826020018181525050600d60008a8152602001908152602001600020818154811061385b5761385a6149f9565b5b906000526020600020906003020160020154826040018181525050600e60008a815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050808061391b90614b28565b915050613760565b600e60008a8152602001908152602001600020600d60008b8152602001908152602001600020908054613957929190613dce565b506001925050509695505050505050565b6000806000806000806139886201518088613983919061499f565b613b4e565b809650819750829850505050600062015180886139a59190614ac0565b9050610e10816139b5919061499f565b9350610e10816139c59190614ac0565b9050603c816139d4919061499f565b9250603c816139e39190614ac0565b91505091939550919395565b60006107b2841015613a0057600080fd5b600084905060008490506000849050600062253d8c60046064600c600e87613a28919061524d565b613a3291906152e1565b61132488613a40919061534b565b613a4a919061534b565b613a5491906152e1565b6003613a6091906153df565b613a6a91906152e1565b600c80600c600e88613a7c919061524d565b613a8691906152e1565b613a9091906153df565b600287613a9d919061524d565b613aa7919061524d565b61016f613ab491906153df565b613abe91906152e1565b6004600c600e88613acf919061524d565b613ad991906152e1565b6112c089613ae7919061534b565b613af1919061534b565b6105b5613afe91906153df565b613b0891906152e1565b617d4b86613b16919061524d565b613b20919061534b565b613b2a919061534b565b613b34919061524d565b613b3e919061524d565b9050809450505050509392505050565b600080600080849050600062253d8c62010bd983613b6c919061534b565b613b76919061534b565b9050600062023ab1826004613b8b91906153df565b613b9591906152e1565b9050600460038262023ab1613baa91906153df565b613bb4919061534b565b613bbe91906152e1565b82613bc9919061524d565b9150600062164b09600184613bde919061534b565b610fa0613beb91906153df565b613bf591906152e1565b9050601f6004826105b5613c0991906153df565b613c1391906152e1565b84613c1e919061524d565b613c28919061534b565b9250600061098f846050613c3c91906153df565b613c4691906152e1565b9050600060508261098f613c5a91906153df565b613c6491906152e1565b85613c6f919061524d565b9050600b82613c7e91906152e1565b945084600c613c8d91906153df565b600283613c9a919061534b565b613ca4919061524d565b91508483603186613cb5919061524d565b6064613cc191906153df565b613ccb919061534b565b613cd5919061534b565b92508298508197508096505050505050509193909250565b828054613cf99061458e565b90600052602060002090601f016020900481019282613d1b5760008555613d62565b82601f10613d3457805160ff1916838001178555613d62565b82800160010185558215613d62579182015b82811115613d61578251825591602001919060010190613d46565b5b509050613d6f9190613ea1565b5090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b5080546000825560030290600052602060002090810190613dcb9190613ebe565b50565b828054828255906000526020600020906003028101928215613e905760005260206000209160030282015b82811115613e8f5782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820154816001015560028201548160020155505091600301919060030190613df9565b5b509050613e9d9190613ebe565b5090565b5b80821115613eba576000816000905550600101613ea2565b5090565b5b80821115613f0857600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905550600301613ebf565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613f4b82613f20565b9050919050565b613f5b81613f40565b8114613f6657600080fd5b50565b600081359050613f7881613f52565b92915050565b600060208284031215613f9457613f93613f16565b5b6000613fa284828501613f69565b91505092915050565b60008115159050919050565b613fc081613fab565b82525050565b6000602082019050613fdb6000830184613fb7565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561401b578082015181840152602081019050614000565b8381111561402a576000848401525b50505050565b6000601f19601f8301169050919050565b600061404c82613fe1565b6140568185613fec565b9350614066818560208601613ffd565b61406f81614030565b840191505092915050565b600060208201905081810360008301526140948184614041565b905092915050565b6000819050919050565b6140af8161409c565b81146140ba57600080fd5b50565b6000813590506140cc816140a6565b92915050565b600080604083850312156140e9576140e8613f16565b5b60006140f7858286016140bd565b9250506020614108858286016140bd565b9150509250929050565b61411b8161409c565b82525050565b60006020820190506141366000830184614112565b92915050565b60006020828403121561415257614151613f16565b5b6000614160848285016140bd565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6141ab82614030565b810181811067ffffffffffffffff821117156141ca576141c9614173565b5b80604052505050565b60006141dd613f0c565b90506141e982826141a2565b919050565b600067ffffffffffffffff82111561420957614208614173565b5b61421282614030565b9050602081019050919050565b82818337600083830152505050565b600061424161423c846141ee565b6141d3565b90508281526020810184848401111561425d5761425c61416e565b5b61426884828561421f565b509392505050565b600082601f83011261428557614284614169565b5b813561429584826020860161422e565b91505092915050565b600080604083850312156142b5576142b4613f16565b5b60006142c3858286016140bd565b925050602083013567ffffffffffffffff8111156142e4576142e3613f1b565b5b6142f085828601614270565b9150509250929050565b61430381613f40565b82525050565b600060208201905061431e60008301846142fa565b92915050565b6000819050919050565b61433781614324565b811461434257600080fd5b50565b6000813590506143548161432e565b92915050565b6000602082840312156143705761436f613f16565b5b600061437e84828501614345565b91505092915050565b6000806000606084860312156143a05761439f613f16565b5b60006143ae868287016140bd565b93505060206143bf868287016140bd565b92505060406143d0868287016140bd565b9150509250925092565b60006060820190506143ef60008301866142fa565b6143fc6020830185614112565b6144096040830184614112565b949350505050565b600061441c82613f20565b9050919050565b61442c81614411565b82525050565b60006020820190506144476000830184614423565b92915050565b6000819050919050565b6144608161444d565b82525050565b600060208201905061447b6000830184614457565b92915050565b600060ff82169050919050565b61449781614481565b81146144a257600080fd5b50565b6000813590506144b48161448e565b92915050565b600080600080600060a086880312156144d6576144d5613f16565b5b60006144e4888289016140bd565b95505060206144f5888289016144a5565b9450506040614506888289016144a5565b9350506060614517888289016144a5565b9250506080614528888289016144a5565b9150509295509295909350565b61453e81614324565b82525050565b60006020820190506145596000830184614535565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806145a657607f821691505b602082108114156145ba576145b961455f565b5b50919050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820455448206465706f73697465640000000000000000600082015250565b60006146076018836145c0565b9150614612826145d1565b602082019050919050565b60006020820190508181036000830152614636816145fa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006146778261409c565b91506146828361409c565b9250828210156146955761469461463d565b5b828203905092915050565b600081905092915050565b50565b60006146bb6000836146a0565b91506146c6826146ab565b600082019050919050565b60006146dc826146ae565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b600061471c6014836145c0565b9150614727826146e6565b602082019050919050565b6000602082019050818103600083015261474b8161470f565b9050919050565b7f596f752063616e6e6f7420776974686472617720455448207768696c6520706160008201527f726b696e672073657373696f6e20696e2070726f67726573732e20506c65617360208201527f65207761697420756e74696c207468652073657373696f6e20697320636f6d7060408201527f6c657465642c206f7220656e64207468652073657373696f6e206d616e75616c60608201527f6c79210000000000000000000000000000000000000000000000000000000000608082015250565b60006148206083836145c0565b915061482b82614752565b60a082019050919050565b6000602082019050818103600083015261484f81614813565b9050919050565b600060408201905061486b60008301856142fa565b6148786020830184614112565b9392505050565b600061488a82613fe1565b61489481856146a0565b93506148a4818560208601613ffd565b80840191505092915050565b60006148bc828561487f565b91506148c8828461487f565b91508190509392505050565b6000815190506148e3816140a6565b92915050565b6000602082840312156148ff576148fe613f16565b5b600061490d848285016148d4565b91505092915050565b60006149218261409c565b915061492c8361409c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156149655761496461463d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006149aa8261409c565b91506149b58361409c565b9250826149c5576149c4614970565b5b828204905092915050565b60006040820190506149e56000830185614112565b6149f26020830184614112565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050614a3781613f52565b92915050565b600060208284031215614a5357614a52613f16565b5b6000614a6184828501614a28565b91505092915050565b6000614a758261409c565b9150614a808361409c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614ab557614ab461463d565b5b828201905092915050565b6000614acb8261409c565b9150614ad68361409c565b925082614ae657614ae5614970565b5b828206905092915050565b6000606082019050614b0660008301866142fa565b614b1360208301856142fa565b614b206040830184614112565b949350505050565b6000614b338261409c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b6657614b6561463d565b5b600182019050919050565b600069ffffffffffffffffffff82169050919050565b614b9081614b71565b8114614b9b57600080fd5b50565b600081519050614bad81614b87565b92915050565b614bbc8161444d565b8114614bc757600080fd5b50565b600081519050614bd981614bb3565b92915050565b600080600080600060a08688031215614bfb57614bfa613f16565b5b6000614c0988828901614b9e565b9550506020614c1a88828901614bca565b9450506040614c2b888289016148d4565b9350506060614c3c888289016148d4565b9250506080614c4d88828901614b9e565b9150509295509295909350565b7f537461727420686f7572206d757374206265206265747765656e203020616e6460008201527f2032330000000000000000000000000000000000000000000000000000000000602082015250565b6000614cb66023836145c0565b9150614cc182614c5a565b604082019050919050565b60006020820190508181036000830152614ce581614ca9565b9050919050565b7f5374617274206d696e757465206d757374206265206265747765656e2030206160008201527f6e64203539000000000000000000000000000000000000000000000000000000602082015250565b6000614d486025836145c0565b9150614d5382614cec565b604082019050919050565b60006020820190508181036000830152614d7781614d3b565b9050919050565b7f456e6420686f7572206d757374206265206265747765656e203020616e64203260008201527f3300000000000000000000000000000000000000000000000000000000000000602082015250565b6000614dda6021836145c0565b9150614de582614d7e565b604082019050919050565b60006020820190508181036000830152614e0981614dcd565b9050919050565b7f456e64206d696e757465206d757374206265206265747765656e203020616e6460008201527f2035390000000000000000000000000000000000000000000000000000000000602082015250565b6000614e6c6023836145c0565b9150614e7782614e10565b604082019050919050565b60006020820190508181036000830152614e9b81614e5f565b9050919050565b7f4d757374206465706f736974206174206c6561737420302e3031204574680000600082015250565b6000614ed8601e836145c0565b9150614ee382614ea2565b602082019050919050565b60006020820190508181036000830152614f0781614ecb565b9050919050565b7f54696d6520536c6f7420756e617661696c61626c652c20706c6561736520747260008201527f7920616761696e00000000000000000000000000000000000000000000000000602082015250565b6000614f6a6027836145c0565b9150614f7582614f0e565b604082019050919050565b60006020820190508181036000830152614f9981614f5d565b9050919050565b6000614fab8261409c565b91506000821415614fbf57614fbe61463d565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006150006020836145c0565b915061500b82614fca565b602082019050919050565b6000602082019050818103600083015261502f81614ff3565b9050919050565b600060408201905061504b6000830185614112565b6150586020830184613fb7565b9392505050565b60008151905061506e8161448e565b92915050565b6000806040838503121561508b5761508a613f16565b5b60006150998582860161505f565b92505060206150aa8582860161505f565b9150509250929050565b600067ffffffffffffffff8211156150cf576150ce614173565b5b602082029050919050565b600080fd5b60006150f26150ed846150b4565b6141d3565b9050806020840283018581111561510c5761510b6150da565b5b835b818110156151355780615121888261505f565b84526020840193505060208101905061510e565b5050509392505050565b600082601f83011261515457615153614169565b5b60026151618482856150df565b91505092915050565b6000604082840312156151805761517f613f16565b5b600061518e8482850161513f565b91505092915050565b600061ffff82169050919050565b60006151b082615197565b91506151bb83615197565b92508161ffff04831182151516156151d6576151d561463d565b5b828202905092915050565b7f496e76616c6964207061726b696e672074696d6520736c6f7400000000000000600082015250565b60006152176019836145c0565b9150615222826151e1565b602082019050919050565b600060208201905081810360008301526152468161520a565b9050919050565b60006152588261444d565b91506152638361444d565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561529e5761529d61463d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156152d6576152d561463d565b5b828203905092915050565b60006152ec8261444d565b91506152f78361444d565b92508261530757615306614970565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156153405761533f61463d565b5b828205905092915050565b60006153568261444d565b91506153618361444d565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561539c5761539b61463d565b5b817f80000000000000000000000000000000000000000000000000000000000000000383126000831216156153d4576153d361463d565b5b828201905092915050565b60006153ea8261444d565b91506153f58361444d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156154345761543361463d565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156154715761547061463d565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156154ae576154ad61463d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156154eb576154ea61463d565b5b82820290509291505056fea2646970667358221220404e37694022882c489d91cdae066d1fd1d47ca9e305f8c220199d93a8ff3cce64736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c8063789e8cef116100ab578063adc99c4d1161006f578063adc99c4d1461042e578063b919310c1461046b578063c6e5a419146104aa578063d0e30db0146104e7578063d2182855146104f1578063eed75f6d1461052e5761012a565b8063789e8cef146103455780638cd443c51461035c5780638da5cb5b1461039b5780638e15f473146103c65780639e698c5f146103f15761012a565b806340eb2f05116100f257806340eb2f051461022657806355f8d9b9146102635780636312c05d1461028c5780636c749f67146102c9578063727bc20a146103065761012a565b8063088c05eb1461012f5780630b58b7761461016c5780632bebbe4d146101975780632e1a7d4d146101d45780632e491cc8146101fd575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190613f7e565b61056b565b6040516101639190613fc6565b60405180910390f35b34801561017857600080fd5b5061018161058b565b60405161018e919061407a565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b991906140d2565b610619565b6040516101cb9190614121565b60405180910390f35b3480156101e057600080fd5b506101fb60048036038101906101f6919061413c565b610641565b005b34801561020957600080fd5b50610224600480360381019061021f919061429e565b610895565b005b34801561023257600080fd5b5061024d6004803603810190610248919061413c565b610936565b60405161025a9190614309565b60405180910390f35b34801561026f57600080fd5b5061028a6004803603810190610285919061435a565b610969565b005b34801561029857600080fd5b506102b360048036038101906102ae9190614387565b6109b0565b6040516102c09190614121565b60405180910390f35b3480156102d557600080fd5b506102f060048036038101906102eb919061413c565b610b0d565b6040516102fd9190614309565b60405180910390f35b34801561031257600080fd5b5061032d600480360381019061032891906140d2565b610b40565b60405161033c939291906143da565b60405180910390f35b34801561035157600080fd5b5061035a610c17565b005b34801561036857600080fd5b50610383600480360381019061037e91906140d2565b611868565b604051610392939291906143da565b60405180910390f35b3480156103a757600080fd5b506103b06118cf565b6040516103bd9190614432565b60405180910390f35b3480156103d257600080fd5b506103db6118f5565b6040516103e89190614466565b60405180910390f35b3480156103fd57600080fd5b50610418600480360381019061041391906144ba565b611996565b6040516104259190613fc6565b60405180910390f35b34801561043a57600080fd5b5061045560048036038101906104509190613f7e565b611f0a565b6040516104629190614544565b60405180910390f35b34801561047757600080fd5b50610492600480360381019061048d91906140d2565b611f22565b6040516104a1939291906143da565b60405180910390f35b3480156104b657600080fd5b506104d160048036038101906104cc919061413c565b611f89565b6040516104de9190614121565b60405180910390f35b6104ef611fad565b005b3480156104fd57600080fd5b506105186004803603810190610513919061413c565b61203e565b6040516105259190614121565b60405180910390f35b34801561053a57600080fd5b5061055560048036038101906105509190613f7e565b612056565b6040516105629190614121565b60405180910390f35b60096020528060005260406000206000915054906101000a900460ff1681565b601180546105989061458e565b80601f01602080910402602001604051908101604052809291908181526020018280546105c49061458e565b80156106115780601f106105e657610100808354040283529160200191610611565b820191906000526020600020905b8154815290600101906020018083116105f457829003601f168201915b505050505081565b6008602052816000526040600020816002811061063557600080fd5b01600091509150505481565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba9061461d565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610712919061466c565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161073f906146d1565b60006040518083038185875af1925050503d806000811461077c576040519150601f19603f3d011682016040523d82523d6000602084013e610781565b606091505b50509050806107c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc90614732565b60405180910390fd5b60001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084f90614836565b60405180910390fd5b7f109ee141209f6239a23d90572cc3e0474bd55208d82e0b5ad378d8ee7d9223ea3383604051610889929190614856565b60405180910390a15050565b60006108eb6010600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16601461206e565b90506000819050600081846040516020016109079291906148b0565b6040516020818303038152906040529050806011908051906020019061092e929190613ced565b505050505050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000806305f5e100735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff1663828f74b1876040518263ffffffff1660e01b8152600401610a059190614121565b602060405180830381865afa158015610a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4691906148e9565b610a509190614916565b90506000610a5c6118f5565b905060008282610a6c919061499f565b670de0b6b3a7640000610a7f919061499f565b905060006064610e1083610a93919061499f565b610a9d919061499f565b905060008787610aad919061466c565b90507fcf373849aa984dfd76504d4f7b03864086718e62d57440024002847b16783a81898383610add9190614916565b604051610aeb9291906149d0565b60405180910390a18181610aff9190614916565b955050505050509392505050565b60106020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000600d60008681526020019081526020016000208481548110610b6a57610b696149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d60008781526020019081526020016000208581548110610bc157610bc06149f9565b5b906000526020600020906003020160010154600d60008881526020019081526020016000208681548110610bf857610bf76149f9565b5b9060005260206000209060030201600201549250925092509250925092565b600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166378a895676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9c91906148e9565b90506000600190505b8181116118645760005b600d6000838152602001908152602001600020805490508110156118505742600d60008481526020019081526020016000208281548110610cf357610cf26149f9565b5b90600052602060002090600302016001015410156116565773dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663c55fd06b836040518263ffffffff1660e01b8152600401610d589190614121565b602060405180830381865afa158015610d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d999190614a3d565b73ffffffffffffffffffffffffffffffffffffffff1673dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b8152600401610dfc9190614121565b6020604051808303816000875af1158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f9190614a3d565b73ffffffffffffffffffffffffffffffffffffffff161461145857610e63826122aa565b600d600083815260200190815260200160002080549050600182610e879190614a6a565b116112b3576000600d6000848152602001908152602001600020600183610eae9190614a6a565b81548110610ebf57610ebe6149f9565b5b90600052602060002090600302016001015442610edc9190614ac0565b905061012c81111561108c5773dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b8152600401610f659190614121565b6020604051808303816000875af1158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa89190614a3d565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663c55fd06b876040518263ffffffff1660e01b8152600401610ff59190614121565b602060405180830381865afa158015611012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110369190614a3d565b866040518463ffffffff1660e01b815260040161105593929190614af1565b600060405180830381600087803b15801561106f57600080fd5b505af1158015611083573d6000803e3d6000fd5b505050506112ad565b6000600d60008581526020019081526020016000206001846110ae9190614a6a565b815481106110bf576110be6149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600d60008681526020019081526020016000206001856111159190614a6a565b81548110611126576111256149f9565b5b90600052602060002090600302016001015490506000600d600087815260200190815260200160002060018661115c9190614a6a565b8154811061116d5761116c6149f9565b5b906000526020600020906003020160020154905061118d86848484612586565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e896040518263ffffffff1660e01b815260040161120a9190614121565b6020604051808303816000875af1158015611229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d9190614a3d565b85896040518463ffffffff1660e01b815260040161126d93929190614af1565b600060405180830381600087803b15801561128757600080fd5b505af115801561129b573d6000803e3d6000fd5b505050506112a98686612664565b5050505b50611453565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016113309190614121565b6020604051808303816000875af115801561134f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113739190614a3d565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663c55fd06b866040518263ffffffff1660e01b81526004016113c09190614121565b602060405180830381865afa1580156113dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114019190614a3d565b856040518463ffffffff1660e01b815260040161142093929190614af1565b600060405180830381600087803b15801561143a57600080fd5b505af115801561144e573d6000803e3d6000fd5b505050505b611655565b6000600d6000848152602001908152602001600020828154811061147f5761147e6149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600d600085815260200190815260200160002083815481106114da576114d96149f9565b5b90600052602060002090600302016001015490506000600d60008681526020019081526020016000208481548110611515576115146149f9565b5b906000526020600020906003020160020154905061153585848484612586565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e886040518263ffffffff1660e01b81526004016115b29190614121565b6020604051808303816000875af11580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190614a3d565b85886040518463ffffffff1660e01b815260040161161593929190614af1565b600060405180830381600087803b15801561162f57600080fd5b505af1158015611643573d6000803e3d6000fd5b505050506116518585612664565b5050505b5b600d6000838152602001908152602001600020818154811061167b5761167a6149f9565b5b90600052602060002090600302016002015442111561183d5761169d826122aa565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161171a9190614121565b6020604051808303816000875af1158015611739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175d9190614a3d565b73dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663c55fd06b866040518263ffffffff1660e01b81526004016117aa9190614121565b602060405180830381865afa1580156117c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117eb9190614a3d565b856040518463ffffffff1660e01b815260040161180a93929190614af1565b600060405180830381600087803b15801561182457600080fd5b505af1158015611838573d6000803e3d6000fd5b505050505b808061184890614b28565b915050610caf565b50808061185c90614b28565b915050610ca5565b5050565b600d602052816000526040600020818154811061188457600080fd5b9060005260206000209060030201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119899190614bdf565b5050509150508091505090565b600060178560ff1611156119df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d690614ccc565b60405180910390fd5b603b8460ff161115611a26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1d90614d5e565b60405180910390fd5b60178360ff161115611a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6490614df0565b60405180910390fd5b603b8260ff161115611ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aab90614e82565b60405180910390fd5b662386f26fc10000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611b3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3490614eee565b60405180910390fd5b600080611b49886128b4565b915091506000611b62611b5c8989612a1e565b8a612a53565b90506000611b79611b738888612a1e565b8b612a53565b9050611b83613d73565b6000600d60008d815260200190815260200160002080549050905060006001821115611bb957600182611bb6919061466c565b90505b6000821415611cb85733836000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508483602001818152505083836040018181525050600d60008e815260200190815260200160002083908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506001975050505050505050611f01565b6001821415611e8c57600d60008e81526020019081526020016000208181548110611ce657611ce56149f9565b5b906000526020600020906003020160020154851115611d1c57611d0b8d338787612b6a565b506001975050505050505050611f01565b84600d60008f8152602001908152602001600020600081548110611d4357611d426149f9565b5b9060005260206000209060030201600201541015611e515733836000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508483602001818152505083836040018181525050600d60008e815260200190815260200160002083908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506001975050505050505050611f01565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8390614f80565b60405180910390fd5b600d60008e81526020019081526020016000208181548110611eb157611eb06149f9565b5b906000526020600020906003020160020154851115611ee757611ed68d338787612b6a565b506001975050505050505050611f01565b611ef48d33878786612c67565b5060019750505050505050505b95945050505050565b600f6020528060005260406000206000915090505481565b600e6020528160005260406000208181548110611f3e57600080fd5b9060005260206000209060030201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b600c8181548110611f9957600080fd5b906000526020600020016000915090505481565b34600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ffc9190614a6a565b925050819055507f7c4b3a8770ca0dfa675823896daf246993d41e6c18b0e130407888511d56f53a3334604051612034929190614856565b60405180910390a1565b600a6020528060005260406000206000915090505481565b60066020528060005260406000206000915090505481565b6060600060028360026120819190614916565b61208b9190614a6a565b67ffffffffffffffff8111156120a4576120a3614173565b5b6040519080825280601f01601f1916602001820160405280156120d65781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061210e5761210d6149f9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612172576121716149f9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026121b29190614916565b6121bc9190614a6a565b90505b600181111561225c577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106121fe576121fd6149f9565b5b1a60f81b828281518110612215576122146149f9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061225590614fa0565b90506121bf565b50600084146122a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229790615016565b60405180910390fd5b8091505092915050565b600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016122f99190614121565b6020604051808303816000875af1158015612318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233c9190614a3d565b9050600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663c55fd06b846040518263ffffffff1660e01b815260040161238d9190614121565b602060405180830381865afa1580156123aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ce9190614a3d565b9050735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16633ee036878460006040518363ffffffff1660e01b8152600401612420929190615036565b600060405180830381600087803b15801561243a57600080fd5b505af115801561244e573d6000803e3d6000fd5b5050505061245d826000612ea2565b600a600084815260200190815260200160002054600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124bf919061466c565b92505081905550600a600084815260200190815260200160002054600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125289190614a6a565b92505081905550816010600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16633ee036878560016040518363ffffffff1660e01b81526004016125d6929190615036565b600060405180830381600087803b1580156125f057600080fd5b505af1158015612604573d6000803e3d6000fd5b50505050612613836001612ea2565b61261e8483836109b0565b600a600086815260200190815260200160002081905550600c84908060018154018082558091505060019003906000526020600020016000909190919091505550505050565b600e600083815260200190815260200160002060006126839190613daa565b61268b613d73565b600082905060018161269d9190614a6a565b90505b600d60008581526020019081526020016000208054905081101561287957600d600085815260200190815260200160002081815481106126e3576126e26149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d60008581526020019081526020016000208181548110612771576127706149f9565b5b906000526020600020906003020160010154826020018181525050600d600085815260200190815260200160002081815481106127b1576127b06149f9565b5b906000526020600020906003020160020154826040018181525050600e600085815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050808061287190614b28565b9150506126a0565b600e6000858152602001908152602001600020600d60008681526020019081526020016000209080546128ad929190613dce565b5050505050565b600080600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff1663ccc5ffe9866040518263ffffffff1660e01b81526004016129079190614121565b6040805180830381865afa158015612923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129479190615074565b91509150600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16631a1089c2886040518263ffffffff1660e01b815260040161299b9190614121565b6040805180830381865afa1580156129b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129db9190615074565b9150915060006129f46129ee8686612a1e565b89612a53565b90506000612a0b612a058585612a1e565b8a612a53565b9050818197509750505050505050915091565b6000612a28612efd565b612a4b60008001546000600101546000600201548660ff168660ff166000612f50565b905092915050565b600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16635fe20047846040518263ffffffff1660e01b8152600401612aa39190614121565b6040805180830381865afa158015612abf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae3919061516a565b90506000610e1082600160028110612afe57612afd6149f9565b5b602002015160ff16612b1091906151a5565b61ffff1690506000600183600060028110612b2e57612b2d6149f9565b5b602002015160ff161415612b4f578186612b48919061466c565b9050612b5e565b8186612b5b9190614a6a565b90505b80935050505092915050565b6000612b74613d73565b84816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505082816040018181525050600d600087815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506001915050949350505050565b600080600090505b82811015612e935760008190508080612c8790614b28565b915050600d60008981526020019081526020016000208281548110612caf57612cae6149f9565b5b906000526020600020906003020160020154861115612e455783811115612dc557612cd8613d73565b87816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508681602001818152505085816040018181525050600d60008a815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550505050612e93565b600d60008981526020019081526020016000208181548110612dea57612de96149f9565b5b906000526020600020906003020160010154851015612e3f576000821415612e2557612e198888888888612fb1565b50600192505050612e99565b612e33888888888887613479565b50600192505050612e99565b50612e80565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e779061522d565b60405180910390fd5b8080612e8b90614b28565b915050612c6f565b60019150505b95945050505050565b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b612f0642613968565b6000800160008060010160008060020160008060030160008060040160008060050160008c919050558b919050558a91905055899190505588919050558791905055505050505050565b600081603c84612f609190614916565b610e1086612f6e9190614916565b62015180612f7d8b8b8b6139ef565b612f879190614916565b612f919190614a6a565b612f9b9190614a6a565b612fa59190614a6a565b90509695505050505050565b6000600e60008781526020019081526020016000206000612fd29190613daa565b612fda613d73565b600d600088815260200190815260200160002060008154811061300057612fff6149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d600088815260200190815260200160002060008154811061308f5761308e6149f9565b5b906000526020600020906003020160010154816020018181525050600d60008881526020019081526020016000206000815481106130d0576130cf6149f9565b5b906000526020600020906003020160020154816040018181525050600e600088815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505085816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508481602001818152505083816040018181525050600e600088815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506000600190505b8381101561343557600d6000898152602001908152602001600020818154811061329f5761329e6149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d6000898152602001908152602001600020818154811061332d5761332c6149f9565b5b906000526020600020906003020160010154826020018181525050600d6000898152602001908152602001600020818154811061336d5761336c6149f9565b5b906000526020600020906003020160020154826040018181525050600e600089815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050808061342d90614b28565b915050613272565b50600e6000888152602001908152602001600020600d600089815260200190815260200160002090805461346a929190613dce565b50600191505095945050505050565b6000600e6000888152602001908152602001600020600061349a9190613daa565b6134a2613d73565b60005b83811161366757600d60008a815260200190815260200160002081815481106134d1576134d06149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d60008a8152602001908152602001600020818154811061355f5761355e6149f9565b5b906000526020600020906003020160010154826020018181525050600d60008a8152602001908152602001600020818154811061359f5761359e6149f9565b5b906000526020600020906003020160020154826040018181525050600e60008a815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050808061365f90614b28565b9150506134a5565b5086816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508581602001818152505084816040018181525050600e600089815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050600060018461375d9190614a6a565b90505b8481101561392357600d60008a8152602001908152602001600020818154811061378d5761378c6149f9565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d60008a8152602001908152602001600020818154811061381b5761381a6149f9565b5b906000526020600020906003020160010154826020018181525050600d60008a8152602001908152602001600020818154811061385b5761385a6149f9565b5b906000526020600020906003020160020154826040018181525050600e60008a815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050808061391b90614b28565b915050613760565b600e60008a8152602001908152602001600020600d60008b8152602001908152602001600020908054613957929190613dce565b506001925050509695505050505050565b6000806000806000806139886201518088613983919061499f565b613b4e565b809650819750829850505050600062015180886139a59190614ac0565b9050610e10816139b5919061499f565b9350610e10816139c59190614ac0565b9050603c816139d4919061499f565b9250603c816139e39190614ac0565b91505091939550919395565b60006107b2841015613a0057600080fd5b600084905060008490506000849050600062253d8c60046064600c600e87613a28919061524d565b613a3291906152e1565b61132488613a40919061534b565b613a4a919061534b565b613a5491906152e1565b6003613a6091906153df565b613a6a91906152e1565b600c80600c600e88613a7c919061524d565b613a8691906152e1565b613a9091906153df565b600287613a9d919061524d565b613aa7919061524d565b61016f613ab491906153df565b613abe91906152e1565b6004600c600e88613acf919061524d565b613ad991906152e1565b6112c089613ae7919061534b565b613af1919061534b565b6105b5613afe91906153df565b613b0891906152e1565b617d4b86613b16919061524d565b613b20919061534b565b613b2a919061534b565b613b34919061524d565b613b3e919061524d565b9050809450505050509392505050565b600080600080849050600062253d8c62010bd983613b6c919061534b565b613b76919061534b565b9050600062023ab1826004613b8b91906153df565b613b9591906152e1565b9050600460038262023ab1613baa91906153df565b613bb4919061534b565b613bbe91906152e1565b82613bc9919061524d565b9150600062164b09600184613bde919061534b565b610fa0613beb91906153df565b613bf591906152e1565b9050601f6004826105b5613c0991906153df565b613c1391906152e1565b84613c1e919061524d565b613c28919061534b565b9250600061098f846050613c3c91906153df565b613c4691906152e1565b9050600060508261098f613c5a91906153df565b613c6491906152e1565b85613c6f919061524d565b9050600b82613c7e91906152e1565b945084600c613c8d91906153df565b600283613c9a919061534b565b613ca4919061524d565b91508483603186613cb5919061524d565b6064613cc191906153df565b613ccb919061534b565b613cd5919061534b565b92508298508197508096505050505050509193909250565b828054613cf99061458e565b90600052602060002090601f016020900481019282613d1b5760008555613d62565b82601f10613d3457805160ff1916838001178555613d62565b82800160010185558215613d62579182015b82811115613d61578251825591602001919060010190613d46565b5b509050613d6f9190613ea1565b5090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b5080546000825560030290600052602060002090810190613dcb9190613ebe565b50565b828054828255906000526020600020906003028101928215613e905760005260206000209160030282015b82811115613e8f5782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820154816001015560028201548160020155505091600301919060030190613df9565b5b509050613e9d9190613ebe565b5090565b5b80821115613eba576000816000905550600101613ea2565b5090565b5b80821115613f0857600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905550600301613ebf565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613f4b82613f20565b9050919050565b613f5b81613f40565b8114613f6657600080fd5b50565b600081359050613f7881613f52565b92915050565b600060208284031215613f9457613f93613f16565b5b6000613fa284828501613f69565b91505092915050565b60008115159050919050565b613fc081613fab565b82525050565b6000602082019050613fdb6000830184613fb7565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561401b578082015181840152602081019050614000565b8381111561402a576000848401525b50505050565b6000601f19601f8301169050919050565b600061404c82613fe1565b6140568185613fec565b9350614066818560208601613ffd565b61406f81614030565b840191505092915050565b600060208201905081810360008301526140948184614041565b905092915050565b6000819050919050565b6140af8161409c565b81146140ba57600080fd5b50565b6000813590506140cc816140a6565b92915050565b600080604083850312156140e9576140e8613f16565b5b60006140f7858286016140bd565b9250506020614108858286016140bd565b9150509250929050565b61411b8161409c565b82525050565b60006020820190506141366000830184614112565b92915050565b60006020828403121561415257614151613f16565b5b6000614160848285016140bd565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6141ab82614030565b810181811067ffffffffffffffff821117156141ca576141c9614173565b5b80604052505050565b60006141dd613f0c565b90506141e982826141a2565b919050565b600067ffffffffffffffff82111561420957614208614173565b5b61421282614030565b9050602081019050919050565b82818337600083830152505050565b600061424161423c846141ee565b6141d3565b90508281526020810184848401111561425d5761425c61416e565b5b61426884828561421f565b509392505050565b600082601f83011261428557614284614169565b5b813561429584826020860161422e565b91505092915050565b600080604083850312156142b5576142b4613f16565b5b60006142c3858286016140bd565b925050602083013567ffffffffffffffff8111156142e4576142e3613f1b565b5b6142f085828601614270565b9150509250929050565b61430381613f40565b82525050565b600060208201905061431e60008301846142fa565b92915050565b6000819050919050565b61433781614324565b811461434257600080fd5b50565b6000813590506143548161432e565b92915050565b6000602082840312156143705761436f613f16565b5b600061437e84828501614345565b91505092915050565b6000806000606084860312156143a05761439f613f16565b5b60006143ae868287016140bd565b93505060206143bf868287016140bd565b92505060406143d0868287016140bd565b9150509250925092565b60006060820190506143ef60008301866142fa565b6143fc6020830185614112565b6144096040830184614112565b949350505050565b600061441c82613f20565b9050919050565b61442c81614411565b82525050565b60006020820190506144476000830184614423565b92915050565b6000819050919050565b6144608161444d565b82525050565b600060208201905061447b6000830184614457565b92915050565b600060ff82169050919050565b61449781614481565b81146144a257600080fd5b50565b6000813590506144b48161448e565b92915050565b600080600080600060a086880312156144d6576144d5613f16565b5b60006144e4888289016140bd565b95505060206144f5888289016144a5565b9450506040614506888289016144a5565b9350506060614517888289016144a5565b9250506080614528888289016144a5565b9150509295509295909350565b61453e81614324565b82525050565b60006020820190506145596000830184614535565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806145a657607f821691505b602082108114156145ba576145b961455f565b5b50919050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820455448206465706f73697465640000000000000000600082015250565b60006146076018836145c0565b9150614612826145d1565b602082019050919050565b60006020820190508181036000830152614636816145fa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006146778261409c565b91506146828361409c565b9250828210156146955761469461463d565b5b828203905092915050565b600081905092915050565b50565b60006146bb6000836146a0565b91506146c6826146ab565b600082019050919050565b60006146dc826146ae565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b600061471c6014836145c0565b9150614727826146e6565b602082019050919050565b6000602082019050818103600083015261474b8161470f565b9050919050565b7f596f752063616e6e6f7420776974686472617720455448207768696c6520706160008201527f726b696e672073657373696f6e20696e2070726f67726573732e20506c65617360208201527f65207761697420756e74696c207468652073657373696f6e20697320636f6d7060408201527f6c657465642c206f7220656e64207468652073657373696f6e206d616e75616c60608201527f6c79210000000000000000000000000000000000000000000000000000000000608082015250565b60006148206083836145c0565b915061482b82614752565b60a082019050919050565b6000602082019050818103600083015261484f81614813565b9050919050565b600060408201905061486b60008301856142fa565b6148786020830184614112565b9392505050565b600061488a82613fe1565b61489481856146a0565b93506148a4818560208601613ffd565b80840191505092915050565b60006148bc828561487f565b91506148c8828461487f565b91508190509392505050565b6000815190506148e3816140a6565b92915050565b6000602082840312156148ff576148fe613f16565b5b600061490d848285016148d4565b91505092915050565b60006149218261409c565b915061492c8361409c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156149655761496461463d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006149aa8261409c565b91506149b58361409c565b9250826149c5576149c4614970565b5b828204905092915050565b60006040820190506149e56000830185614112565b6149f26020830184614112565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050614a3781613f52565b92915050565b600060208284031215614a5357614a52613f16565b5b6000614a6184828501614a28565b91505092915050565b6000614a758261409c565b9150614a808361409c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614ab557614ab461463d565b5b828201905092915050565b6000614acb8261409c565b9150614ad68361409c565b925082614ae657614ae5614970565b5b828206905092915050565b6000606082019050614b0660008301866142fa565b614b1360208301856142fa565b614b206040830184614112565b949350505050565b6000614b338261409c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b6657614b6561463d565b5b600182019050919050565b600069ffffffffffffffffffff82169050919050565b614b9081614b71565b8114614b9b57600080fd5b50565b600081519050614bad81614b87565b92915050565b614bbc8161444d565b8114614bc757600080fd5b50565b600081519050614bd981614bb3565b92915050565b600080600080600060a08688031215614bfb57614bfa613f16565b5b6000614c0988828901614b9e565b9550506020614c1a88828901614bca565b9450506040614c2b888289016148d4565b9350506060614c3c888289016148d4565b9250506080614c4d88828901614b9e565b9150509295509295909350565b7f537461727420686f7572206d757374206265206265747765656e203020616e6460008201527f2032330000000000000000000000000000000000000000000000000000000000602082015250565b6000614cb66023836145c0565b9150614cc182614c5a565b604082019050919050565b60006020820190508181036000830152614ce581614ca9565b9050919050565b7f5374617274206d696e757465206d757374206265206265747765656e2030206160008201527f6e64203539000000000000000000000000000000000000000000000000000000602082015250565b6000614d486025836145c0565b9150614d5382614cec565b604082019050919050565b60006020820190508181036000830152614d7781614d3b565b9050919050565b7f456e6420686f7572206d757374206265206265747765656e203020616e64203260008201527f3300000000000000000000000000000000000000000000000000000000000000602082015250565b6000614dda6021836145c0565b9150614de582614d7e565b604082019050919050565b60006020820190508181036000830152614e0981614dcd565b9050919050565b7f456e64206d696e757465206d757374206265206265747765656e203020616e6460008201527f2035390000000000000000000000000000000000000000000000000000000000602082015250565b6000614e6c6023836145c0565b9150614e7782614e10565b604082019050919050565b60006020820190508181036000830152614e9b81614e5f565b9050919050565b7f4d757374206465706f736974206174206c6561737420302e3031204574680000600082015250565b6000614ed8601e836145c0565b9150614ee382614ea2565b602082019050919050565b60006020820190508181036000830152614f0781614ecb565b9050919050565b7f54696d6520536c6f7420756e617661696c61626c652c20706c6561736520747260008201527f7920616761696e00000000000000000000000000000000000000000000000000602082015250565b6000614f6a6027836145c0565b9150614f7582614f0e565b604082019050919050565b60006020820190508181036000830152614f9981614f5d565b9050919050565b6000614fab8261409c565b91506000821415614fbf57614fbe61463d565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006150006020836145c0565b915061500b82614fca565b602082019050919050565b6000602082019050818103600083015261502f81614ff3565b9050919050565b600060408201905061504b6000830185614112565b6150586020830184613fb7565b9392505050565b60008151905061506e8161448e565b92915050565b6000806040838503121561508b5761508a613f16565b5b60006150998582860161505f565b92505060206150aa8582860161505f565b9150509250929050565b600067ffffffffffffffff8211156150cf576150ce614173565b5b602082029050919050565b600080fd5b60006150f26150ed846150b4565b6141d3565b9050806020840283018581111561510c5761510b6150da565b5b835b818110156151355780615121888261505f565b84526020840193505060208101905061510e565b5050509392505050565b600082601f83011261515457615153614169565b5b60026151618482856150df565b91505092915050565b6000604082840312156151805761517f613f16565b5b600061518e8482850161513f565b91505092915050565b600061ffff82169050919050565b60006151b082615197565b91506151bb83615197565b92508161ffff04831182151516156151d6576151d561463d565b5b828202905092915050565b7f496e76616c6964207061726b696e672074696d6520736c6f7400000000000000600082015250565b60006152176019836145c0565b9150615222826151e1565b602082019050919050565b600060208201905081810360008301526152468161520a565b9050919050565b60006152588261444d565b91506152638361444d565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561529e5761529d61463d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156152d6576152d561463d565b5b828203905092915050565b60006152ec8261444d565b91506152f78361444d565b92508261530757615306614970565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156153405761533f61463d565b5b828205905092915050565b60006153568261444d565b91506153618361444d565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561539c5761539b61463d565b5b817f80000000000000000000000000000000000000000000000000000000000000000383126000831216156153d4576153d361463d565b5b828201905092915050565b60006153ea8261444d565b91506153f58361444d565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156154345761543361463d565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156154715761547061463d565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156154ae576154ad61463d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156154eb576154ea61463d565b5b82820290509291505056fea2646970667358221220404e37694022882c489d91cdae066d1fd1d47ca9e305f8c220199d93a8ff3cce64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2722,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "current",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(DateTime)2704_storage"
      },
      {
        "astId": 2726,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "depositors",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2730,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "currentParkingSpotOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2736,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "requestedParkingTimes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 2740,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "sessionInProgress",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2744,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "sessionCost",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2749,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "availableSlots",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(TimeSlots)2711_storage)"
      },
      {
        "astId": 2752,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "activeSessions",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2758,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "reservedParkingTimes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_array(t_struct(TimeSlots)2711_storage)dyn_storage)"
      },
      {
        "astId": 2764,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "tempReservedParkingTimes",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_struct(TimeSlots)2711_storage)dyn_storage)"
      },
      {
        "astId": 2768,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "hashedVehicleRegistration",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 2772,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "spotLastUsedBy",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2774,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "testHashPayload",
        "offset": 0,
        "slot": "17",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2777,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "ethUSDpriceFeed",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 2791,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "owner",
        "offset": 0,
        "slot": "19",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TimeSlots)2711_storage)dyn_storage": {
        "base": "t_struct(TimeSlots)2711_storage",
        "encoding": "dynamic_array",
        "label": "struct RequestParkingSpotToken.TimeSlots[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(TimeSlots)2711_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RequestParkingSpotToken.TimeSlots[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TimeSlots)2711_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_uint256,t_struct(TimeSlots)2711_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RequestParkingSpotToken.TimeSlots)",
        "numberOfBytes": "32",
        "value": "t_struct(TimeSlots)2711_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DateTime)2704_storage": {
        "encoding": "inplace",
        "label": "struct RequestParkingSpotToken.DateTime",
        "members": [
          {
            "astId": 2693,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Year",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2695,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Month",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2697,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Day",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2699,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Hour",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2701,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Minute",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2703,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Second",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(TimeSlots)2711_storage": {
        "encoding": "inplace",
        "label": "struct RequestParkingSpotToken.TimeSlots",
        "members": [
          {
            "astId": 2706,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "walletAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2708,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2710,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
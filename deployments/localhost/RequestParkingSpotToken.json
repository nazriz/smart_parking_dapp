{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "requestParkingSpotToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeRn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x65ccbf465043f11cff6ec178c2971b1d29b4c4fdc86953d935f7b1e82ae79658",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "1279902",
    "logsBloom": "0x
    "blockHash": "0xc4ad73ed0c01f92b21715f52b830a17594bb65f45dcd8200b8bf32582f8e1cd5",
    "transactionHash": "0x65ccbf465043f11cff6ec178c2971b1d29b4c4fdc86953d935f7b1e82ae79658",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "1279902",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5d24cf9f1d74bb91400be96ce0b2ea72",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"requestParkingSpotToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeRn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequestParkingSpotToken.sol\":\"RequestParkingSpotToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BokkyPooBahsDateTimeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.00 - Contract Instance\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\\n//\\n// GNU Lesser General Public License 3.0\\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\\n// ----------------------------------------------------------------------------\\n\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\ncontract BokkyPooBahsDateTimeContract {\\n    uint public constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint public constant SECONDS_PER_HOUR = 60 * 60;\\n    uint public constant SECONDS_PER_MINUTE = 60;\\n    int public constant OFFSET19700101 = 2440588;\\n\\n    uint public constant DOW_MON = 1;\\n    uint public constant DOW_TUE = 2;\\n    uint public constant DOW_WED = 3;\\n    uint public constant DOW_THU = 4;\\n    uint public constant DOW_FRI = 5;\\n    uint public constant DOW_SAT = 6;\\n    uint public constant DOW_SUN = 7;\\n\\n    function _now() public view returns (uint timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function _nowDateTime() public view returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n    function _daysFromDate(uint year, uint month, uint day) public pure returns (uint _days) {\\n        return BokkyPooBahsDateTimeLibrary._daysFromDate(year, month, day);\\n    }\\n    function _daysToDate(uint _days) public pure returns (uint year, uint month, uint day) {\\n        return BokkyPooBahsDateTimeLibrary._daysToDate(_days);\\n    }\\n    function timestampFromDate(uint year, uint month, uint day) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, day);\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(year, month, day, hour, minute, second);\\n    }\\n    function timestampToDate(uint timestamp) public pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n    }\\n    function timestampToDateTime(uint timestamp) public pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(timestamp);\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDate(year, month, day);\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDateTime(year, month, day, hour, minute, second);\\n    }\\n    function isLeapYear(uint timestamp) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary.isLeapYear(timestamp);\\n    }\\n    function _isLeapYear(uint year) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary._isLeapYear(year);\\n    }\\n    function isWeekDay(uint timestamp) public pure returns (bool weekDay) {\\n        weekDay = BokkyPooBahsDateTimeLibrary.isWeekDay(timestamp);\\n    }\\n    function isWeekEnd(uint timestamp) public pure returns (bool weekEnd) {\\n        weekEnd = BokkyPooBahsDateTimeLibrary.isWeekEnd(timestamp);\\n    }\\n\\n    function getDaysInMonth(uint timestamp) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary.getDaysInMonth(timestamp);\\n    }\\n    function _getDaysInMonth(uint year, uint month) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\\n    }\\n    function getDayOfWeek(uint timestamp) public pure returns (uint dayOfWeek) {\\n        dayOfWeek = BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp);\\n    }\\n\\n    function getYear(uint timestamp) public pure returns (uint year) {\\n        year = BokkyPooBahsDateTimeLibrary.getYear(timestamp);\\n    }\\n    function getMonth(uint timestamp) public pure returns (uint month) {\\n        month = BokkyPooBahsDateTimeLibrary.getMonth(timestamp);\\n    }\\n    function getDay(uint timestamp) public pure returns (uint day) {\\n        day = BokkyPooBahsDateTimeLibrary.getDay(timestamp);\\n    }\\n    function getHour(uint timestamp) public pure returns (uint hour) {\\n        hour = BokkyPooBahsDateTimeLibrary.getHour(timestamp);\\n    }\\n    function getMinute(uint timestamp) public pure returns (uint minute) {\\n        minute = BokkyPooBahsDateTimeLibrary.getMinute(timestamp);\\n    }\\n    function getSecond(uint timestamp) public pure returns (uint second) {\\n        second = BokkyPooBahsDateTimeLibrary.getSecond(timestamp);\\n    }\\n\\n    function addYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addYears(timestamp, _years);\\n    }\\n    function addMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMonths(timestamp, _months);\\n    }\\n    function addDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, _days);\\n    }\\n    function addHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addHours(timestamp, _hours);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMinutes(timestamp, _minutes);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addSeconds(timestamp, _seconds);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subYears(timestamp, _years);\\n    }\\n    function subMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMonths(timestamp, _months);\\n    }\\n    function subDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subDays(timestamp, _days);\\n    }\\n    function subHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subHours(timestamp, _hours);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMinutes(timestamp, _minutes);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subSeconds(timestamp, _seconds);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) public pure returns (uint _years) {\\n        _years = BokkyPooBahsDateTimeLibrary.diffYears(fromTimestamp, toTimestamp);\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) public pure returns (uint _months) {\\n        _months = BokkyPooBahsDateTimeLibrary.diffMonths(fromTimestamp, toTimestamp);\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) public pure returns (uint _days) {\\n        _days = BokkyPooBahsDateTimeLibrary.diffDays(fromTimestamp, toTimestamp);\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) public pure returns (uint _hours) {\\n        _hours = BokkyPooBahsDateTimeLibrary.diffHours(fromTimestamp, toTimestamp);\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) public pure returns (uint _minutes) {\\n        _minutes = BokkyPooBahsDateTimeLibrary.diffMinutes(fromTimestamp, toTimestamp);\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) public pure returns (uint _seconds) {\\n        _seconds = BokkyPooBahsDateTimeLibrary.diffSeconds(fromTimestamp, toTimestamp);\\n    }\\n}\",\"keccak256\":\"0xe9913c812a72dc0d88521026abc5a107b82028b536cb12b5c0a20ddcfbe766ca\",\"license\":\"MIT\"},\"contracts/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x6a972bde66695cafc06e4f6beabef5f5a9386196a62f611d5be2d2e5a3a4967f\",\"license\":\"MIT\"},\"contracts/RequestParkingSpotToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./BokkyPooBahsDateTimeContract.sol\\\";\\n\\ninterface ParkingSpotAttributes {\\n    function checkSpotAvailability(uint) external view returns (bool);\\n    function checkSpotPermittedParkingStartTime(uint ) external view returns (uint8, uint8);\\n    function checkSpotPermittedParkingEndTime(uint ) external view returns (uint8, uint8);\\n\\n\\n}\\n\\ninterface ParkingSpotToken {\\n    function ownerOf(uint256) external returns (address);\\n    function safeTransferFrom(address,address,uint256) external;\\n\\n}\\n\\ncontract RequestParkingSpotToken {\\nusing BokkyPooBahsDateTimeLibrary for *;\\n\\n    uint zero;\\n    uint public timeRn;\\n\\n\\n    mapping(address=>uint256) public depositors;\\n\\n    ParkingSpotAttributes constant psa = ParkingSpotAttributes(0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9);\\n    ParkingSpotToken constant pst = ParkingSpotToken(0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9);\\n\\n\\n    // Payable address can receive Ether\\n    address payable public owner;\\n\\n    // Payable constructor can receive Ether\\n    constructor() payable {\\n        owner = payable(msg.sender);\\n    }\\n\\n    function deposit() public payable {\\n        depositors[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw(uint256 _amount) public {\\n        require(_amount <= depositors[msg.sender], \\\"Not enough ETH deposited\\\");\\n        depositors[msg.sender] -= _amount;\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n\\n    }\\n\\n    function checkAndConvertAvailabilityTime(uint _tokenId) internal returns (uint256, uint256) {\\n        uint256 currentTimeUnix = block.timestamp;\\n        (uint currentYear, uint currentMonth, uint currentDay, uint currentHour, \\n        uint currentMinute, uint currentSecond ) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(currentTimeUnix);\\n        (uint8 permittedStartHour, uint8 permittedStartMinute) = psa.checkSpotPermittedParkingStartTime(_tokenId);\\n        (uint8 permittedEndHour, uint8 permittedEndMinute) = psa.checkSpotPermittedParkingEndTime(_tokenId);\\n\\n        uint permittedStartTimeUnix = BokkyPooBahsDateTimeLibrary.timestampFromDateTime(currentYear, currentMonth, currentDay, permittedStartHour, permittedStartMinute, zero);\\n        uint permittedEndTimeUnix = BokkyPooBahsDateTimeLibrary.timestampFromDateTime(currentYear, currentMonth, currentDay, permittedEndHour, permittedEndMinute, zero);\\n\\n        return (permittedStartTimeUnix, permittedEndTimeUnix);\\n\\n\\n    }\\n\\n    function getTime() public {\\n\\n        timeRn = block.timestamp; \\n    }\\n\\n    function requestParkingSpotToken(uint256 _tokenId) public {\\n        (uint parkingSpotStartTime, uint parkingSpotEndTime) = checkAndConvertAvailabilityTime(_tokenId);\\n        uint256 currentTimeUnix = block.timestamp;\\n\\n        require(depositors[msg.sender] >= 1000000000000000000, \\\"Must deposit at least 1 Eth\\\");\\n        require(psa.checkSpotAvailability(_tokenId) == true, \\\"Parking spot is unavailable!\\\");\\n        require(block.timestamp < parkingSpotStartTime , \\\"Parking spot unavailable at this time!\\\");\\n\\n        // && block.timestamp < parkingSpotEndTime\\n\\n        address currentOwner;\\n        currentOwner = pst.ownerOf(_tokenId);\\n        pst.safeTransferFrom(currentOwner, msg.sender, _tokenId);\\n\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0x1aff42a7a9f6f70619a019f17495fde8bac6fdefcdab03b230d61425baa015b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405233600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506115e0806100546000396000f3fe6080604052600436106100705760003560e01c80638da5cb5b1161004e5780638da5cb5b146100de578063af04950e14610109578063d0e30db014610134578063eed75f6d1461013e57610070565b80632e1a7d4d14610075578063557ed1ba1461009e57806374c340b7146100b5575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610c36565b61017b565b005b3480156100aa57600080fd5b506100b3610303565b005b3480156100c157600080fd5b506100dc60048036038101906100d79190610c36565b61030c565b005b3480156100ea57600080fd5b506100f36105df565b6040516101009190610ca4565b60405180910390f35b34801561011557600080fd5b5061011e610605565b60405161012b9190610cce565b60405180910390f35b61013c61060b565b005b34801561014a57600080fd5b5061016560048036038101906101609190610d27565b610663565b6040516101729190610cce565b60405180910390f35b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156101fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f490610db1565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461024c9190610e00565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161027990610e65565b60006040518083038185875af1925050503d80600081146102b6576040519150601f19603f3d011682016040523d82523d6000602084013e6102bb565b606091505b50509050806102ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f690610ec6565b60405180910390fd5b5050565b42600181905550565b6000806103188361067b565b915091506000429050670de0b6b3a7640000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156103ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a290610f32565b60405180910390fd5b6001151573dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663e91926f1866040518263ffffffff1660e01b81526004016103fc9190610cce565b602060405180830381865afa158015610419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043d9190610f8a565b15151461047f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047690611003565b60405180910390fd5b8242106104c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b890611095565b60405180910390fd5b600073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b81526004016105109190610cce565b6020604051808303816000875af115801561052f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055391906110ca565b905073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff166342842e0e8233886040518463ffffffff1660e01b81526004016105a693929190611106565b600060405180830381600087803b1580156105c057600080fd5b505af11580156105d4573d6000803e3d6000fd5b505050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461065a919061113d565b92505081905550565b60026020528060005260406000206000915090505481565b600080600042905060008060008060008061069587610815565b95509550955095509550955060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663ccc5ffe98d6040518263ffffffff1660e01b81526004016106f19190610cce565b6040805180830381865afa15801561070d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073191906111cc565b9150915060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16631a1089c28f6040518263ffffffff1660e01b81526004016107859190610cce565b6040805180830381865afa1580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c591906111cc565b9150915060006107e18b8b8b8860ff168860ff1660005461089c565b905060006107fb8c8c8c8760ff168760ff1660005461089c565b905081819e509e5050505050505050505050505050915091565b6000806000806000806108356201518088610830919061123b565b6108fd565b80965081975082985050505060006201518088610852919061126c565b9050610e1081610862919061123b565b9350610e1081610872919061126c565b9050603c81610881919061123b565b9250603c81610890919061126c565b91505091939550919395565b600081603c846108ac919061129d565b610e10866108ba919061129d565b620151806108c98b8b8b610a9c565b6108d3919061129d565b6108dd919061113d565b6108e7919061113d565b6108f1919061113d565b90509695505050505050565b600080600080849050600062253d8c62010bd98361091b9190611301565b6109259190611301565b9050600062023ab182600461093a9190611395565b61094491906114ac565b9050600460038262023ab16109599190611395565b6109639190611301565b61096d91906114ac565b826109789190611516565b9150600062164b0960018461098d9190611301565b610fa061099a9190611395565b6109a491906114ac565b9050601f6004826105b56109b89190611395565b6109c291906114ac565b846109cd9190611516565b6109d79190611301565b9250600061098f8460506109eb9190611395565b6109f591906114ac565b9050600060508261098f610a099190611395565b610a1391906114ac565b85610a1e9190611516565b9050600b82610a2d91906114ac565b945084600c610a3c9190611395565b600283610a499190611301565b610a539190611516565b91508483603186610a649190611516565b6064610a709190611395565b610a7a9190611301565b610a849190611301565b92508298508197508096505050505050509193909250565b60006107b2841015610aad57600080fd5b600084905060008490506000849050600062253d8c60046064600c600e87610ad59190611516565b610adf91906114ac565b61132488610aed9190611301565b610af79190611301565b610b0191906114ac565b6003610b0d9190611395565b610b1791906114ac565b600c80600c600e88610b299190611516565b610b3391906114ac565b610b3d9190611395565b600287610b4a9190611516565b610b549190611516565b61016f610b619190611395565b610b6b91906114ac565b6004600c600e88610b7c9190611516565b610b8691906114ac565b6112c089610b949190611301565b610b9e9190611301565b6105b5610bab9190611395565b610bb591906114ac565b617d4b86610bc39190611516565b610bcd9190611301565b610bd79190611301565b610be19190611516565b610beb9190611516565b9050809450505050509392505050565b600080fd5b6000819050919050565b610c1381610c00565b8114610c1e57600080fd5b50565b600081359050610c3081610c0a565b92915050565b600060208284031215610c4c57610c4b610bfb565b5b6000610c5a84828501610c21565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c8e82610c63565b9050919050565b610c9e81610c83565b82525050565b6000602082019050610cb96000830184610c95565b92915050565b610cc881610c00565b82525050565b6000602082019050610ce36000830184610cbf565b92915050565b6000610cf482610c63565b9050919050565b610d0481610ce9565b8114610d0f57600080fd5b50565b600081359050610d2181610cfb565b92915050565b600060208284031215610d3d57610d3c610bfb565b5b6000610d4b84828501610d12565b91505092915050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820455448206465706f73697465640000000000000000600082015250565b6000610d9b601883610d54565b9150610da682610d65565b602082019050919050565b60006020820190508181036000830152610dca81610d8e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0b82610c00565b9150610e1683610c00565b925082821015610e2957610e28610dd1565b5b828203905092915050565b600081905092915050565b50565b6000610e4f600083610e34565b9150610e5a82610e3f565b600082019050919050565b6000610e7082610e42565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610eb0601483610d54565b9150610ebb82610e7a565b602082019050919050565b60006020820190508181036000830152610edf81610ea3565b9050919050565b7f4d757374206465706f736974206174206c656173742031204574680000000000600082015250565b6000610f1c601b83610d54565b9150610f2782610ee6565b602082019050919050565b60006020820190508181036000830152610f4b81610f0f565b9050919050565b60008115159050919050565b610f6781610f52565b8114610f7257600080fd5b50565b600081519050610f8481610f5e565b92915050565b600060208284031215610fa057610f9f610bfb565b5b6000610fae84828501610f75565b91505092915050565b7f5061726b696e672073706f7420697320756e617661696c61626c652100000000600082015250565b6000610fed601c83610d54565b9150610ff882610fb7565b602082019050919050565b6000602082019050818103600083015261101c81610fe0565b9050919050565b7f5061726b696e672073706f7420756e617661696c61626c65206174207468697360008201527f2074696d65210000000000000000000000000000000000000000000000000000602082015250565b600061107f602683610d54565b915061108a82611023565b604082019050919050565b600060208201905081810360008301526110ae81611072565b9050919050565b6000815190506110c481610cfb565b92915050565b6000602082840312156110e0576110df610bfb565b5b60006110ee848285016110b5565b91505092915050565b61110081610ce9565b82525050565b600060608201905061111b60008301866110f7565b61112860208301856110f7565b6111356040830184610cbf565b949350505050565b600061114882610c00565b915061115383610c00565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561118857611187610dd1565b5b828201905092915050565b600060ff82169050919050565b6111a981611193565b81146111b457600080fd5b50565b6000815190506111c6816111a0565b92915050565b600080604083850312156111e3576111e2610bfb565b5b60006111f1858286016111b7565b9250506020611202858286016111b7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061124682610c00565b915061125183610c00565b9250826112615761126061120c565b5b828204905092915050565b600061127782610c00565b915061128283610c00565b9250826112925761129161120c565b5b828206905092915050565b60006112a882610c00565b91506112b383610c00565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156112ec576112eb610dd1565b5b828202905092915050565b6000819050919050565b600061130c826112f7565b9150611317836112f7565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561135257611351610dd1565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561138a57611389610dd1565b5b828201905092915050565b60006113a0826112f7565b91506113ab836112f7565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156113ea576113e9610dd1565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561142757611426610dd1565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561146457611463610dd1565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156114a1576114a0610dd1565b5b828202905092915050565b60006114b7826112f7565b91506114c2836112f7565b9250826114d2576114d161120c565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561150b5761150a610dd1565b5b828205905092915050565b6000611521826112f7565b915061152c836112f7565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561156757611566610dd1565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561159f5761159e610dd1565b5b82820390509291505056fea264697066735822122092b8a91d8f926608328b0a47ba5a77a4641b9980d9dbb0264268a78ec620b10764736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80638da5cb5b1161004e5780638da5cb5b146100de578063af04950e14610109578063d0e30db014610134578063eed75f6d1461013e57610070565b80632e1a7d4d14610075578063557ed1ba1461009e57806374c340b7146100b5575b600080fd5b34801561008157600080fd5b5061009c60048036038101906100979190610c36565b61017b565b005b3480156100aa57600080fd5b506100b3610303565b005b3480156100c157600080fd5b506100dc60048036038101906100d79190610c36565b61030c565b005b3480156100ea57600080fd5b506100f36105df565b6040516101009190610ca4565b60405180910390f35b34801561011557600080fd5b5061011e610605565b60405161012b9190610cce565b60405180910390f35b61013c61060b565b005b34801561014a57600080fd5b5061016560048036038101906101609190610d27565b610663565b6040516101729190610cce565b60405180910390f35b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156101fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f490610db1565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461024c9190610e00565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161027990610e65565b60006040518083038185875af1925050503d80600081146102b6576040519150601f19603f3d011682016040523d82523d6000602084013e6102bb565b606091505b50509050806102ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f690610ec6565b60405180910390fd5b5050565b42600181905550565b6000806103188361067b565b915091506000429050670de0b6b3a7640000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156103ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a290610f32565b60405180910390fd5b6001151573dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663e91926f1866040518263ffffffff1660e01b81526004016103fc9190610cce565b602060405180830381865afa158015610419573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043d9190610f8a565b15151461047f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047690611003565b60405180910390fd5b8242106104c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b890611095565b60405180910390fd5b600073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b81526004016105109190610cce565b6020604051808303816000875af115801561052f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055391906110ca565b905073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff166342842e0e8233886040518463ffffffff1660e01b81526004016105a693929190611106565b600060405180830381600087803b1580156105c057600080fd5b505af11580156105d4573d6000803e3d6000fd5b505050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461065a919061113d565b92505081905550565b60026020528060005260406000206000915090505481565b600080600042905060008060008060008061069587610815565b95509550955095509550955060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663ccc5ffe98d6040518263ffffffff1660e01b81526004016106f19190610cce565b6040805180830381865afa15801561070d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073191906111cc565b9150915060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16631a1089c28f6040518263ffffffff1660e01b81526004016107859190610cce565b6040805180830381865afa1580156107a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c591906111cc565b9150915060006107e18b8b8b8860ff168860ff1660005461089c565b905060006107fb8c8c8c8760ff168760ff1660005461089c565b905081819e509e5050505050505050505050505050915091565b6000806000806000806108356201518088610830919061123b565b6108fd565b80965081975082985050505060006201518088610852919061126c565b9050610e1081610862919061123b565b9350610e1081610872919061126c565b9050603c81610881919061123b565b9250603c81610890919061126c565b91505091939550919395565b600081603c846108ac919061129d565b610e10866108ba919061129d565b620151806108c98b8b8b610a9c565b6108d3919061129d565b6108dd919061113d565b6108e7919061113d565b6108f1919061113d565b90509695505050505050565b600080600080849050600062253d8c62010bd98361091b9190611301565b6109259190611301565b9050600062023ab182600461093a9190611395565b61094491906114ac565b9050600460038262023ab16109599190611395565b6109639190611301565b61096d91906114ac565b826109789190611516565b9150600062164b0960018461098d9190611301565b610fa061099a9190611395565b6109a491906114ac565b9050601f6004826105b56109b89190611395565b6109c291906114ac565b846109cd9190611516565b6109d79190611301565b9250600061098f8460506109eb9190611395565b6109f591906114ac565b9050600060508261098f610a099190611395565b610a1391906114ac565b85610a1e9190611516565b9050600b82610a2d91906114ac565b945084600c610a3c9190611395565b600283610a499190611301565b610a539190611516565b91508483603186610a649190611516565b6064610a709190611395565b610a7a9190611301565b610a849190611301565b92508298508197508096505050505050509193909250565b60006107b2841015610aad57600080fd5b600084905060008490506000849050600062253d8c60046064600c600e87610ad59190611516565b610adf91906114ac565b61132488610aed9190611301565b610af79190611301565b610b0191906114ac565b6003610b0d9190611395565b610b1791906114ac565b600c80600c600e88610b299190611516565b610b3391906114ac565b610b3d9190611395565b600287610b4a9190611516565b610b549190611516565b61016f610b619190611395565b610b6b91906114ac565b6004600c600e88610b7c9190611516565b610b8691906114ac565b6112c089610b949190611301565b610b9e9190611301565b6105b5610bab9190611395565b610bb591906114ac565b617d4b86610bc39190611516565b610bcd9190611301565b610bd79190611301565b610be19190611516565b610beb9190611516565b9050809450505050509392505050565b600080fd5b6000819050919050565b610c1381610c00565b8114610c1e57600080fd5b50565b600081359050610c3081610c0a565b92915050565b600060208284031215610c4c57610c4b610bfb565b5b6000610c5a84828501610c21565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c8e82610c63565b9050919050565b610c9e81610c83565b82525050565b6000602082019050610cb96000830184610c95565b92915050565b610cc881610c00565b82525050565b6000602082019050610ce36000830184610cbf565b92915050565b6000610cf482610c63565b9050919050565b610d0481610ce9565b8114610d0f57600080fd5b50565b600081359050610d2181610cfb565b92915050565b600060208284031215610d3d57610d3c610bfb565b5b6000610d4b84828501610d12565b91505092915050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820455448206465706f73697465640000000000000000600082015250565b6000610d9b601883610d54565b9150610da682610d65565b602082019050919050565b60006020820190508181036000830152610dca81610d8e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0b82610c00565b9150610e1683610c00565b925082821015610e2957610e28610dd1565b5b828203905092915050565b600081905092915050565b50565b6000610e4f600083610e34565b9150610e5a82610e3f565b600082019050919050565b6000610e7082610e42565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610eb0601483610d54565b9150610ebb82610e7a565b602082019050919050565b60006020820190508181036000830152610edf81610ea3565b9050919050565b7f4d757374206465706f736974206174206c656173742031204574680000000000600082015250565b6000610f1c601b83610d54565b9150610f2782610ee6565b602082019050919050565b60006020820190508181036000830152610f4b81610f0f565b9050919050565b60008115159050919050565b610f6781610f52565b8114610f7257600080fd5b50565b600081519050610f8481610f5e565b92915050565b600060208284031215610fa057610f9f610bfb565b5b6000610fae84828501610f75565b91505092915050565b7f5061726b696e672073706f7420697320756e617661696c61626c652100000000600082015250565b6000610fed601c83610d54565b9150610ff882610fb7565b602082019050919050565b6000602082019050818103600083015261101c81610fe0565b9050919050565b7f5061726b696e672073706f7420756e617661696c61626c65206174207468697360008201527f2074696d65210000000000000000000000000000000000000000000000000000602082015250565b600061107f602683610d54565b915061108a82611023565b604082019050919050565b600060208201905081810360008301526110ae81611072565b9050919050565b6000815190506110c481610cfb565b92915050565b6000602082840312156110e0576110df610bfb565b5b60006110ee848285016110b5565b91505092915050565b61110081610ce9565b82525050565b600060608201905061111b60008301866110f7565b61112860208301856110f7565b6111356040830184610cbf565b949350505050565b600061114882610c00565b915061115383610c00565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561118857611187610dd1565b5b828201905092915050565b600060ff82169050919050565b6111a981611193565b81146111b457600080fd5b50565b6000815190506111c6816111a0565b92915050565b600080604083850312156111e3576111e2610bfb565b5b60006111f1858286016111b7565b9250506020611202858286016111b7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061124682610c00565b915061125183610c00565b9250826112615761126061120c565b5b828204905092915050565b600061127782610c00565b915061128283610c00565b9250826112925761129161120c565b5b828206905092915050565b60006112a882610c00565b91506112b383610c00565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156112ec576112eb610dd1565b5b828202905092915050565b6000819050919050565b600061130c826112f7565b9150611317836112f7565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0383136000831215161561135257611351610dd1565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561138a57611389610dd1565b5b828201905092915050565b60006113a0826112f7565b91506113ab836112f7565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156113ea576113e9610dd1565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561142757611426610dd1565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561146457611463610dd1565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156114a1576114a0610dd1565b5b828202905092915050565b60006114b7826112f7565b91506114c2836112f7565b9250826114d2576114d161120c565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561150b5761150a610dd1565b5b828205905092915050565b6000611521826112f7565b915061152c836112f7565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561156757611566610dd1565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561159f5761159e610dd1565b5b82820390509291505056fea264697066735822122092b8a91d8f926608328b0a47ba5a77a4641b9980d9dbb0264268a78ec620b10764736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2326,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "zero",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2328,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "timeRn",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2332,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "depositors",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2346,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "requestParkingSpotToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd925199a58a30c55e6f78e87579837225fd881be4b14f3715ba8ce2b2e44add1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "1363312",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0d552456f7442dc6c99118d81137b3c652533be5e3fa69d8f6532cffb6e6cb63",
    "transactionHash": "0xd925199a58a30c55e6f78e87579837225fd881be4b14f3715ba8ce2b2e44add1",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "1363312",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "60bb262414d4da0273f1fd7717239433",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"requestParkingSpotToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequestParkingSpotToken.sol\":\"RequestParkingSpotToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BokkyPooBahsDateTimeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.00 - Contract Instance\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\\n//\\n// GNU Lesser General Public License 3.0\\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\\n// ----------------------------------------------------------------------------\\n\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\ncontract BokkyPooBahsDateTimeContract {\\n    uint public constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint public constant SECONDS_PER_HOUR = 60 * 60;\\n    uint public constant SECONDS_PER_MINUTE = 60;\\n    int public constant OFFSET19700101 = 2440588;\\n\\n    uint public constant DOW_MON = 1;\\n    uint public constant DOW_TUE = 2;\\n    uint public constant DOW_WED = 3;\\n    uint public constant DOW_THU = 4;\\n    uint public constant DOW_FRI = 5;\\n    uint public constant DOW_SAT = 6;\\n    uint public constant DOW_SUN = 7;\\n\\n    function _now() public view returns (uint timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function _nowDateTime() public view returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n    function _daysFromDate(uint year, uint month, uint day) public pure returns (uint _days) {\\n        return BokkyPooBahsDateTimeLibrary._daysFromDate(year, month, day);\\n    }\\n    function _daysToDate(uint _days) public pure returns (uint year, uint month, uint day) {\\n        return BokkyPooBahsDateTimeLibrary._daysToDate(_days);\\n    }\\n    function timestampFromDate(uint year, uint month, uint day) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, day);\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(year, month, day, hour, minute, second);\\n    }\\n    function timestampToDate(uint timestamp) public pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n    }\\n    function timestampToDateTime(uint timestamp) public pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(timestamp);\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDate(year, month, day);\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDateTime(year, month, day, hour, minute, second);\\n    }\\n    function isLeapYear(uint timestamp) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary.isLeapYear(timestamp);\\n    }\\n    function _isLeapYear(uint year) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary._isLeapYear(year);\\n    }\\n    function isWeekDay(uint timestamp) public pure returns (bool weekDay) {\\n        weekDay = BokkyPooBahsDateTimeLibrary.isWeekDay(timestamp);\\n    }\\n    function isWeekEnd(uint timestamp) public pure returns (bool weekEnd) {\\n        weekEnd = BokkyPooBahsDateTimeLibrary.isWeekEnd(timestamp);\\n    }\\n\\n    function getDaysInMonth(uint timestamp) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary.getDaysInMonth(timestamp);\\n    }\\n    function _getDaysInMonth(uint year, uint month) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\\n    }\\n    function getDayOfWeek(uint timestamp) public pure returns (uint dayOfWeek) {\\n        dayOfWeek = BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp);\\n    }\\n\\n    function getYear(uint timestamp) public pure returns (uint year) {\\n        year = BokkyPooBahsDateTimeLibrary.getYear(timestamp);\\n    }\\n    function getMonth(uint timestamp) public pure returns (uint month) {\\n        month = BokkyPooBahsDateTimeLibrary.getMonth(timestamp);\\n    }\\n    function getDay(uint timestamp) public pure returns (uint day) {\\n        day = BokkyPooBahsDateTimeLibrary.getDay(timestamp);\\n    }\\n    function getHour(uint timestamp) public pure returns (uint hour) {\\n        hour = BokkyPooBahsDateTimeLibrary.getHour(timestamp);\\n    }\\n    function getMinute(uint timestamp) public pure returns (uint minute) {\\n        minute = BokkyPooBahsDateTimeLibrary.getMinute(timestamp);\\n    }\\n    function getSecond(uint timestamp) public pure returns (uint second) {\\n        second = BokkyPooBahsDateTimeLibrary.getSecond(timestamp);\\n    }\\n\\n    function addYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addYears(timestamp, _years);\\n    }\\n    function addMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMonths(timestamp, _months);\\n    }\\n    function addDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, _days);\\n    }\\n    function addHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addHours(timestamp, _hours);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMinutes(timestamp, _minutes);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addSeconds(timestamp, _seconds);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subYears(timestamp, _years);\\n    }\\n    function subMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMonths(timestamp, _months);\\n    }\\n    function subDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subDays(timestamp, _days);\\n    }\\n    function subHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subHours(timestamp, _hours);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMinutes(timestamp, _minutes);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subSeconds(timestamp, _seconds);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) public pure returns (uint _years) {\\n        _years = BokkyPooBahsDateTimeLibrary.diffYears(fromTimestamp, toTimestamp);\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) public pure returns (uint _months) {\\n        _months = BokkyPooBahsDateTimeLibrary.diffMonths(fromTimestamp, toTimestamp);\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) public pure returns (uint _days) {\\n        _days = BokkyPooBahsDateTimeLibrary.diffDays(fromTimestamp, toTimestamp);\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) public pure returns (uint _hours) {\\n        _hours = BokkyPooBahsDateTimeLibrary.diffHours(fromTimestamp, toTimestamp);\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) public pure returns (uint _minutes) {\\n        _minutes = BokkyPooBahsDateTimeLibrary.diffMinutes(fromTimestamp, toTimestamp);\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) public pure returns (uint _seconds) {\\n        _seconds = BokkyPooBahsDateTimeLibrary.diffSeconds(fromTimestamp, toTimestamp);\\n    }\\n}\",\"keccak256\":\"0xe9913c812a72dc0d88521026abc5a107b82028b536cb12b5c0a20ddcfbe766ca\",\"license\":\"MIT\"},\"contracts/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x6a972bde66695cafc06e4f6beabef5f5a9386196a62f611d5be2d2e5a3a4967f\",\"license\":\"MIT\"},\"contracts/RequestParkingSpotToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./BokkyPooBahsDateTimeContract.sol\\\";\\n\\ninterface ParkingSpotAttributes {\\n    function checkSpotAvailability(uint) external view returns (bool);\\n    function checkSpotPermittedParkingStartTime(uint ) external view returns (uint8, uint8);\\n    function checkSpotPermittedParkingEndTime(uint ) external view returns (uint8, uint8);\\n    function checkParkingSpotTimezone(uint ) external view returns (uint8);\\n\\n\\n}\\n\\ninterface ParkingSpotToken {\\n    function ownerOf(uint256) external returns (address);\\n    function safeTransferFrom(address,address,uint256) external;\\n\\n}\\n\\ncontract RequestParkingSpotToken {\\nusing BokkyPooBahsDateTimeLibrary for *;\\n\\n    struct DateTime {\\n        uint256 Year;\\n        uint256 Month; \\n        uint256 Day;\\n        uint256 Hour; \\n        uint256 Minute;\\n        uint256 Second;\\n    }\\n\\n    DateTime current = DateTime(0,0,0,0,0,0);\\n\\n    mapping(address=>uint256) public depositors;\\n\\n    ParkingSpotAttributes constant psa = ParkingSpotAttributes(0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9);\\n    ParkingSpotToken constant pst = ParkingSpotToken(0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9);\\n\\n\\n\\n    // Payable address can receive Ether\\n    address payable public owner;\\n\\n    // Payable constructor can receive Ether\\n    constructor() payable {\\n        owner = payable(msg.sender);\\n    }\\n\\n    function deposit() public payable {\\n        depositors[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw(uint256 _amount) public {\\n        require(_amount <= depositors[msg.sender], \\\"Not enough ETH deposited\\\");\\n        depositors[msg.sender] -= _amount;\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n\\n    }\\n    \\n    function getCurrentDateTime () internal {\\n        (current.Year, current.Month, current.Day, current.Hour, current.Minute, current.Second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n\\n    function checkAndConvertAvailabilityTime(uint _tokenId) internal returns (uint256, uint256) {\\n        //  (uint256 currentYear, uint256 currentMonth, uint256 currentDay, uint256 currentHour, \\n        // uint256 currentMinute,)= BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n        getCurrentDateTime();\\n        (uint8 permittedStartHour, uint8 permittedStartMinute) = psa.checkSpotPermittedParkingStartTime(_tokenId);\\n        (uint8 permittedEndHour, uint8 permittedEndMinute) = psa.checkSpotPermittedParkingEndTime(_tokenId);\\n\\n        uint permittedStartTimeUnix = BokkyPooBahsDateTimeLibrary.timestampFromDateTime(current.Year, current.Month, current.Day, permittedStartHour, permittedStartMinute, 0);\\n        uint permittedEndTimeUnix = BokkyPooBahsDateTimeLibrary.timestampFromDateTime(current.Year, current.Month, current.Day, permittedEndHour, permittedEndMinute, 0);\\n        (permittedEndTimeUnix, permittedEndTimeUnix) = accountForTimezone(permittedStartTimeUnix, permittedEndTimeUnix, _tokenId);\\n        return (permittedStartTimeUnix, permittedEndTimeUnix);\\n\\n    }\\n\\n    function accountForTimezone(uint _start_time, uint _end_time, uint _tokenId) internal returns (uint256, uint256) {\\n        int256 timezone = int256(int8(psa.checkParkingSpotTimezone(_tokenId)));\\n\\n        if (timezone > 12) {\\n            timezone = timezone - 12;\\n            timezone * -1;\\n        }\\n\\n        int256 offset = timezone * 3600;\\n\\n      int256 _start_time_with_offset = int256(_start_time) + offset;\\n      int256 _end_time_with_offset = int256(_end_time) + offset;\\n\\n        _start_time = uint256(_start_time_with_offset);\\n        _end_time = uint256(_end_time_with_offset);\\n\\n        return (_start_time, _end_time);\\n\\n    }\\n\\n    function requestParkingSpotToken(uint256 _tokenId) public {\\n        (uint parkingSpotStartTime, uint parkingSpotEndTime) = checkAndConvertAvailabilityTime(_tokenId);\\n        uint256 currentTimeUnix = block.timestamp;\\n\\n        require(depositors[msg.sender] >= 1000000000000000000, \\\"Must deposit at least 1 Eth\\\");\\n        require(psa.checkSpotAvailability(_tokenId) == true, \\\"Parking spot is unavailable!\\\");\\n        require(block.timestamp > parkingSpotStartTime , \\\"Parking spot unavailable at this time!\\\");\\n\\n        // && block.timestamp < parkingSpotEndTime\\n\\n        address currentOwner;\\n        currentOwner = pst.ownerOf(_tokenId);\\n        pst.safeTransferFrom(currentOwner, msg.sender, _tokenId);\\n\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0x619bb0aa0376aa9599b26f88932152f601c4b583756d76205d50755909c8e578\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7948,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "current",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(DateTime)7937_storage"
      },
      {
        "astId": 7952,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "depositors",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7966,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DateTime)7937_storage": {
        "encoding": "inplace",
        "label": "struct RequestParkingSpotToken.DateTime",
        "members": [
          {
            "astId": 7926,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Year",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7928,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Month",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7930,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Day",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7932,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Hour",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7934,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Minute",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7936,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Second",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
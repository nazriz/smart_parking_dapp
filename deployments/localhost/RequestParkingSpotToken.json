{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "parkingSpotOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "permittedParkingTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartMinute",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndMinute",
          "type": "uint8"
        }
      ],
      "name": "requestParkingSpotToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestedParkingTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "returnParkingSpotToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2aae568da3507e3c9ec7e5f3474537046a816258f4277527e12962f06fe3c398",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "2161098",
    "logsBloom": "0x
    "blockHash": "0x7a1609a8e325049a5879d704490ab04d4b28ee6a18ca04ffad5468299f13c280",
    "transactionHash": "0x2aae568da3507e3c9ec7e5f3474537046a816258f4277527e12962f06fe3c398",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "2161098",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ba7bff8d00f29339c3aa1f6c40e7dd95",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"parkingSpotOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permittedParkingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartMinute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndMinute\",\"type\":\"uint8\"}],\"name\":\"requestParkingSpotToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestedParkingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"returnParkingSpotToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequestParkingSpotToken.sol\":\"RequestParkingSpotToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BokkyPooBahsDateTimeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.00 - Contract Instance\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\\n//\\n// GNU Lesser General Public License 3.0\\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\\n// ----------------------------------------------------------------------------\\n\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\ncontract BokkyPooBahsDateTimeContract {\\n    uint public constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint public constant SECONDS_PER_HOUR = 60 * 60;\\n    uint public constant SECONDS_PER_MINUTE = 60;\\n    int public constant OFFSET19700101 = 2440588;\\n\\n    uint public constant DOW_MON = 1;\\n    uint public constant DOW_TUE = 2;\\n    uint public constant DOW_WED = 3;\\n    uint public constant DOW_THU = 4;\\n    uint public constant DOW_FRI = 5;\\n    uint public constant DOW_SAT = 6;\\n    uint public constant DOW_SUN = 7;\\n\\n    function _now() public view returns (uint timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function _nowDateTime() public view returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n    function _daysFromDate(uint year, uint month, uint day) public pure returns (uint _days) {\\n        return BokkyPooBahsDateTimeLibrary._daysFromDate(year, month, day);\\n    }\\n    function _daysToDate(uint _days) public pure returns (uint year, uint month, uint day) {\\n        return BokkyPooBahsDateTimeLibrary._daysToDate(_days);\\n    }\\n    function timestampFromDate(uint year, uint month, uint day) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, day);\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(year, month, day, hour, minute, second);\\n    }\\n    function timestampToDate(uint timestamp) public pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n    }\\n    function timestampToDateTime(uint timestamp) public pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(timestamp);\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDate(year, month, day);\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDateTime(year, month, day, hour, minute, second);\\n    }\\n    function isLeapYear(uint timestamp) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary.isLeapYear(timestamp);\\n    }\\n    function _isLeapYear(uint year) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary._isLeapYear(year);\\n    }\\n    function isWeekDay(uint timestamp) public pure returns (bool weekDay) {\\n        weekDay = BokkyPooBahsDateTimeLibrary.isWeekDay(timestamp);\\n    }\\n    function isWeekEnd(uint timestamp) public pure returns (bool weekEnd) {\\n        weekEnd = BokkyPooBahsDateTimeLibrary.isWeekEnd(timestamp);\\n    }\\n\\n    function getDaysInMonth(uint timestamp) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary.getDaysInMonth(timestamp);\\n    }\\n    function _getDaysInMonth(uint year, uint month) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\\n    }\\n    function getDayOfWeek(uint timestamp) public pure returns (uint dayOfWeek) {\\n        dayOfWeek = BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp);\\n    }\\n\\n    function getYear(uint timestamp) public pure returns (uint year) {\\n        year = BokkyPooBahsDateTimeLibrary.getYear(timestamp);\\n    }\\n    function getMonth(uint timestamp) public pure returns (uint month) {\\n        month = BokkyPooBahsDateTimeLibrary.getMonth(timestamp);\\n    }\\n    function getDay(uint timestamp) public pure returns (uint day) {\\n        day = BokkyPooBahsDateTimeLibrary.getDay(timestamp);\\n    }\\n    function getHour(uint timestamp) public pure returns (uint hour) {\\n        hour = BokkyPooBahsDateTimeLibrary.getHour(timestamp);\\n    }\\n    function getMinute(uint timestamp) public pure returns (uint minute) {\\n        minute = BokkyPooBahsDateTimeLibrary.getMinute(timestamp);\\n    }\\n    function getSecond(uint timestamp) public pure returns (uint second) {\\n        second = BokkyPooBahsDateTimeLibrary.getSecond(timestamp);\\n    }\\n\\n    function addYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addYears(timestamp, _years);\\n    }\\n    function addMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMonths(timestamp, _months);\\n    }\\n    function addDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, _days);\\n    }\\n    function addHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addHours(timestamp, _hours);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMinutes(timestamp, _minutes);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addSeconds(timestamp, _seconds);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subYears(timestamp, _years);\\n    }\\n    function subMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMonths(timestamp, _months);\\n    }\\n    function subDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subDays(timestamp, _days);\\n    }\\n    function subHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subHours(timestamp, _hours);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMinutes(timestamp, _minutes);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subSeconds(timestamp, _seconds);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) public pure returns (uint _years) {\\n        _years = BokkyPooBahsDateTimeLibrary.diffYears(fromTimestamp, toTimestamp);\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) public pure returns (uint _months) {\\n        _months = BokkyPooBahsDateTimeLibrary.diffMonths(fromTimestamp, toTimestamp);\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) public pure returns (uint _days) {\\n        _days = BokkyPooBahsDateTimeLibrary.diffDays(fromTimestamp, toTimestamp);\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) public pure returns (uint _hours) {\\n        _hours = BokkyPooBahsDateTimeLibrary.diffHours(fromTimestamp, toTimestamp);\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) public pure returns (uint _minutes) {\\n        _minutes = BokkyPooBahsDateTimeLibrary.diffMinutes(fromTimestamp, toTimestamp);\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) public pure returns (uint _seconds) {\\n        _seconds = BokkyPooBahsDateTimeLibrary.diffSeconds(fromTimestamp, toTimestamp);\\n    }\\n}\",\"keccak256\":\"0xe9913c812a72dc0d88521026abc5a107b82028b536cb12b5c0a20ddcfbe766ca\",\"license\":\"MIT\"},\"contracts/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x6a972bde66695cafc06e4f6beabef5f5a9386196a62f611d5be2d2e5a3a4967f\",\"license\":\"MIT\"},\"contracts/RequestParkingSpotToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./BokkyPooBahsDateTimeContract.sol\\\";\\n\\ninterface ParkingSpotAttributes {\\n    function checkSpotAvailability(uint) external view returns (bool);\\n    function checkSpotPermittedParkingStartTime(uint ) external view returns (uint8, uint8);\\n    function checkSpotPermittedParkingEndTime(uint ) external view returns (uint8, uint8);\\n    function checkParkingSpotTimezone(uint ) external view returns (uint8);\\n    function spotInUse(uint) external view returns (bool);\\n    function setSpotInUse(uint, bool ) external;\\n\\n\\n}\\n\\ninterface ParkingSpotToken {\\n    function ownerOf(uint256) external returns (address);\\n    function safeTransferFrom(address,address,uint256) external;\\n    function safeTransferFromWithOwnerApprovals(address,address,uint256) external;\\n\\n\\n}\\n\\ncontract RequestParkingSpotToken {\\nusing BokkyPooBahsDateTimeLibrary for *;\\n\\n    struct DateTime {\\n        uint256 Year;\\n        uint256 Month; \\n        uint256 Day;\\n        uint256 Hour; \\n        uint256 Minute;\\n        uint256 Second;\\n    }\\n\\n    DateTime current = DateTime(0,0,0,0,0,0);\\n\\n    mapping(address=>uint256) public depositors;\\n    mapping(uint256=> address) public parkingSpotOwner;\\n    mapping(uint256=>uint256[2]) public permittedParkingTimes;\\n    mapping(uint256=>uint256[2]) public requestedParkingTimes;\\n\\n    ParkingSpotAttributes constant psa = ParkingSpotAttributes(0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9);\\n    ParkingSpotToken constant pst = ParkingSpotToken(0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9);\\n\\n\\n\\n    // Payable address can receive Ether\\n    address payable public owner;\\n\\n    // Payable constructor can receive Ether\\n    constructor() payable {\\n        owner = payable(msg.sender);\\n    }\\n\\n    function deposit() public payable {\\n        depositors[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw(uint256 _amount) public {\\n        require(_amount <= depositors[msg.sender], \\\"Not enough ETH deposited\\\");\\n        depositors[msg.sender] -= _amount;\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n\\n    }\\n    \\n    function getCurrentDateTime () internal {\\n        (current.Year, current.Month, current.Day, current.Hour, current.Minute, current.Second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n\\n    function genericTimeFrameToCurrentUnixTime(uint8 _hour, uint8 _minute) internal returns (uint) {\\n        getCurrentDateTime();\\n       return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(current.Year, current.Month, current.Day, _hour, _minute, 0);\\n    }\\n\\n    function retrievePermittedParkingTimes(uint _tokenId) internal returns (uint256, uint256) {\\n        (uint8 permittedStartHour, uint8 permittedStartMinute) = psa.checkSpotPermittedParkingStartTime(_tokenId);\\n        (uint8 permittedEndHour, uint8 permittedEndMinute) = psa.checkSpotPermittedParkingEndTime(_tokenId);\\n\\n        uint permittedStartTimeUnix = genericTimeFrameToCurrentUnixTime(permittedStartHour, permittedStartMinute);\\n        uint permittedEndTimeUnix = genericTimeFrameToCurrentUnixTime(permittedEndHour, permittedEndMinute);\\n        permittedStartTimeUnix = accountForTimezone(permittedStartTimeUnix, _tokenId);\\n        permittedEndTimeUnix  =  accountForTimezone(permittedEndTimeUnix, _tokenId);\\n\\n        permittedParkingTimes[_tokenId] = [permittedStartTimeUnix, permittedEndTimeUnix];\\n\\n        return (permittedStartTimeUnix, permittedEndTimeUnix);\\n\\n    }\\n\\n    function accountForTimezone(uint _unixTime, uint _tokenId) internal returns (uint256) {\\n        int256 timezone = int256(int8(psa.checkParkingSpotTimezone(_tokenId)));\\n\\n        if (timezone > 12) {\\n            timezone = timezone - 12;\\n            timezone * -1;\\n        }\\n\\n        int256 offset = timezone * 3600;\\n\\n      int256 _unixTimeWithOffset = int256(_unixTime) + offset;\\n\\n        _unixTime = uint256(_unixTimeWithOffset);\\n\\n        return _unixTime;\\n\\n    }\\n\\n    function requestParkingSpotToken(uint256 _tokenId, uint8 _requestedStartHour, uint8 _requestedStartMinute, uint8 _requestedEndHour, uint8 _requestedEndMinute) public {\\n        require(_requestedStartHour <= 23, \\\"Start hour must be between 0 and 23\\\");\\n        require(_requestedStartMinute <= 59, \\\"Start minute must be between 0 and 59\\\");\\n        require(_requestedEndHour <= 23, \\\"End hour must be between 0 and 23\\\");\\n        require(_requestedEndMinute <= 59, \\\"End minute must be between 0 and 59\\\");\\n        require(psa.spotInUse(_tokenId) == false, \\\"Parking spot currently in use!\\\");\\n\\n        (uint parkingSpotStartTime, uint parkingSpotEndTime) = retrievePermittedParkingTimes(_tokenId);\\n\\n        uint256 requestedStartTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedStartHour,_requestedStartMinute), _tokenId);\\n        uint256 requestedEndTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedEndHour,_requestedEndMinute), _tokenId);\\n        require(requestedStartTimeUnix > block.timestamp, \\\"Can't request parking spot in the past!\\\");\\n        require(depositors[msg.sender] >= 1000000000000000000, \\\"Must deposit at least 1 Eth\\\");\\n        require(psa.checkSpotAvailability(_tokenId) == true, \\\"Parking spot is unavailable!\\\");\\n        require(requestedStartTimeUnix > parkingSpotStartTime && requestedEndTimeUnix < parkingSpotEndTime , \\\"Parking spot unavailable at this time!\\\");\\n\\n     \\n       address currentOwner = pst.ownerOf(_tokenId);\\n        parkingSpotOwner[_tokenId] = currentOwner;\\n        pst.safeTransferFrom(currentOwner, msg.sender, _tokenId);\\n        psa.setSpotInUse(_tokenId, true);\\n        requestedParkingTimes[_tokenId] = [requestedStartTimeUnix, requestedEndTimeUnix ];\\n\\n    }\\n\\n    function returnParkingSpotToken(uint256 _tokenId) public returns (bool) {\\n        // require( > block.timestamp, \\\"Parking session has not ended!\\\");\\n\\n        uint256 parkingEndtimeUnix = requestedParkingTimes[_tokenId][1];\\n\\n        if (parkingEndtimeUnix == 0) {\\n            if (block.timestamp >= permittedParkingTimes[_tokenId][1]) {\\n                address currentUser = pst.ownerOf(_tokenId);\\n                pst.safeTransferFrom(currentUser, parkingSpotOwner[_tokenId], _tokenId);\\n                psa.setSpotInUse(_tokenId, false);\\n                return true;\\n\\n            } else {\\n                return false;\\n            } \\n        } else if (parkingEndtimeUnix >= block.timestamp) {\\n                address currentUser = pst.ownerOf(_tokenId);\\n                pst.safeTransferFrom(currentUser, parkingSpotOwner[_tokenId], _tokenId);\\n                psa.setSpotInUse(_tokenId, false);\\n                return true;\\n            } else {\\n                return false;\\n    }\\n\\n        return false;\\n\\n}\\n\\n}\\n\\n\",\"keccak256\":\"0x44ab69ed34e3a76bd861699eaaa7a6dfb8de4a9792ef7597c31015dfb5b6dbd6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525060008082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155505033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061259f806100c66000396000f3fe6080604052600436106100865760003560e01c80632e1a7d4d116100595780632e1a7d4d1461016b5780638da5cb5b14610194578063d0e30db0146101bf578063eed75f6d146101c9578063f35457091461020657610086565b80630d61e3131461008b57806323a85b02146100c85780632b425ab3146100f15780632bebbe4d1461012e575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611715565b610243565b6040516100bf9190611764565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea91906117b8565b61026b565b005b3480156100fd57600080fd5b5061011860048036038101906101139190611833565b6108b4565b604051610125919061187b565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190611715565b610ce2565b6040516101629190611764565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d9190611833565b610d0a565b005b3480156101a057600080fd5b506101a9610e92565b6040516101b691906118d7565b60405180910390f35b6101c7610eb8565b005b3480156101d557600080fd5b506101f060048036038101906101eb9190611930565b610f10565b6040516101fd9190611764565b60405180910390f35b34801561021257600080fd5b5061022d60048036038101906102289190611833565b610f28565b60405161023a919061196c565b60405180910390f35b6008602052816000526040600020816002811061025f57600080fd5b01600091509150505481565b60178460ff1611156102b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a990611a0a565b60405180910390fd5b603b8360ff1611156102f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f090611a9c565b60405180910390fd5b60178260ff161115610340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033790611b2e565b60405180910390fd5b603b8160ff161115610387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037e90611bc0565b60405180910390fd5b6000151573dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166354e3e36e876040518263ffffffff1660e01b81526004016103d89190611764565b602060405180830381865afa1580156103f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104199190611c0c565b15151461045b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045290611c85565b60405180910390fd5b60008061046787610f5b565b91509150600061048061047a8888611102565b89611137565b905060006104976104918787611102565b8a611137565b90504282116104db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d290611d17565b60405180910390fd5b670de0b6b3a7640000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c90611d83565b60405180910390fd5b6001151573dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663e91926f18b6040518263ffffffff1660e01b81526004016105b69190611764565b602060405180830381865afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f79190611c0c565b151514610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063090611def565b60405180910390fd5b838211801561064757508281105b610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d90611e81565b60405180910390fd5b600073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff16636352211e8b6040518263ffffffff1660e01b81526004016106d59190611764565b6020604051808303816000875af11580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190611eb6565b905080600760008c815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff166342842e0e82338d6040518463ffffffff1660e01b81526004016107bd93929190611ee3565b600060405180830381600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b5050505073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16633ee036878b60016040518363ffffffff1660e01b815260040161083f929190611f1a565b600060405180830381600087803b15801561085957600080fd5b505af115801561086d573d6000803e3d6000fd5b50505050604051806040016040528084815260200183815250600960008c81526020019081526020016000209060026108a792919061167d565b5050505050505050505050565b600080600960008481526020019081526020016000206001600281106108dd576108dc611f43565b5b015490506000811415610af957600860008481526020019081526020016000206001600281106109105761090f611f43565b5b01544210610aef57600073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016109679190611764565b6020604051808303816000875af1158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa9190611eb6565b905073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff166342842e0e826007600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518463ffffffff1660e01b8152600401610a3093929190611ee3565b600060405180830381600087803b158015610a4a57600080fd5b505af1158015610a5e573d6000803e3d6000fd5b5050505073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16633ee036878560006040518363ffffffff1660e01b8152600401610ab2929190611f1a565b600060405180830381600087803b158015610acc57600080fd5b505af1158015610ae0573d6000803e3d6000fd5b50505050600192505050610cdd565b6000915050610cdd565b428110610cd757600073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610b4f9190611764565b6020604051808303816000875af1158015610b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b929190611eb6565b905073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff166342842e0e826007600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518463ffffffff1660e01b8152600401610c1893929190611ee3565b600060405180830381600087803b158015610c3257600080fd5b505af1158015610c46573d6000803e3d6000fd5b5050505073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16633ee036878560006040518363ffffffff1660e01b8152600401610c9a929190611f1a565b600060405180830381600087803b158015610cb457600080fd5b505af1158015610cc8573d6000803e3d6000fd5b50505050600192505050610cdd565b60009150505b919050565b60096020528160005260406000208160028110610cfe57600080fd5b01600091509150505481565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610d8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8390611fbe565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ddb919061200d565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610e0890612072565b60006040518083038185875af1925050503d8060008114610e45576040519150601f19603f3d011682016040523d82523d6000602084013e610e4a565b606091505b5050905080610e8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e85906120d3565b60405180910390fd5b5050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b34600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f0791906120f3565b92505081905550565b60066020528060005260406000206000915090505481565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663ccc5ffe9866040518263ffffffff1660e01b8152600401610fae9190611764565b6040805180830381865afa158015610fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fee919061215e565b9150915060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16631a1089c2886040518263ffffffff1660e01b81526004016110429190611764565b6040805180830381865afa15801561105e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611082919061215e565b9150915060006110928585611102565b905060006110a08484611102565b90506110ac828a611137565b91506110b8818a611137565b9050604051806040016040528083815260200182815250600860008b81526020019081526020016000209060026110f092919061167d565b50818197509750505050505050915091565b600061110c611244565b61112f60008001546000600101546000600201548660ff168660ff166000611297565b905092915050565b60008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16635fe20047846040518263ffffffff1660e01b81526004016111879190611764565b602060405180830381865afa1580156111a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c8919061219e565b60000b9050600c81131561121357600c816111e391906121d5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816112119190612269565b505b6000610e10826112239190612269565b9050600081866112339190612380565b905080955085935050505092915050565b61124d426112f8565b6000800160008060010160008060020160008060030160008060040160008060050160008c919050558b919050558a91905055899190505588919050558791905055505050505050565b600081603c846112a79190612414565b610e10866112b59190612414565b620151806112c48b8b8b61137f565b6112ce9190612414565b6112d891906120f3565b6112e291906120f3565b6112ec91906120f3565b90509695505050505050565b6000806000806000806113186201518088611313919061249d565b6114de565b8096508197508298505050506000620151808861133591906124ce565b9050610e1081611345919061249d565b9350610e108161135591906124ce565b9050603c81611364919061249d565b9250603c8161137391906124ce565b91505091939550919395565b60006107b284101561139057600080fd5b600084905060008490506000849050600062253d8c60046064600c600e876113b891906121d5565b6113c291906124ff565b611324886113d09190612380565b6113da9190612380565b6113e491906124ff565b60036113f09190612269565b6113fa91906124ff565b600c80600c600e8861140c91906121d5565b61141691906124ff565b6114209190612269565b60028761142d91906121d5565b61143791906121d5565b61016f6114449190612269565b61144e91906124ff565b6004600c600e8861145f91906121d5565b61146991906124ff565b6112c0896114779190612380565b6114819190612380565b6105b561148e9190612269565b61149891906124ff565b617d4b866114a691906121d5565b6114b09190612380565b6114ba9190612380565b6114c491906121d5565b6114ce91906121d5565b9050809450505050509392505050565b600080600080849050600062253d8c62010bd9836114fc9190612380565b6115069190612380565b9050600062023ab182600461151b9190612269565b61152591906124ff565b9050600460038262023ab161153a9190612269565b6115449190612380565b61154e91906124ff565b8261155991906121d5565b9150600062164b0960018461156e9190612380565b610fa061157b9190612269565b61158591906124ff565b9050601f6004826105b56115999190612269565b6115a391906124ff565b846115ae91906121d5565b6115b89190612380565b9250600061098f8460506115cc9190612269565b6115d691906124ff565b9050600060508261098f6115ea9190612269565b6115f491906124ff565b856115ff91906121d5565b9050600b8261160e91906124ff565b945084600c61161d9190612269565b60028361162a9190612380565b61163491906121d5565b9150848360318661164591906121d5565b60646116519190612269565b61165b9190612380565b6116659190612380565b92508298508197508096505050505050509193909250565b82600281019282156116ac579160200282015b828111156116ab578251825591602001919060010190611690565b5b5090506116b991906116bd565b5090565b5b808211156116d65760008160009055506001016116be565b5090565b600080fd5b6000819050919050565b6116f2816116df565b81146116fd57600080fd5b50565b60008135905061170f816116e9565b92915050565b6000806040838503121561172c5761172b6116da565b5b600061173a85828601611700565b925050602061174b85828601611700565b9150509250929050565b61175e816116df565b82525050565b60006020820190506117796000830184611755565b92915050565b600060ff82169050919050565b6117958161177f565b81146117a057600080fd5b50565b6000813590506117b28161178c565b92915050565b600080600080600060a086880312156117d4576117d36116da565b5b60006117e288828901611700565b95505060206117f3888289016117a3565b9450506040611804888289016117a3565b9350506060611815888289016117a3565b9250506080611826888289016117a3565b9150509295509295909350565b600060208284031215611849576118486116da565b5b600061185784828501611700565b91505092915050565b60008115159050919050565b61187581611860565b82525050565b6000602082019050611890600083018461186c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118c182611896565b9050919050565b6118d1816118b6565b82525050565b60006020820190506118ec60008301846118c8565b92915050565b60006118fd82611896565b9050919050565b61190d816118f2565b811461191857600080fd5b50565b60008135905061192a81611904565b92915050565b600060208284031215611946576119456116da565b5b60006119548482850161191b565b91505092915050565b611966816118f2565b82525050565b6000602082019050611981600083018461195d565b92915050565b600082825260208201905092915050565b7f537461727420686f7572206d757374206265206265747765656e203020616e6460008201527f2032330000000000000000000000000000000000000000000000000000000000602082015250565b60006119f4602383611987565b91506119ff82611998565b604082019050919050565b60006020820190508181036000830152611a23816119e7565b9050919050565b7f5374617274206d696e757465206d757374206265206265747765656e2030206160008201527f6e64203539000000000000000000000000000000000000000000000000000000602082015250565b6000611a86602583611987565b9150611a9182611a2a565b604082019050919050565b60006020820190508181036000830152611ab581611a79565b9050919050565b7f456e6420686f7572206d757374206265206265747765656e203020616e64203260008201527f3300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b18602183611987565b9150611b2382611abc565b604082019050919050565b60006020820190508181036000830152611b4781611b0b565b9050919050565b7f456e64206d696e757465206d757374206265206265747765656e203020616e6460008201527f2035390000000000000000000000000000000000000000000000000000000000602082015250565b6000611baa602383611987565b9150611bb582611b4e565b604082019050919050565b60006020820190508181036000830152611bd981611b9d565b9050919050565b611be981611860565b8114611bf457600080fd5b50565b600081519050611c0681611be0565b92915050565b600060208284031215611c2257611c216116da565b5b6000611c3084828501611bf7565b91505092915050565b7f5061726b696e672073706f742063757272656e746c7920696e20757365210000600082015250565b6000611c6f601e83611987565b9150611c7a82611c39565b602082019050919050565b60006020820190508181036000830152611c9e81611c62565b9050919050565b7f43616e27742072657175657374207061726b696e672073706f7420696e20746860008201527f6520706173742100000000000000000000000000000000000000000000000000602082015250565b6000611d01602783611987565b9150611d0c82611ca5565b604082019050919050565b60006020820190508181036000830152611d3081611cf4565b9050919050565b7f4d757374206465706f736974206174206c656173742031204574680000000000600082015250565b6000611d6d601b83611987565b9150611d7882611d37565b602082019050919050565b60006020820190508181036000830152611d9c81611d60565b9050919050565b7f5061726b696e672073706f7420697320756e617661696c61626c652100000000600082015250565b6000611dd9601c83611987565b9150611de482611da3565b602082019050919050565b60006020820190508181036000830152611e0881611dcc565b9050919050565b7f5061726b696e672073706f7420756e617661696c61626c65206174207468697360008201527f2074696d65210000000000000000000000000000000000000000000000000000602082015250565b6000611e6b602683611987565b9150611e7682611e0f565b604082019050919050565b60006020820190508181036000830152611e9a81611e5e565b9050919050565b600081519050611eb081611904565b92915050565b600060208284031215611ecc57611ecb6116da565b5b6000611eda84828501611ea1565b91505092915050565b6000606082019050611ef8600083018661195d565b611f05602083018561195d565b611f126040830184611755565b949350505050565b6000604082019050611f2f6000830185611755565b611f3c602083018461186c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f7420656e6f75676820455448206465706f73697465640000000000000000600082015250565b6000611fa8601883611987565b9150611fb382611f72565b602082019050919050565b60006020820190508181036000830152611fd781611f9b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612018826116df565b9150612023836116df565b92508282101561203657612035611fde565b5b828203905092915050565b600081905092915050565b50565b600061205c600083612041565b91506120678261204c565b600082019050919050565b600061207d8261204f565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006120bd601483611987565b91506120c882612087565b602082019050919050565b600060208201905081810360008301526120ec816120b0565b9050919050565b60006120fe826116df565b9150612109836116df565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561213e5761213d611fde565b5b828201905092915050565b6000815190506121588161178c565b92915050565b60008060408385031215612175576121746116da565b5b600061218385828601612149565b925050602061219485828601612149565b9150509250929050565b6000602082840312156121b4576121b36116da565b5b60006121c284828501612149565b91505092915050565b6000819050919050565b60006121e0826121cb565b91506121eb836121cb565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561222657612225611fde565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561225e5761225d611fde565b5b828203905092915050565b6000612274826121cb565b915061227f836121cb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156122be576122bd611fde565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156122fb576122fa611fde565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561233857612337611fde565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561237557612374611fde565b5b828202905092915050565b600061238b826121cb565b9150612396836121cb565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156123d1576123d0611fde565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561240957612408611fde565b5b828201905092915050565b600061241f826116df565b915061242a836116df565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561246357612462611fde565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006124a8826116df565b91506124b3836116df565b9250826124c3576124c261246e565b5b828204905092915050565b60006124d9826116df565b91506124e4836116df565b9250826124f4576124f361246e565b5b828206905092915050565b600061250a826121cb565b9150612515836121cb565b9250826125255761252461246e565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561255e5761255d611fde565b5b82820590509291505056fea26469706673582212205d0b8c84b00592522b34604fc0a12146b0174d5a511775949d992452d7441d5564736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80632e1a7d4d116100595780632e1a7d4d1461016b5780638da5cb5b14610194578063d0e30db0146101bf578063eed75f6d146101c9578063f35457091461020657610086565b80630d61e3131461008b57806323a85b02146100c85780632b425ab3146100f15780632bebbe4d1461012e575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611715565b610243565b6040516100bf9190611764565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea91906117b8565b61026b565b005b3480156100fd57600080fd5b5061011860048036038101906101139190611833565b6108b4565b604051610125919061187b565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190611715565b610ce2565b6040516101629190611764565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d9190611833565b610d0a565b005b3480156101a057600080fd5b506101a9610e92565b6040516101b691906118d7565b60405180910390f35b6101c7610eb8565b005b3480156101d557600080fd5b506101f060048036038101906101eb9190611930565b610f10565b6040516101fd9190611764565b60405180910390f35b34801561021257600080fd5b5061022d60048036038101906102289190611833565b610f28565b60405161023a919061196c565b60405180910390f35b6008602052816000526040600020816002811061025f57600080fd5b01600091509150505481565b60178460ff1611156102b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a990611a0a565b60405180910390fd5b603b8360ff1611156102f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f090611a9c565b60405180910390fd5b60178260ff161115610340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033790611b2e565b60405180910390fd5b603b8160ff161115610387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037e90611bc0565b60405180910390fd5b6000151573dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166354e3e36e876040518263ffffffff1660e01b81526004016103d89190611764565b602060405180830381865afa1580156103f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104199190611c0c565b15151461045b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045290611c85565b60405180910390fd5b60008061046787610f5b565b91509150600061048061047a8888611102565b89611137565b905060006104976104918787611102565b8a611137565b90504282116104db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d290611d17565b60405180910390fd5b670de0b6b3a7640000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c90611d83565b60405180910390fd5b6001151573dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663e91926f18b6040518263ffffffff1660e01b81526004016105b69190611764565b602060405180830381865afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f79190611c0c565b151514610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063090611def565b60405180910390fd5b838211801561064757508281105b610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d90611e81565b60405180910390fd5b600073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff16636352211e8b6040518263ffffffff1660e01b81526004016106d59190611764565b6020604051808303816000875af11580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190611eb6565b905080600760008c815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff166342842e0e82338d6040518463ffffffff1660e01b81526004016107bd93929190611ee3565b600060405180830381600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b5050505073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16633ee036878b60016040518363ffffffff1660e01b815260040161083f929190611f1a565b600060405180830381600087803b15801561085957600080fd5b505af115801561086d573d6000803e3d6000fd5b50505050604051806040016040528084815260200183815250600960008c81526020019081526020016000209060026108a792919061167d565b5050505050505050505050565b600080600960008481526020019081526020016000206001600281106108dd576108dc611f43565b5b015490506000811415610af957600860008481526020019081526020016000206001600281106109105761090f611f43565b5b01544210610aef57600073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016109679190611764565b6020604051808303816000875af1158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa9190611eb6565b905073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff166342842e0e826007600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518463ffffffff1660e01b8152600401610a3093929190611ee3565b600060405180830381600087803b158015610a4a57600080fd5b505af1158015610a5e573d6000803e3d6000fd5b5050505073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16633ee036878560006040518363ffffffff1660e01b8152600401610ab2929190611f1a565b600060405180830381600087803b158015610acc57600080fd5b505af1158015610ae0573d6000803e3d6000fd5b50505050600192505050610cdd565b6000915050610cdd565b428110610cd757600073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610b4f9190611764565b6020604051808303816000875af1158015610b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b929190611eb6565b905073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff166342842e0e826007600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876040518463ffffffff1660e01b8152600401610c1893929190611ee3565b600060405180830381600087803b158015610c3257600080fd5b505af1158015610c46573d6000803e3d6000fd5b5050505073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16633ee036878560006040518363ffffffff1660e01b8152600401610c9a929190611f1a565b600060405180830381600087803b158015610cb457600080fd5b505af1158015610cc8573d6000803e3d6000fd5b50505050600192505050610cdd565b60009150505b919050565b60096020528160005260406000208160028110610cfe57600080fd5b01600091509150505481565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610d8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8390611fbe565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ddb919061200d565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff1682604051610e0890612072565b60006040518083038185875af1925050503d8060008114610e45576040519150601f19603f3d011682016040523d82523d6000602084013e610e4a565b606091505b5050905080610e8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e85906120d3565b60405180910390fd5b5050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b34600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f0791906120f3565b92505081905550565b60066020528060005260406000206000915090505481565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663ccc5ffe9866040518263ffffffff1660e01b8152600401610fae9190611764565b6040805180830381865afa158015610fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fee919061215e565b9150915060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16631a1089c2886040518263ffffffff1660e01b81526004016110429190611764565b6040805180830381865afa15801561105e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611082919061215e565b9150915060006110928585611102565b905060006110a08484611102565b90506110ac828a611137565b91506110b8818a611137565b9050604051806040016040528083815260200182815250600860008b81526020019081526020016000209060026110f092919061167d565b50818197509750505050505050915091565b600061110c611244565b61112f60008001546000600101546000600201548660ff168660ff166000611297565b905092915050565b60008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16635fe20047846040518263ffffffff1660e01b81526004016111879190611764565b602060405180830381865afa1580156111a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c8919061219e565b60000b9050600c81131561121357600c816111e391906121d5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816112119190612269565b505b6000610e10826112239190612269565b9050600081866112339190612380565b905080955085935050505092915050565b61124d426112f8565b6000800160008060010160008060020160008060030160008060040160008060050160008c919050558b919050558a91905055899190505588919050558791905055505050505050565b600081603c846112a79190612414565b610e10866112b59190612414565b620151806112c48b8b8b61137f565b6112ce9190612414565b6112d891906120f3565b6112e291906120f3565b6112ec91906120f3565b90509695505050505050565b6000806000806000806113186201518088611313919061249d565b6114de565b8096508197508298505050506000620151808861133591906124ce565b9050610e1081611345919061249d565b9350610e108161135591906124ce565b9050603c81611364919061249d565b9250603c8161137391906124ce565b91505091939550919395565b60006107b284101561139057600080fd5b600084905060008490506000849050600062253d8c60046064600c600e876113b891906121d5565b6113c291906124ff565b611324886113d09190612380565b6113da9190612380565b6113e491906124ff565b60036113f09190612269565b6113fa91906124ff565b600c80600c600e8861140c91906121d5565b61141691906124ff565b6114209190612269565b60028761142d91906121d5565b61143791906121d5565b61016f6114449190612269565b61144e91906124ff565b6004600c600e8861145f91906121d5565b61146991906124ff565b6112c0896114779190612380565b6114819190612380565b6105b561148e9190612269565b61149891906124ff565b617d4b866114a691906121d5565b6114b09190612380565b6114ba9190612380565b6114c491906121d5565b6114ce91906121d5565b9050809450505050509392505050565b600080600080849050600062253d8c62010bd9836114fc9190612380565b6115069190612380565b9050600062023ab182600461151b9190612269565b61152591906124ff565b9050600460038262023ab161153a9190612269565b6115449190612380565b61154e91906124ff565b8261155991906121d5565b9150600062164b0960018461156e9190612380565b610fa061157b9190612269565b61158591906124ff565b9050601f6004826105b56115999190612269565b6115a391906124ff565b846115ae91906121d5565b6115b89190612380565b9250600061098f8460506115cc9190612269565b6115d691906124ff565b9050600060508261098f6115ea9190612269565b6115f491906124ff565b856115ff91906121d5565b9050600b8261160e91906124ff565b945084600c61161d9190612269565b60028361162a9190612380565b61163491906121d5565b9150848360318661164591906121d5565b60646116519190612269565b61165b9190612380565b6116659190612380565b92508298508197508096505050505050509193909250565b82600281019282156116ac579160200282015b828111156116ab578251825591602001919060010190611690565b5b5090506116b991906116bd565b5090565b5b808211156116d65760008160009055506001016116be565b5090565b600080fd5b6000819050919050565b6116f2816116df565b81146116fd57600080fd5b50565b60008135905061170f816116e9565b92915050565b6000806040838503121561172c5761172b6116da565b5b600061173a85828601611700565b925050602061174b85828601611700565b9150509250929050565b61175e816116df565b82525050565b60006020820190506117796000830184611755565b92915050565b600060ff82169050919050565b6117958161177f565b81146117a057600080fd5b50565b6000813590506117b28161178c565b92915050565b600080600080600060a086880312156117d4576117d36116da565b5b60006117e288828901611700565b95505060206117f3888289016117a3565b9450506040611804888289016117a3565b9350506060611815888289016117a3565b9250506080611826888289016117a3565b9150509295509295909350565b600060208284031215611849576118486116da565b5b600061185784828501611700565b91505092915050565b60008115159050919050565b61187581611860565b82525050565b6000602082019050611890600083018461186c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118c182611896565b9050919050565b6118d1816118b6565b82525050565b60006020820190506118ec60008301846118c8565b92915050565b60006118fd82611896565b9050919050565b61190d816118f2565b811461191857600080fd5b50565b60008135905061192a81611904565b92915050565b600060208284031215611946576119456116da565b5b60006119548482850161191b565b91505092915050565b611966816118f2565b82525050565b6000602082019050611981600083018461195d565b92915050565b600082825260208201905092915050565b7f537461727420686f7572206d757374206265206265747765656e203020616e6460008201527f2032330000000000000000000000000000000000000000000000000000000000602082015250565b60006119f4602383611987565b91506119ff82611998565b604082019050919050565b60006020820190508181036000830152611a23816119e7565b9050919050565b7f5374617274206d696e757465206d757374206265206265747765656e2030206160008201527f6e64203539000000000000000000000000000000000000000000000000000000602082015250565b6000611a86602583611987565b9150611a9182611a2a565b604082019050919050565b60006020820190508181036000830152611ab581611a79565b9050919050565b7f456e6420686f7572206d757374206265206265747765656e203020616e64203260008201527f3300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b18602183611987565b9150611b2382611abc565b604082019050919050565b60006020820190508181036000830152611b4781611b0b565b9050919050565b7f456e64206d696e757465206d757374206265206265747765656e203020616e6460008201527f2035390000000000000000000000000000000000000000000000000000000000602082015250565b6000611baa602383611987565b9150611bb582611b4e565b604082019050919050565b60006020820190508181036000830152611bd981611b9d565b9050919050565b611be981611860565b8114611bf457600080fd5b50565b600081519050611c0681611be0565b92915050565b600060208284031215611c2257611c216116da565b5b6000611c3084828501611bf7565b91505092915050565b7f5061726b696e672073706f742063757272656e746c7920696e20757365210000600082015250565b6000611c6f601e83611987565b9150611c7a82611c39565b602082019050919050565b60006020820190508181036000830152611c9e81611c62565b9050919050565b7f43616e27742072657175657374207061726b696e672073706f7420696e20746860008201527f6520706173742100000000000000000000000000000000000000000000000000602082015250565b6000611d01602783611987565b9150611d0c82611ca5565b604082019050919050565b60006020820190508181036000830152611d3081611cf4565b9050919050565b7f4d757374206465706f736974206174206c656173742031204574680000000000600082015250565b6000611d6d601b83611987565b9150611d7882611d37565b602082019050919050565b60006020820190508181036000830152611d9c81611d60565b9050919050565b7f5061726b696e672073706f7420697320756e617661696c61626c652100000000600082015250565b6000611dd9601c83611987565b9150611de482611da3565b602082019050919050565b60006020820190508181036000830152611e0881611dcc565b9050919050565b7f5061726b696e672073706f7420756e617661696c61626c65206174207468697360008201527f2074696d65210000000000000000000000000000000000000000000000000000602082015250565b6000611e6b602683611987565b9150611e7682611e0f565b604082019050919050565b60006020820190508181036000830152611e9a81611e5e565b9050919050565b600081519050611eb081611904565b92915050565b600060208284031215611ecc57611ecb6116da565b5b6000611eda84828501611ea1565b91505092915050565b6000606082019050611ef8600083018661195d565b611f05602083018561195d565b611f126040830184611755565b949350505050565b6000604082019050611f2f6000830185611755565b611f3c602083018461186c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f7420656e6f75676820455448206465706f73697465640000000000000000600082015250565b6000611fa8601883611987565b9150611fb382611f72565b602082019050919050565b60006020820190508181036000830152611fd781611f9b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612018826116df565b9150612023836116df565b92508282101561203657612035611fde565b5b828203905092915050565b600081905092915050565b50565b600061205c600083612041565b91506120678261204c565b600082019050919050565b600061207d8261204f565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b60006120bd601483611987565b91506120c882612087565b602082019050919050565b600060208201905081810360008301526120ec816120b0565b9050919050565b60006120fe826116df565b9150612109836116df565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561213e5761213d611fde565b5b828201905092915050565b6000815190506121588161178c565b92915050565b60008060408385031215612175576121746116da565b5b600061218385828601612149565b925050602061219485828601612149565b9150509250929050565b6000602082840312156121b4576121b36116da565b5b60006121c284828501612149565b91505092915050565b6000819050919050565b60006121e0826121cb565b91506121eb836121cb565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561222657612225611fde565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561225e5761225d611fde565b5b828203905092915050565b6000612274826121cb565b915061227f836121cb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156122be576122bd611fde565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156122fb576122fa611fde565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561233857612337611fde565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561237557612374611fde565b5b828202905092915050565b600061238b826121cb565b9150612396836121cb565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156123d1576123d0611fde565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561240957612408611fde565b5b828201905092915050565b600061241f826116df565b915061242a836116df565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561246357612462611fde565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006124a8826116df565b91506124b3836116df565b9250826124c3576124c261246e565b5b828204905092915050565b60006124d9826116df565b91506124e4836116df565b9250826124f4576124f361246e565b5b828206905092915050565b600061250a826121cb565b9150612515836121cb565b9250826125255761252461246e565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561255e5761255d611fde565b5b82820590509291505056fea26469706673582212205d0b8c84b00592522b34604fc0a12146b0174d5a511775949d992452d7441d5564736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2378,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "current",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(DateTime)2367_storage"
      },
      {
        "astId": 2382,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "depositors",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2386,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "parkingSpotOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2392,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "permittedParkingTimes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 2398,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "requestedParkingTimes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 2412,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_struct(DateTime)2367_storage": {
        "encoding": "inplace",
        "label": "struct RequestParkingSpotToken.DateTime",
        "members": [
          {
            "astId": 2356,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Year",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2358,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Month",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2360,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Day",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2362,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Hour",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2364,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Minute",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2366,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Second",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartMinute",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndMinute",
          "type": "uint8"
        }
      ],
      "name": "requestParkingSpotToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x41aa21d09c16275e59ce8ad9efe043e567e925f925d4a5bd7b63a3ca26dcda0d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "1630800",
    "logsBloom": "0x
    "blockHash": "0x36d3a818b7c89a6a2c13847ca914e5603ef6a0d08aa18e7046316e15db6c9e1c",
    "transactionHash": "0x41aa21d09c16275e59ce8ad9efe043e567e925f925d4a5bd7b63a3ca26dcda0d",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "1630800",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0812a6e0d18c19a1f6e03b720bec87f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartMinute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndMinute\",\"type\":\"uint8\"}],\"name\":\"requestParkingSpotToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequestParkingSpotToken.sol\":\"RequestParkingSpotToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BokkyPooBahsDateTimeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.00 - Contract Instance\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\\n//\\n// GNU Lesser General Public License 3.0\\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\\n// ----------------------------------------------------------------------------\\n\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\ncontract BokkyPooBahsDateTimeContract {\\n    uint public constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint public constant SECONDS_PER_HOUR = 60 * 60;\\n    uint public constant SECONDS_PER_MINUTE = 60;\\n    int public constant OFFSET19700101 = 2440588;\\n\\n    uint public constant DOW_MON = 1;\\n    uint public constant DOW_TUE = 2;\\n    uint public constant DOW_WED = 3;\\n    uint public constant DOW_THU = 4;\\n    uint public constant DOW_FRI = 5;\\n    uint public constant DOW_SAT = 6;\\n    uint public constant DOW_SUN = 7;\\n\\n    function _now() public view returns (uint timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function _nowDateTime() public view returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n    function _daysFromDate(uint year, uint month, uint day) public pure returns (uint _days) {\\n        return BokkyPooBahsDateTimeLibrary._daysFromDate(year, month, day);\\n    }\\n    function _daysToDate(uint _days) public pure returns (uint year, uint month, uint day) {\\n        return BokkyPooBahsDateTimeLibrary._daysToDate(_days);\\n    }\\n    function timestampFromDate(uint year, uint month, uint day) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, day);\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(year, month, day, hour, minute, second);\\n    }\\n    function timestampToDate(uint timestamp) public pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n    }\\n    function timestampToDateTime(uint timestamp) public pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(timestamp);\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDate(year, month, day);\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDateTime(year, month, day, hour, minute, second);\\n    }\\n    function isLeapYear(uint timestamp) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary.isLeapYear(timestamp);\\n    }\\n    function _isLeapYear(uint year) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary._isLeapYear(year);\\n    }\\n    function isWeekDay(uint timestamp) public pure returns (bool weekDay) {\\n        weekDay = BokkyPooBahsDateTimeLibrary.isWeekDay(timestamp);\\n    }\\n    function isWeekEnd(uint timestamp) public pure returns (bool weekEnd) {\\n        weekEnd = BokkyPooBahsDateTimeLibrary.isWeekEnd(timestamp);\\n    }\\n\\n    function getDaysInMonth(uint timestamp) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary.getDaysInMonth(timestamp);\\n    }\\n    function _getDaysInMonth(uint year, uint month) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\\n    }\\n    function getDayOfWeek(uint timestamp) public pure returns (uint dayOfWeek) {\\n        dayOfWeek = BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp);\\n    }\\n\\n    function getYear(uint timestamp) public pure returns (uint year) {\\n        year = BokkyPooBahsDateTimeLibrary.getYear(timestamp);\\n    }\\n    function getMonth(uint timestamp) public pure returns (uint month) {\\n        month = BokkyPooBahsDateTimeLibrary.getMonth(timestamp);\\n    }\\n    function getDay(uint timestamp) public pure returns (uint day) {\\n        day = BokkyPooBahsDateTimeLibrary.getDay(timestamp);\\n    }\\n    function getHour(uint timestamp) public pure returns (uint hour) {\\n        hour = BokkyPooBahsDateTimeLibrary.getHour(timestamp);\\n    }\\n    function getMinute(uint timestamp) public pure returns (uint minute) {\\n        minute = BokkyPooBahsDateTimeLibrary.getMinute(timestamp);\\n    }\\n    function getSecond(uint timestamp) public pure returns (uint second) {\\n        second = BokkyPooBahsDateTimeLibrary.getSecond(timestamp);\\n    }\\n\\n    function addYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addYears(timestamp, _years);\\n    }\\n    function addMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMonths(timestamp, _months);\\n    }\\n    function addDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, _days);\\n    }\\n    function addHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addHours(timestamp, _hours);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMinutes(timestamp, _minutes);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addSeconds(timestamp, _seconds);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subYears(timestamp, _years);\\n    }\\n    function subMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMonths(timestamp, _months);\\n    }\\n    function subDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subDays(timestamp, _days);\\n    }\\n    function subHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subHours(timestamp, _hours);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMinutes(timestamp, _minutes);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subSeconds(timestamp, _seconds);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) public pure returns (uint _years) {\\n        _years = BokkyPooBahsDateTimeLibrary.diffYears(fromTimestamp, toTimestamp);\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) public pure returns (uint _months) {\\n        _months = BokkyPooBahsDateTimeLibrary.diffMonths(fromTimestamp, toTimestamp);\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) public pure returns (uint _days) {\\n        _days = BokkyPooBahsDateTimeLibrary.diffDays(fromTimestamp, toTimestamp);\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) public pure returns (uint _hours) {\\n        _hours = BokkyPooBahsDateTimeLibrary.diffHours(fromTimestamp, toTimestamp);\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) public pure returns (uint _minutes) {\\n        _minutes = BokkyPooBahsDateTimeLibrary.diffMinutes(fromTimestamp, toTimestamp);\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) public pure returns (uint _seconds) {\\n        _seconds = BokkyPooBahsDateTimeLibrary.diffSeconds(fromTimestamp, toTimestamp);\\n    }\\n}\",\"keccak256\":\"0xe9913c812a72dc0d88521026abc5a107b82028b536cb12b5c0a20ddcfbe766ca\",\"license\":\"MIT\"},\"contracts/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x6a972bde66695cafc06e4f6beabef5f5a9386196a62f611d5be2d2e5a3a4967f\",\"license\":\"MIT\"},\"contracts/RequestParkingSpotToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./BokkyPooBahsDateTimeContract.sol\\\";\\n\\ninterface ParkingSpotAttributes {\\n    function checkSpotAvailability(uint) external view returns (bool);\\n    function checkSpotPermittedParkingStartTime(uint ) external view returns (uint8, uint8);\\n    function checkSpotPermittedParkingEndTime(uint ) external view returns (uint8, uint8);\\n    function checkParkingSpotTimezone(uint ) external view returns (uint8);\\n\\n\\n}\\n\\ninterface ParkingSpotToken {\\n    function ownerOf(uint256) external returns (address);\\n    function safeTransferFrom(address,address,uint256) external;\\n\\n}\\n\\ncontract RequestParkingSpotToken {\\nusing BokkyPooBahsDateTimeLibrary for *;\\n\\n    struct DateTime {\\n        uint256 Year;\\n        uint256 Month; \\n        uint256 Day;\\n        uint256 Hour; \\n        uint256 Minute;\\n        uint256 Second;\\n    }\\n\\n    DateTime current = DateTime(0,0,0,0,0,0);\\n\\n    mapping(address=>uint256) public depositors;\\n\\n    ParkingSpotAttributes constant psa = ParkingSpotAttributes(0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9);\\n    ParkingSpotToken constant pst = ParkingSpotToken(0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9);\\n\\n\\n\\n    // Payable address can receive Ether\\n    address payable public owner;\\n\\n    // Payable constructor can receive Ether\\n    constructor() payable {\\n        owner = payable(msg.sender);\\n    }\\n\\n    function deposit() public payable {\\n        depositors[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw(uint256 _amount) public {\\n        require(_amount <= depositors[msg.sender], \\\"Not enough ETH deposited\\\");\\n        depositors[msg.sender] -= _amount;\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n\\n    }\\n    \\n    function getCurrentDateTime () internal {\\n        (current.Year, current.Month, current.Day, current.Hour, current.Minute, current.Second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n\\n    function genericTimeFrameToCurrentUnixTime(uint8 _hour, uint8 _minute) internal returns (uint) {\\n        getCurrentDateTime();\\n       return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(current.Year, current.Month, current.Day, _hour, _minute, 0);\\n    }\\n\\n    function retrievePermittedParkingTimes(uint _tokenId) internal returns (uint256, uint256) {\\n        (uint8 permittedStartHour, uint8 permittedStartMinute) = psa.checkSpotPermittedParkingStartTime(_tokenId);\\n        (uint8 permittedEndHour, uint8 permittedEndMinute) = psa.checkSpotPermittedParkingEndTime(_tokenId);\\n\\n        uint permittedStartTimeUnix = genericTimeFrameToCurrentUnixTime(permittedStartHour, permittedStartMinute);\\n        uint permittedEndTimeUnix = genericTimeFrameToCurrentUnixTime(permittedEndHour, permittedEndMinute);\\n        permittedStartTimeUnix = accountForTimezone(permittedStartTimeUnix, _tokenId);\\n        permittedEndTimeUnix  =  accountForTimezone(permittedEndTimeUnix, _tokenId);\\n\\n        return (permittedStartTimeUnix, permittedEndTimeUnix);\\n\\n    }\\n\\n    function accountForTimezone(uint _unixTime, uint _tokenId) internal returns (uint256) {\\n        int256 timezone = int256(int8(psa.checkParkingSpotTimezone(_tokenId)));\\n\\n        if (timezone > 12) {\\n            timezone = timezone - 12;\\n            timezone * -1;\\n        }\\n\\n        int256 offset = timezone * 3600;\\n\\n      int256 _unixTimeWithOffset = int256(_unixTime) + offset;\\n    //   int256 _end_time_with_offset = int256(_end_time) + offset;\\n\\n        _unixTime = uint256(_unixTimeWithOffset);\\n        // _end_time = uint256(_end_time_with_offset);\\n\\n        return _unixTime;\\n\\n    }\\n\\n    function requestParkingSpotToken(uint256 _tokenId, uint8 _requestedStartHour, uint8 _requestedStartMinute, uint8 _requestedEndHour, uint8 _requestedEndMinute) public {\\n        require(_requestedStartHour <= 23, \\\"Start hour must be between 0 and 23\\\");\\n        require(_requestedStartMinute <= 59, \\\"Start minute must be between 0 and 59\\\");\\n        require(_requestedEndHour <= 23, \\\"End hour must be between 0 and 23\\\");\\n        require(_requestedEndMinute <= 59, \\\"End minute must be between 0 and 59\\\");\\n\\n        (uint parkingSpotStartTime, uint parkingSpotEndTime) = retrievePermittedParkingTimes(_tokenId);\\n        uint256 requestedStartTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedStartHour,_requestedStartMinute), _tokenId);\\n        uint256 requestedEndTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedEndHour,_requestedEndMinute), _tokenId);\\n        require(requestedStartTimeUnix > block.timestamp, \\\"Can't request parking spot in the past!\\\");\\n        require(depositors[msg.sender] >= 1000000000000000000, \\\"Must deposit at least 1 Eth\\\");\\n        require(psa.checkSpotAvailability(_tokenId) == true, \\\"Parking spot is unavailable!\\\");\\n        require(requestedStartTimeUnix > parkingSpotStartTime && requestedEndTimeUnix < parkingSpotEndTime , \\\"Parking spot unavailable at this time!\\\");\\n\\n        address currentOwner;\\n        currentOwner = pst.ownerOf(_tokenId);\\n        pst.safeTransferFrom(currentOwner, msg.sender, _tokenId);\\n\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0xb7d9d2adb952ce603d88dae92c1451481ec5bc9cb6ad05bb3f18603b08dc3933\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525060008082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155505033600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c02806100c66000396000f3fe60806040526004361061004a5760003560e01c806323a85b021461004f5780632e1a7d4d146100785780638da5cb5b146100a1578063d0e30db0146100cc578063eed75f6d146100d6575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610efa565b610113565b005b34801561008457600080fd5b5061009f600480360381019061009a9190610f75565b61057d565b005b3480156100ad57600080fd5b506100b6610705565b6040516100c39190610fe3565b60405180910390f35b6100d461072b565b005b3480156100e257600080fd5b506100fd60048036038101906100f8919061103c565b610783565b60405161010a9190611078565b60405180910390f35b60178460ff16111561015a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015190611116565b60405180910390fd5b603b8360ff1611156101a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610198906111a8565b60405180910390fd5b60178260ff1611156101e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101df9061123a565b60405180910390fd5b603b8160ff16111561022f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610226906112cc565b60405180910390fd5b60008061023b8761079b565b91509150600061025461024e888861090b565b89610940565b9050600061026b610265878761090b565b8a610940565b90504282116102af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a69061135e565b60405180910390fd5b670de0b6b3a7640000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610339576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610330906113ca565b60405180910390fd5b6001151573dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663e91926f18b6040518263ffffffff1660e01b815260040161038a9190611078565b602060405180830381865afa1580156103a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cb9190611422565b15151461040d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049061149b565b60405180910390fd5b838211801561041b57508281105b61045a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104519061152d565b60405180910390fd5b600073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff16636352211e8b6040518263ffffffff1660e01b81526004016104a99190611078565b6020604051808303816000875af11580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec9190611562565b905073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff166342842e0e82338d6040518463ffffffff1660e01b815260040161053f9392919061159e565b600060405180830381600087803b15801561055957600080fd5b505af115801561056d573d6000803e3d6000fd5b5050505050505050505050505050565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156105ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f690611621565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461064e9190611670565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161067b906116d5565b60006040518083038185875af1925050503d80600081146106b8576040519150601f19603f3d011682016040523d82523d6000602084013e6106bd565b606091505b5050905080610701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f890611736565b60405180910390fd5b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b34600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461077a9190611756565b92505081905550565b60066020528060005260406000206000915090505481565b60008060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663ccc5ffe9866040518263ffffffff1660e01b81526004016107ee9190611078565b6040805180830381865afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e91906117c1565b9150915060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16631a1089c2886040518263ffffffff1660e01b81526004016108829190611078565b6040805180830381865afa15801561089e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c291906117c1565b9150915060006108d2858561090b565b905060006108e0848461090b565b90506108ec828a610940565b91506108f8818a610940565b9050818197509750505050505050915091565b6000610915610a4d565b61093860008001546000600101546000600201548660ff168660ff166000610aa0565b905092915050565b60008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16635fe20047846040518263ffffffff1660e01b81526004016109909190611078565b602060405180830381865afa1580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d19190611801565b60000b9050600c811315610a1c57600c816109ec9190611838565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81610a1a91906118cc565b505b6000610e1082610a2c91906118cc565b905060008186610a3c91906119e3565b905080955085935050505092915050565b610a5642610b01565b6000800160008060010160008060020160008060030160008060040160008060050160008c919050558b919050558a91905055899190505588919050558791905055505050505050565b600081603c84610ab09190611a77565b610e1086610abe9190611a77565b62015180610acd8b8b8b610b88565b610ad79190611a77565b610ae19190611756565b610aeb9190611756565b610af59190611756565b90509695505050505050565b600080600080600080610b216201518088610b1c9190611b00565b610ce7565b80965081975082985050505060006201518088610b3e9190611b31565b9050610e1081610b4e9190611b00565b9350610e1081610b5e9190611b31565b9050603c81610b6d9190611b00565b9250603c81610b7c9190611b31565b91505091939550919395565b60006107b2841015610b9957600080fd5b600084905060008490506000849050600062253d8c60046064600c600e87610bc19190611838565b610bcb9190611b62565b61132488610bd991906119e3565b610be391906119e3565b610bed9190611b62565b6003610bf991906118cc565b610c039190611b62565b600c80600c600e88610c159190611838565b610c1f9190611b62565b610c2991906118cc565b600287610c369190611838565b610c409190611838565b61016f610c4d91906118cc565b610c579190611b62565b6004600c600e88610c689190611838565b610c729190611b62565b6112c089610c8091906119e3565b610c8a91906119e3565b6105b5610c9791906118cc565b610ca19190611b62565b617d4b86610caf9190611838565b610cb991906119e3565b610cc391906119e3565b610ccd9190611838565b610cd79190611838565b9050809450505050509392505050565b600080600080849050600062253d8c62010bd983610d0591906119e3565b610d0f91906119e3565b9050600062023ab1826004610d2491906118cc565b610d2e9190611b62565b9050600460038262023ab1610d4391906118cc565b610d4d91906119e3565b610d579190611b62565b82610d629190611838565b9150600062164b09600184610d7791906119e3565b610fa0610d8491906118cc565b610d8e9190611b62565b9050601f6004826105b5610da291906118cc565b610dac9190611b62565b84610db79190611838565b610dc191906119e3565b9250600061098f846050610dd591906118cc565b610ddf9190611b62565b9050600060508261098f610df391906118cc565b610dfd9190611b62565b85610e089190611838565b9050600b82610e179190611b62565b945084600c610e2691906118cc565b600283610e3391906119e3565b610e3d9190611838565b91508483603186610e4e9190611838565b6064610e5a91906118cc565b610e6491906119e3565b610e6e91906119e3565b92508298508197508096505050505050509193909250565b600080fd5b6000819050919050565b610e9e81610e8b565b8114610ea957600080fd5b50565b600081359050610ebb81610e95565b92915050565b600060ff82169050919050565b610ed781610ec1565b8114610ee257600080fd5b50565b600081359050610ef481610ece565b92915050565b600080600080600060a08688031215610f1657610f15610e86565b5b6000610f2488828901610eac565b9550506020610f3588828901610ee5565b9450506040610f4688828901610ee5565b9350506060610f5788828901610ee5565b9250506080610f6888828901610ee5565b9150509295509295909350565b600060208284031215610f8b57610f8a610e86565b5b6000610f9984828501610eac565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fcd82610fa2565b9050919050565b610fdd81610fc2565b82525050565b6000602082019050610ff86000830184610fd4565b92915050565b600061100982610fa2565b9050919050565b61101981610ffe565b811461102457600080fd5b50565b60008135905061103681611010565b92915050565b60006020828403121561105257611051610e86565b5b600061106084828501611027565b91505092915050565b61107281610e8b565b82525050565b600060208201905061108d6000830184611069565b92915050565b600082825260208201905092915050565b7f537461727420686f7572206d757374206265206265747765656e203020616e6460008201527f2032330000000000000000000000000000000000000000000000000000000000602082015250565b6000611100602383611093565b915061110b826110a4565b604082019050919050565b6000602082019050818103600083015261112f816110f3565b9050919050565b7f5374617274206d696e757465206d757374206265206265747765656e2030206160008201527f6e64203539000000000000000000000000000000000000000000000000000000602082015250565b6000611192602583611093565b915061119d82611136565b604082019050919050565b600060208201905081810360008301526111c181611185565b9050919050565b7f456e6420686f7572206d757374206265206265747765656e203020616e64203260008201527f3300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611224602183611093565b915061122f826111c8565b604082019050919050565b6000602082019050818103600083015261125381611217565b9050919050565b7f456e64206d696e757465206d757374206265206265747765656e203020616e6460008201527f2035390000000000000000000000000000000000000000000000000000000000602082015250565b60006112b6602383611093565b91506112c18261125a565b604082019050919050565b600060208201905081810360008301526112e5816112a9565b9050919050565b7f43616e27742072657175657374207061726b696e672073706f7420696e20746860008201527f6520706173742100000000000000000000000000000000000000000000000000602082015250565b6000611348602783611093565b9150611353826112ec565b604082019050919050565b600060208201905081810360008301526113778161133b565b9050919050565b7f4d757374206465706f736974206174206c656173742031204574680000000000600082015250565b60006113b4601b83611093565b91506113bf8261137e565b602082019050919050565b600060208201905081810360008301526113e3816113a7565b9050919050565b60008115159050919050565b6113ff816113ea565b811461140a57600080fd5b50565b60008151905061141c816113f6565b92915050565b60006020828403121561143857611437610e86565b5b60006114468482850161140d565b91505092915050565b7f5061726b696e672073706f7420697320756e617661696c61626c652100000000600082015250565b6000611485601c83611093565b91506114908261144f565b602082019050919050565b600060208201905081810360008301526114b481611478565b9050919050565b7f5061726b696e672073706f7420756e617661696c61626c65206174207468697360008201527f2074696d65210000000000000000000000000000000000000000000000000000602082015250565b6000611517602683611093565b9150611522826114bb565b604082019050919050565b600060208201905081810360008301526115468161150a565b9050919050565b60008151905061155c81611010565b92915050565b60006020828403121561157857611577610e86565b5b60006115868482850161154d565b91505092915050565b61159881610ffe565b82525050565b60006060820190506115b3600083018661158f565b6115c0602083018561158f565b6115cd6040830184611069565b949350505050565b7f4e6f7420656e6f75676820455448206465706f73697465640000000000000000600082015250565b600061160b601883611093565b9150611616826115d5565b602082019050919050565b6000602082019050818103600083015261163a816115fe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061167b82610e8b565b915061168683610e8b565b92508282101561169957611698611641565b5b828203905092915050565b600081905092915050565b50565b60006116bf6000836116a4565b91506116ca826116af565b600082019050919050565b60006116e0826116b2565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000611720601483611093565b915061172b826116ea565b602082019050919050565b6000602082019050818103600083015261174f81611713565b9050919050565b600061176182610e8b565b915061176c83610e8b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117a1576117a0611641565b5b828201905092915050565b6000815190506117bb81610ece565b92915050565b600080604083850312156117d8576117d7610e86565b5b60006117e6858286016117ac565b92505060206117f7858286016117ac565b9150509250929050565b60006020828403121561181757611816610e86565b5b6000611825848285016117ac565b91505092915050565b6000819050919050565b60006118438261182e565b915061184e8361182e565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561188957611888611641565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156118c1576118c0611641565b5b828203905092915050565b60006118d78261182e565b91506118e28361182e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561192157611920611641565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561195e5761195d611641565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561199b5761199a611641565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156119d8576119d7611641565b5b828202905092915050565b60006119ee8261182e565b91506119f98361182e565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615611a3457611a33611641565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615611a6c57611a6b611641565b5b828201905092915050565b6000611a8282610e8b565b9150611a8d83610e8b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611ac657611ac5611641565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611b0b82610e8b565b9150611b1683610e8b565b925082611b2657611b25611ad1565b5b828204905092915050565b6000611b3c82610e8b565b9150611b4783610e8b565b925082611b5757611b56611ad1565b5b828206905092915050565b6000611b6d8261182e565b9150611b788361182e565b925082611b8857611b87611ad1565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615611bc157611bc0611641565b5b82820590509291505056fea2646970667358221220d9fda3023926fd37fc942fc168dc6563b8933be56ca232237cf81f21879d10b164736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c806323a85b021461004f5780632e1a7d4d146100785780638da5cb5b146100a1578063d0e30db0146100cc578063eed75f6d146100d6575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610efa565b610113565b005b34801561008457600080fd5b5061009f600480360381019061009a9190610f75565b61057d565b005b3480156100ad57600080fd5b506100b6610705565b6040516100c39190610fe3565b60405180910390f35b6100d461072b565b005b3480156100e257600080fd5b506100fd60048036038101906100f8919061103c565b610783565b60405161010a9190611078565b60405180910390f35b60178460ff16111561015a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015190611116565b60405180910390fd5b603b8360ff1611156101a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610198906111a8565b60405180910390fd5b60178260ff1611156101e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101df9061123a565b60405180910390fd5b603b8160ff16111561022f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610226906112cc565b60405180910390fd5b60008061023b8761079b565b91509150600061025461024e888861090b565b89610940565b9050600061026b610265878761090b565b8a610940565b90504282116102af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a69061135e565b60405180910390fd5b670de0b6b3a7640000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610339576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610330906113ca565b60405180910390fd5b6001151573dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663e91926f18b6040518263ffffffff1660e01b815260040161038a9190611078565b602060405180830381865afa1580156103a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cb9190611422565b15151461040d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104049061149b565b60405180910390fd5b838211801561041b57508281105b61045a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104519061152d565b60405180910390fd5b600073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff16636352211e8b6040518263ffffffff1660e01b81526004016104a99190611078565b6020604051808303816000875af11580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec9190611562565b905073cf7ed3acca5a467e9e704c703e8d87f634fb0fc973ffffffffffffffffffffffffffffffffffffffff166342842e0e82338d6040518463ffffffff1660e01b815260040161053f9392919061159e565b600060405180830381600087803b15801561055957600080fd5b505af115801561056d573d6000803e3d6000fd5b5050505050505050505050505050565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156105ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f690611621565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461064e9190611670565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161067b906116d5565b60006040518083038185875af1925050503d80600081146106b8576040519150601f19603f3d011682016040523d82523d6000602084013e6106bd565b606091505b5050905080610701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f890611736565b60405180910390fd5b5050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b34600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461077a9190611756565b92505081905550565b60066020528060005260406000206000915090505481565b60008060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663ccc5ffe9866040518263ffffffff1660e01b81526004016107ee9190611078565b6040805180830381865afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e91906117c1565b9150915060008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16631a1089c2886040518263ffffffff1660e01b81526004016108829190611078565b6040805180830381865afa15801561089e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c291906117c1565b9150915060006108d2858561090b565b905060006108e0848461090b565b90506108ec828a610940565b91506108f8818a610940565b9050818197509750505050505050915091565b6000610915610a4d565b61093860008001546000600101546000600201548660ff168660ff166000610aa0565b905092915050565b60008073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16635fe20047846040518263ffffffff1660e01b81526004016109909190611078565b602060405180830381865afa1580156109ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d19190611801565b60000b9050600c811315610a1c57600c816109ec9190611838565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81610a1a91906118cc565b505b6000610e1082610a2c91906118cc565b905060008186610a3c91906119e3565b905080955085935050505092915050565b610a5642610b01565b6000800160008060010160008060020160008060030160008060040160008060050160008c919050558b919050558a91905055899190505588919050558791905055505050505050565b600081603c84610ab09190611a77565b610e1086610abe9190611a77565b62015180610acd8b8b8b610b88565b610ad79190611a77565b610ae19190611756565b610aeb9190611756565b610af59190611756565b90509695505050505050565b600080600080600080610b216201518088610b1c9190611b00565b610ce7565b80965081975082985050505060006201518088610b3e9190611b31565b9050610e1081610b4e9190611b00565b9350610e1081610b5e9190611b31565b9050603c81610b6d9190611b00565b9250603c81610b7c9190611b31565b91505091939550919395565b60006107b2841015610b9957600080fd5b600084905060008490506000849050600062253d8c60046064600c600e87610bc19190611838565b610bcb9190611b62565b61132488610bd991906119e3565b610be391906119e3565b610bed9190611b62565b6003610bf991906118cc565b610c039190611b62565b600c80600c600e88610c159190611838565b610c1f9190611b62565b610c2991906118cc565b600287610c369190611838565b610c409190611838565b61016f610c4d91906118cc565b610c579190611b62565b6004600c600e88610c689190611838565b610c729190611b62565b6112c089610c8091906119e3565b610c8a91906119e3565b6105b5610c9791906118cc565b610ca19190611b62565b617d4b86610caf9190611838565b610cb991906119e3565b610cc391906119e3565b610ccd9190611838565b610cd79190611838565b9050809450505050509392505050565b600080600080849050600062253d8c62010bd983610d0591906119e3565b610d0f91906119e3565b9050600062023ab1826004610d2491906118cc565b610d2e9190611b62565b9050600460038262023ab1610d4391906118cc565b610d4d91906119e3565b610d579190611b62565b82610d629190611838565b9150600062164b09600184610d7791906119e3565b610fa0610d8491906118cc565b610d8e9190611b62565b9050601f6004826105b5610da291906118cc565b610dac9190611b62565b84610db79190611838565b610dc191906119e3565b9250600061098f846050610dd591906118cc565b610ddf9190611b62565b9050600060508261098f610df391906118cc565b610dfd9190611b62565b85610e089190611838565b9050600b82610e179190611b62565b945084600c610e2691906118cc565b600283610e3391906119e3565b610e3d9190611838565b91508483603186610e4e9190611838565b6064610e5a91906118cc565b610e6491906119e3565b610e6e91906119e3565b92508298508197508096505050505050509193909250565b600080fd5b6000819050919050565b610e9e81610e8b565b8114610ea957600080fd5b50565b600081359050610ebb81610e95565b92915050565b600060ff82169050919050565b610ed781610ec1565b8114610ee257600080fd5b50565b600081359050610ef481610ece565b92915050565b600080600080600060a08688031215610f1657610f15610e86565b5b6000610f2488828901610eac565b9550506020610f3588828901610ee5565b9450506040610f4688828901610ee5565b9350506060610f5788828901610ee5565b9250506080610f6888828901610ee5565b9150509295509295909350565b600060208284031215610f8b57610f8a610e86565b5b6000610f9984828501610eac565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fcd82610fa2565b9050919050565b610fdd81610fc2565b82525050565b6000602082019050610ff86000830184610fd4565b92915050565b600061100982610fa2565b9050919050565b61101981610ffe565b811461102457600080fd5b50565b60008135905061103681611010565b92915050565b60006020828403121561105257611051610e86565b5b600061106084828501611027565b91505092915050565b61107281610e8b565b82525050565b600060208201905061108d6000830184611069565b92915050565b600082825260208201905092915050565b7f537461727420686f7572206d757374206265206265747765656e203020616e6460008201527f2032330000000000000000000000000000000000000000000000000000000000602082015250565b6000611100602383611093565b915061110b826110a4565b604082019050919050565b6000602082019050818103600083015261112f816110f3565b9050919050565b7f5374617274206d696e757465206d757374206265206265747765656e2030206160008201527f6e64203539000000000000000000000000000000000000000000000000000000602082015250565b6000611192602583611093565b915061119d82611136565b604082019050919050565b600060208201905081810360008301526111c181611185565b9050919050565b7f456e6420686f7572206d757374206265206265747765656e203020616e64203260008201527f3300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611224602183611093565b915061122f826111c8565b604082019050919050565b6000602082019050818103600083015261125381611217565b9050919050565b7f456e64206d696e757465206d757374206265206265747765656e203020616e6460008201527f2035390000000000000000000000000000000000000000000000000000000000602082015250565b60006112b6602383611093565b91506112c18261125a565b604082019050919050565b600060208201905081810360008301526112e5816112a9565b9050919050565b7f43616e27742072657175657374207061726b696e672073706f7420696e20746860008201527f6520706173742100000000000000000000000000000000000000000000000000602082015250565b6000611348602783611093565b9150611353826112ec565b604082019050919050565b600060208201905081810360008301526113778161133b565b9050919050565b7f4d757374206465706f736974206174206c656173742031204574680000000000600082015250565b60006113b4601b83611093565b91506113bf8261137e565b602082019050919050565b600060208201905081810360008301526113e3816113a7565b9050919050565b60008115159050919050565b6113ff816113ea565b811461140a57600080fd5b50565b60008151905061141c816113f6565b92915050565b60006020828403121561143857611437610e86565b5b60006114468482850161140d565b91505092915050565b7f5061726b696e672073706f7420697320756e617661696c61626c652100000000600082015250565b6000611485601c83611093565b91506114908261144f565b602082019050919050565b600060208201905081810360008301526114b481611478565b9050919050565b7f5061726b696e672073706f7420756e617661696c61626c65206174207468697360008201527f2074696d65210000000000000000000000000000000000000000000000000000602082015250565b6000611517602683611093565b9150611522826114bb565b604082019050919050565b600060208201905081810360008301526115468161150a565b9050919050565b60008151905061155c81611010565b92915050565b60006020828403121561157857611577610e86565b5b60006115868482850161154d565b91505092915050565b61159881610ffe565b82525050565b60006060820190506115b3600083018661158f565b6115c0602083018561158f565b6115cd6040830184611069565b949350505050565b7f4e6f7420656e6f75676820455448206465706f73697465640000000000000000600082015250565b600061160b601883611093565b9150611616826115d5565b602082019050919050565b6000602082019050818103600083015261163a816115fe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061167b82610e8b565b915061168683610e8b565b92508282101561169957611698611641565b5b828203905092915050565b600081905092915050565b50565b60006116bf6000836116a4565b91506116ca826116af565b600082019050919050565b60006116e0826116b2565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000611720601483611093565b915061172b826116ea565b602082019050919050565b6000602082019050818103600083015261174f81611713565b9050919050565b600061176182610e8b565b915061176c83610e8b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117a1576117a0611641565b5b828201905092915050565b6000815190506117bb81610ece565b92915050565b600080604083850312156117d8576117d7610e86565b5b60006117e6858286016117ac565b92505060206117f7858286016117ac565b9150509250929050565b60006020828403121561181757611816610e86565b5b6000611825848285016117ac565b91505092915050565b6000819050919050565b60006118438261182e565b915061184e8361182e565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561188957611888611641565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156118c1576118c0611641565b5b828203905092915050565b60006118d78261182e565b91506118e28361182e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561192157611920611641565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561195e5761195d611641565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561199b5761199a611641565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156119d8576119d7611641565b5b828202905092915050565b60006119ee8261182e565b91506119f98361182e565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615611a3457611a33611641565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615611a6c57611a6b611641565b5b828201905092915050565b6000611a8282610e8b565b9150611a8d83610e8b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611ac657611ac5611641565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611b0b82610e8b565b9150611b1683610e8b565b925082611b2657611b25611ad1565b5b828204905092915050565b6000611b3c82610e8b565b9150611b4783610e8b565b925082611b5757611b56611ad1565b5b828206905092915050565b6000611b6d8261182e565b9150611b788361182e565b925082611b8857611b87611ad1565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615611bc157611bc0611641565b5b82820590509291505056fea2646970667358221220d9fda3023926fd37fc942fc168dc6563b8933be56ca232237cf81f21879d10b164736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7948,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "current",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(DateTime)7937_storage"
      },
      {
        "astId": 7952,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "depositors",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7966,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DateTime)7937_storage": {
        "encoding": "inplace",
        "label": "struct RequestParkingSpotToken.DateTime",
        "members": [
          {
            "astId": 7926,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Year",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7928,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Month",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7930,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Day",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7932,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Hour",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7934,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Minute",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7936,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Second",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestedStartHour",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestedStartMinute",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestedEndHour",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "requestedEndMinute",
          "type": "uint8"
        }
      ],
      "name": "ActiveParkingSesion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "EndActiveParkingSesion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "EstimatedSessionCost",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EthWithdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeSessions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimeUnix",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTimeUnix",
          "type": "uint256"
        }
      ],
      "name": "calculateSessionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkIfParkingSessionOver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentParkingSpotOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getReservedParkingTimes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "removeActiveSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartMinute",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndMinute",
          "type": "uint8"
        }
      ],
      "name": "requestParkingSpotToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestedParkingTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartMinute",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndMinute",
          "type": "uint8"
        }
      ],
      "name": "reserveParkingSpotToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reservedParkingTimes",
      "outputs": [
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "returnParkingSpotToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sessionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sessionInProgress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tempReservedParkingTimes",
      "outputs": [
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testLoop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0773eabe1ffae0bd86699b305a1536b28342156b7c3850418f7914c06dcf34f1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "4741177",
    "logsBloom": "0x
    "blockHash": "0xda856cf22e4f4df1e921e55c0d4b220045c2cb5e4aa877edb3f881fa62953ff9",
    "transactionHash": "0x0773eabe1ffae0bd86699b305a1536b28342156b7c3850418f7914c06dcf34f1",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "4741177",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "27e05769d5f743e92471a28220b82ebb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestedStartHour\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestedStartMinute\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestedEndHour\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"requestedEndMinute\",\"type\":\"uint8\"}],\"name\":\"ActiveParkingSesion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"EndActiveParkingSesion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"EstimatedSessionCost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeSessions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimeUnix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimeUnix\",\"type\":\"uint256\"}],\"name\":\"calculateSessionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIfParkingSessionOver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentParkingSpotOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getReservedParkingTimes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeActiveSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartMinute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndMinute\",\"type\":\"uint8\"}],\"name\":\"requestParkingSpotToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestedParkingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartMinute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndMinute\",\"type\":\"uint8\"}],\"name\":\"reserveParkingSpotToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reservedParkingTimes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"returnParkingSpotToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sessionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sessionInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tempReservedParkingTimes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testLoop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequestParkingSpotToken.sol\":\"RequestParkingSpotToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/BokkyPooBahsDateTimeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.00 - Contract Instance\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\\n//\\n// GNU Lesser General Public License 3.0\\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\\n// ----------------------------------------------------------------------------\\n\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\ncontract BokkyPooBahsDateTimeContract {\\n    uint public constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint public constant SECONDS_PER_HOUR = 60 * 60;\\n    uint public constant SECONDS_PER_MINUTE = 60;\\n    int public constant OFFSET19700101 = 2440588;\\n\\n    uint public constant DOW_MON = 1;\\n    uint public constant DOW_TUE = 2;\\n    uint public constant DOW_WED = 3;\\n    uint public constant DOW_THU = 4;\\n    uint public constant DOW_FRI = 5;\\n    uint public constant DOW_SAT = 6;\\n    uint public constant DOW_SUN = 7;\\n\\n    function _now() public view returns (uint timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function _nowDateTime() public view returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n    function _daysFromDate(uint year, uint month, uint day) public pure returns (uint _days) {\\n        return BokkyPooBahsDateTimeLibrary._daysFromDate(year, month, day);\\n    }\\n    function _daysToDate(uint _days) public pure returns (uint year, uint month, uint day) {\\n        return BokkyPooBahsDateTimeLibrary._daysToDate(_days);\\n    }\\n    function timestampFromDate(uint year, uint month, uint day) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, day);\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(year, month, day, hour, minute, second);\\n    }\\n    function timestampToDate(uint timestamp) public pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n    }\\n    function timestampToDateTime(uint timestamp) public pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(timestamp);\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDate(year, month, day);\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDateTime(year, month, day, hour, minute, second);\\n    }\\n    function isLeapYear(uint timestamp) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary.isLeapYear(timestamp);\\n    }\\n    function _isLeapYear(uint year) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary._isLeapYear(year);\\n    }\\n    function isWeekDay(uint timestamp) public pure returns (bool weekDay) {\\n        weekDay = BokkyPooBahsDateTimeLibrary.isWeekDay(timestamp);\\n    }\\n    function isWeekEnd(uint timestamp) public pure returns (bool weekEnd) {\\n        weekEnd = BokkyPooBahsDateTimeLibrary.isWeekEnd(timestamp);\\n    }\\n\\n    function getDaysInMonth(uint timestamp) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary.getDaysInMonth(timestamp);\\n    }\\n    function _getDaysInMonth(uint year, uint month) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\\n    }\\n    function getDayOfWeek(uint timestamp) public pure returns (uint dayOfWeek) {\\n        dayOfWeek = BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp);\\n    }\\n\\n    function getYear(uint timestamp) public pure returns (uint year) {\\n        year = BokkyPooBahsDateTimeLibrary.getYear(timestamp);\\n    }\\n    function getMonth(uint timestamp) public pure returns (uint month) {\\n        month = BokkyPooBahsDateTimeLibrary.getMonth(timestamp);\\n    }\\n    function getDay(uint timestamp) public pure returns (uint day) {\\n        day = BokkyPooBahsDateTimeLibrary.getDay(timestamp);\\n    }\\n    function getHour(uint timestamp) public pure returns (uint hour) {\\n        hour = BokkyPooBahsDateTimeLibrary.getHour(timestamp);\\n    }\\n    function getMinute(uint timestamp) public pure returns (uint minute) {\\n        minute = BokkyPooBahsDateTimeLibrary.getMinute(timestamp);\\n    }\\n    function getSecond(uint timestamp) public pure returns (uint second) {\\n        second = BokkyPooBahsDateTimeLibrary.getSecond(timestamp);\\n    }\\n\\n    function addYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addYears(timestamp, _years);\\n    }\\n    function addMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMonths(timestamp, _months);\\n    }\\n    function addDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, _days);\\n    }\\n    function addHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addHours(timestamp, _hours);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMinutes(timestamp, _minutes);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addSeconds(timestamp, _seconds);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subYears(timestamp, _years);\\n    }\\n    function subMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMonths(timestamp, _months);\\n    }\\n    function subDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subDays(timestamp, _days);\\n    }\\n    function subHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subHours(timestamp, _hours);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMinutes(timestamp, _minutes);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subSeconds(timestamp, _seconds);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) public pure returns (uint _years) {\\n        _years = BokkyPooBahsDateTimeLibrary.diffYears(fromTimestamp, toTimestamp);\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) public pure returns (uint _months) {\\n        _months = BokkyPooBahsDateTimeLibrary.diffMonths(fromTimestamp, toTimestamp);\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) public pure returns (uint _days) {\\n        _days = BokkyPooBahsDateTimeLibrary.diffDays(fromTimestamp, toTimestamp);\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) public pure returns (uint _hours) {\\n        _hours = BokkyPooBahsDateTimeLibrary.diffHours(fromTimestamp, toTimestamp);\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) public pure returns (uint _minutes) {\\n        _minutes = BokkyPooBahsDateTimeLibrary.diffMinutes(fromTimestamp, toTimestamp);\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) public pure returns (uint _seconds) {\\n        _seconds = BokkyPooBahsDateTimeLibrary.diffSeconds(fromTimestamp, toTimestamp);\\n    }\\n}\",\"keccak256\":\"0xe9913c812a72dc0d88521026abc5a107b82028b536cb12b5c0a20ddcfbe766ca\",\"license\":\"MIT\"},\"contracts/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x6a972bde66695cafc06e4f6beabef5f5a9386196a62f611d5be2d2e5a3a4967f\",\"license\":\"MIT\"},\"contracts/RequestParkingSpotToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./BokkyPooBahsDateTimeContract.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface ParkingSpotAttributes {\\n    function checkSpotAvailability(uint) external view returns (bool);\\n    function checkSpotPermittedParkingStartTime(uint ) external view returns (uint8, uint8);\\n    function checkSpotPermittedParkingEndTime(uint ) external view returns (uint8, uint8);\\n    function checkParkingSpotTimezone(uint ) external view returns (uint8[2] memory);\\n    function spotInUse(uint) external view returns (bool);\\n    function setSpotInUse(uint, bool ) external;\\n    function pricePerHour(uint) external view returns (uint);\\n\\n}\\n\\ninterface ParkingSpotToken {\\n    function ownerOf(uint256) external returns (address);\\n    function safeTransferFrom(address,address,uint256) external;\\n    function safeTransferFromWithOwnerApprovals(address,address,uint256) external;\\n    function _parkingSpotOwners(uint) external view returns (address);\\n    function paymentAddress(uint) external view returns (address);\\n\\n}\\n\\n\\n\\ncontract RequestParkingSpotToken {\\nusing BokkyPooBahsDateTimeLibrary for *;\\n\\nevent EthDeposit(address user, uint256 amount);\\nevent EthWithdraw(address user, uint256 amount);\\nevent EstimatedSessionCost(uint256 tokenId, uint256 cost);\\nevent ActiveParkingSesion(uint256 tokenId, uint8 requestedStartHour, uint8 requestedStartMinute, uint8 requestedEndHour, uint8 requestedEndMinute);\\nevent EndActiveParkingSesion(uint256 tokenId);\\n\\n    struct DateTime {\\n        uint256 Year;\\n        uint256 Month; \\n        uint256 Day;\\n        uint256 Hour; \\n        uint256 Minute;\\n        uint256 Second;\\n    }\\n\\n    struct TimeSlots {\\n        address walletAddress;\\n        uint256 startTime;\\n        uint256 endTime; \\n    }\\n\\n    DateTime current = DateTime(0,0,0,0,0,0);\\n\\n    mapping(address=>uint256) public depositors;\\n    mapping(uint256=> address) public currentParkingSpotOwner;\\n    // mapping(uint256=>uint256[2]) public permittedParkingTimes;\\n    mapping(uint256=>uint256[2]) public requestedParkingTimes;\\n    mapping(address=>bool) public sessionInProgress;\\n    mapping(uint256=>uint256) public sessionCost;\\n    mapping(uint256=>TimeSlots) availableSlots;\\n    uint256[] public activeSessions;\\n    mapping(uint256=>TimeSlots[]) public reservedParkingTimes;\\n    mapping(uint256=>TimeSlots[]) public tempReservedParkingTimes;\\n\\n\\n    uint256 public testLoop;\\n\\n    AggregatorV3Interface internal ethUSDpriceFeed;\\n\\n    // //localhost:\\n    ParkingSpotAttributes constant psa = ParkingSpotAttributes(0x5FC8d32690cc91D4c39d9d3abcBD16989F875707);\\n    ParkingSpotToken constant pst = ParkingSpotToken(0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9);\\n    // Goerli:\\n    // ParkingSpotAttributes constant psa = ParkingSpotAttributes(0x0A0Bbb42636AB8C3516882519ADD39DF56dCc5A5);\\n    // ParkingSpotToken constant pst = ParkingSpotToken(0x7380e28aB1F6ED032671b085390194F07aBC2606);\\n\\n    // Payable address can receive Ether\\n    address payable public owner;\\n\\n    // Payable constructor can receive Ether\\n    // constructor() payable {\\n    //     owner = payable(msg.sender);\\n    //     ethUSDpriceFeed = AggregatorV3Interface(0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512);\\n    // }\\n\\n    constructor() payable {\\n        owner = payable(msg.sender);\\n        //localhost\\n        ethUSDpriceFeed = AggregatorV3Interface(0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512);\\n        //goerli\\n        // ethUSDpriceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\n    }\\n\\n    function deposit() public payable {\\n        depositors[msg.sender] += msg.value;\\n        emit EthDeposit(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 _amount) public {\\n        require(_amount <= depositors[msg.sender], \\\"Not enough ETH deposited\\\");\\n        depositors[msg.sender] -= _amount;\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n        require(sessionInProgress[msg.sender] == false, \\\"You cannot withdraw ETH while parking session in progress. Please wait until the session is completed, or end the session manually!\\\");\\n        emit EthWithdraw(msg.sender, _amount);\\n\\n    }\\n    \\n    function getCurrentDateTime () internal {\\n        (current.Year, current.Month, current.Day, current.Hour, current.Minute, current.Second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n\\n    function genericTimeFrameToCurrentUnixTime(uint8 _hour, uint8 _minute) internal returns (uint) {\\n        getCurrentDateTime();\\n       return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(current.Year, current.Month, current.Day, _hour, _minute, 0);\\n    }\\n\\n    function retrievePermittedParkingTimes(uint _tokenId) internal returns (uint256, uint256) {\\n        (uint8 permittedStartHour, uint8 permittedStartMinute) = psa.checkSpotPermittedParkingStartTime(_tokenId);\\n        (uint8 permittedEndHour, uint8 permittedEndMinute) = psa.checkSpotPermittedParkingEndTime(_tokenId);\\n\\n        uint permittedStartTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(permittedStartHour, permittedStartMinute), _tokenId);\\n        uint permittedEndTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(permittedEndHour, permittedEndMinute), _tokenId);\\n        // permittedStartTimeUnix = accountForTimezone(permittedStartTimeUnix, _tokenId);\\n        // permittedEndTimeUnix  =  accountForTimezone(permittedEndTimeUnix, _tokenId);\\n\\n        // permittedParkingTimes[_tokenId] = [permittedStartTimeUnix, permittedEndTimeUnix];\\n\\n        return (permittedStartTimeUnix, permittedEndTimeUnix);\\n    }\\n\\n    function setIsNegative(bool _isNegative) internal {\\n        _isNegative = true;\\n    }\\n\\n    function setSessionInProgress(address _address, bool _status) internal {\\n        sessionInProgress[_address] = _status;\\n    }\\n\\n    // function getStartTimeLength(uint256 _tokenId) public view returns (uint256) {\\n    //     return availableSlots[_tokenId].startTime.length;\\n    // }\\n\\n    // function getEndTimeLength(uint256 _tokenId) public view returns (uint256) {\\n    //     return availableSlots[_tokenId].endTime.length;\\n    // }\\n\\n    function getReservedParkingTimes(uint256 _tokenId, uint256 _index) public view returns (address, uint256, uint256) {\\n        return (reservedParkingTimes[_tokenId][_index].walletAddress,reservedParkingTimes[_tokenId][_index].startTime, reservedParkingTimes[_tokenId][_index].endTime );\\n    }\\n\\n    function accountForTimezone(uint _unixTime, uint _tokenId) internal returns (uint256) {\\n        uint8[2] memory timezoneAttributes  = (psa.checkParkingSpotTimezone(_tokenId));    \\n        uint256 offset = (timezoneAttributes[1] * 3600);\\n        uint256 newTime;\\n        if (timezoneAttributes[0] == 1) {\\n         newTime = (_unixTime - offset);\\n\\n        } else {\\n        newTime = (_unixTime + offset);\\n        }\\n\\n        return newTime;\\n\\n    }\\n\\n\\n    function calculateSessionCost(uint256 _tokenId, uint256 _startTimeUnix, uint256 _endTimeUnix) public returns (uint256)  {\\n        uint256 hourlyRateUSD = (psa.pricePerHour(_tokenId) * (10**8));\\n        int256 ethUSDPrice = getLatestPrice();\\n        uint256 hourlyRateGwei = (1000000000000000000 / (uint256(ethUSDPrice) / hourlyRateUSD));   \\n        uint256 gweiBySecond = ((hourlyRateGwei / 3600) / 10**2);\\n\\n        uint256 duration = (_endTimeUnix - _startTimeUnix);\\n\\n        emit EstimatedSessionCost(_tokenId, duration * gweiBySecond);\\n\\n        return duration * gweiBySecond;\\n    }\\n\\n    function requestParkingSpotToken(uint256 _tokenId, uint8 _requestedStartHour, uint8 _requestedStartMinute, uint8 _requestedEndHour, uint8 _requestedEndMinute) public {\\n        require(_requestedStartHour <= 23, \\\"Start hour must be between 0 and 23\\\");\\n        require(_requestedStartMinute <= 59, \\\"Start minute must be between 0 and 59\\\");\\n        require(_requestedEndHour <= 23, \\\"End hour must be between 0 and 23\\\");\\n        require(_requestedEndMinute <= 59, \\\"End minute must be between 0 and 59\\\");\\n        require(psa.spotInUse(_tokenId) == false, \\\"Parking spot currently in use!\\\");\\n\\n        (uint256 parkingSpotStartTime, uint256 parkingSpotEndTime) = retrievePermittedParkingTimes(_tokenId);\\n\\n        uint256 requestedStartTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedStartHour,_requestedStartMinute), _tokenId);\\n        uint256 requestedEndTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedEndHour,_requestedEndMinute), _tokenId);\\n        // require(requestedStartTimeUnix > block.timestamp, \\\"Can't request parking spot in the past!\\\");\\n        // require(depositors[msg.sender] >= 1000000000000000000, \\\"Must deposit at least 1 Eth\\\");\\n        require(depositors[msg.sender] >= 10000000000000000, \\\"Must deposit at least 0.01 Eth\\\");\\n        uint256 calculatedSessionCost = calculateSessionCost(_tokenId,requestedStartTimeUnix,requestedEndTimeUnix);\\n        require(depositors[msg.sender] >= calculatedSessionCost , \\\"You don't have enough ETH deposited to pay for your requested duration!\\\" );\\n        require(psa.checkSpotAvailability(_tokenId) == true, \\\"Parking spot is unavailable!\\\");\\n        require(requestedStartTimeUnix > parkingSpotStartTime && requestedEndTimeUnix < parkingSpotEndTime , \\\"Parking spot unavailable at this time!\\\");\\n\\n       address currentOwner = pst.ownerOf(_tokenId);\\n        currentParkingSpotOwner[_tokenId] = currentOwner;\\n        pst.safeTransferFrom(currentOwner, msg.sender, _tokenId);\\n        psa.setSpotInUse(_tokenId, true);\\n        requestedParkingTimes[_tokenId] = [requestedStartTimeUnix, requestedEndTimeUnix ];\\n        setSessionInProgress(msg.sender, true);\\n        sessionCost[_tokenId] = calculatedSessionCost;\\n        activeSessions.push(_tokenId);\\n\\n       TimeSlots memory tempTimeSlot ;\\n       tempTimeSlot.walletAddress = msg.sender;\\n       tempTimeSlot.startTime = requestedStartTimeUnix;\\n       tempTimeSlot.endTime = requestedEndTimeUnix;\\n\\n        reservedParkingTimes[_tokenId].push(tempTimeSlot);\\n      \\n\\n\\n\\n        emit ActiveParkingSesion(_tokenId, _requestedStartHour, _requestedStartMinute, _requestedEndHour, _requestedEndMinute);\\n    }\\n\\n    // function checkAvailableSpots(uint256 _tokenId, uint256 _requestedStartTime, uint256 _requestedEndTime) public {\\n        \\n    //     uint256 [] memory spotStartTimes = availableSlots[_tokenId].startTime;\\n    //     uint256 [] memory spotEndTimes = availableSlots[_tokenId].endTime;\\n\\n    //     uint256 startTimeLength = getStartTimeLength(_tokenId);\\n\\n    //     for (uint i = 0; i < startTimeLength; i++) {\\n    //         if (_requestedStartTime > spotEndTimes[i] && _requestedEndTime < spotStartTimes[i+1]) {\\n    //             testLoop = 1111;\\n    //         } else {\\n    //             testLoop = 2222;\\n    //         }\\n    //     }\\n\\n    // }\\n\\n    function slotInMiddleForOther(uint256 _tokenId, address caller, uint256 requestedStartTime, uint256 requestedEndTime, uint timeSlotsLength, uint _index) internal returns (bool) {\\n                                delete tempReservedParkingTimes[_tokenId];\\n\\n                                console.log(\\\"index: %i\\\", _index);\\n\\n                                TimeSlots memory tempTimeSlot;\\n\\n                                for (uint x = 0; x <= _index; x++) {\\n                                tempTimeSlot.walletAddress = reservedParkingTimes[_tokenId][x].walletAddress;\\n                                tempTimeSlot.startTime = reservedParkingTimes[_tokenId][x].startTime;\\n                                tempTimeSlot.endTime = reservedParkingTimes[_tokenId][x].endTime;\\n\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                                }\\n\\n                        // uint [2] memory reservedParkingMapping0 = [tempReservedParkingTimes[_tokenId][0].startTime, tempReservedParkingTimes[_tokenId][0].endTime];\\n                        // uint [2] memory reservedParkingMapping1 = [tempReservedParkingTimes[_tokenId][1].startTime, tempReservedParkingTimes[_tokenId][1].endTime];\\n\\n                        // console.log(\\\"tempReservedParkingTimesMapping at idx 0 startTime: %i endTime %i\\\", reservedParkingMapping0[0],reservedParkingMapping0[1]);\\n                        // console.log(\\\"tempReservedParkingTimesMapping at idx 1 startTime: %i endTime %i\\\", reservedParkingMapping1[0],reservedParkingMapping1[1]);\\n                                \\n\\n                                tempTimeSlot.walletAddress = caller;\\n                                tempTimeSlot.startTime = requestedStartTime;\\n                                tempTimeSlot.endTime = requestedEndTime;\\n\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                        // uint [2] memory reservedParkingMapping2 = [tempReservedParkingTimes[_tokenId][2].startTime, tempReservedParkingTimes[_tokenId][2].endTime];\\n\\n                        // console.log(\\\"tempReservedParkingTimesMapping at idx 2 startTime: %i endTime %i\\\", reservedParkingMapping2[0],reservedParkingMapping0[1]);\\n\\n\\n                                uint j = _index + 1;\\n                                for (j; j < timeSlotsLength; j++ ) {\\n                                \\n                                tempTimeSlot.walletAddress = reservedParkingTimes[_tokenId][j].walletAddress;\\n                                tempTimeSlot.startTime = reservedParkingTimes[_tokenId][j].startTime;\\n                                tempTimeSlot.endTime = reservedParkingTimes[_tokenId][j].endTime;\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                                 }\\n\\n                        // uint [2] memory reservedParkingMapping3 = [tempReservedParkingTimes[_tokenId][3].startTime, tempReservedParkingTimes[_tokenId][3].endTime];\\n                        // uint [2] memory reservedParkingMapping4 = [tempReservedParkingTimes[_tokenId][4].startTime, tempReservedParkingTimes[_tokenId][4].endTime];\\n\\n                        // console.log(\\\"tempReservedParkingTimesMapping at idx 3 startTime: %i endTime %i\\\", reservedParkingMapping3[0],reservedParkingMapping3[1]);\\n                        // console.log(\\\"tempReservedParkingTimesMapping at idx 4 startTime: %i endTime %i\\\", reservedParkingMapping4[0],reservedParkingMapping4[1]);\\n                                 \\n\\n                                reservedParkingTimes[_tokenId] = tempReservedParkingTimes[_tokenId];\\n                                return true;\\n\\n    }\\n\\n    function slotInMiddleForZero(uint256 _tokenId, address caller, uint256 requestedStartTime, uint256 requestedEndTime, uint timeSlotsLength) internal returns (bool) {\\n                                delete tempReservedParkingTimes[_tokenId];\\n\\n                                TimeSlots memory tempTimeSlot;\\n                                 \\n                                tempTimeSlot.walletAddress = reservedParkingTimes[_tokenId][0].walletAddress;\\n                                tempTimeSlot.startTime = reservedParkingTimes[_tokenId][0].startTime;\\n                                tempTimeSlot.endTime = reservedParkingTimes[_tokenId][0].endTime;\\n\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                                tempTimeSlot.walletAddress = caller;\\n                                tempTimeSlot.startTime = requestedStartTime;\\n                                tempTimeSlot.endTime = requestedEndTime;\\n\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                                \\n                                for (uint j = 1; j < timeSlotsLength; j++ ) {\\n                                \\n                                tempTimeSlot.walletAddress = reservedParkingTimes[_tokenId][j].walletAddress;\\n                                tempTimeSlot.startTime = reservedParkingTimes[_tokenId][j].startTime;\\n                                tempTimeSlot.endTime = reservedParkingTimes[_tokenId][j].endTime;\\n                                tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n                                 }\\n\\n                                reservedParkingTimes[_tokenId] = tempReservedParkingTimes[_tokenId];\\n                                return true;\\n\\n    }\\n\\n\\n    function slotTimeSlotinMiddle(uint256 _tokenId, address caller, uint256 requestedStartTime, uint256 requestedEndTime, uint timeSlotsLength) internal returns (bool) {\\n                uint i = 0;\\n                // uint currentIdxPlusOne = 0;\\n            console.log(\\\"timeslotslength: %i, i: %i\\\", timeSlotsLength, i);\\n            for (i; i < timeSlotsLength; i++) {\\n            console.log(\\\" in loop timeslotslength: %i, i: %i\\\", timeSlotsLength, i);\\n                    uint overflowCheck = i;\\n                    overflowCheck++;\\n                        console.log(\\\" in loop ++ timeslotslength: %i, i: %i, overflowcheck: %i\\\", timeSlotsLength, i, overflowCheck);\\n                        uint reservedEndTime = reservedParkingTimes[_tokenId][i].endTime;\\n                        uint reservedStartTime = reservedParkingTimes[_tokenId][overflowCheck].startTime;\\n                        \\n                        // console.log(\\\"before first if statement (line 250): requestedStartTime: %i, reservedParkingTimes[i]endTime: %i, requestedEndTime: %i, reservedParkingTimes[i+1]startTime: %i\\\",requestedStartTime, reservedEndTime, requestedEndTime,  reservedStartTime  );\\n                        console.log(\\\"before first if statement (line 250): requestedStartTime: %i, requestedEndTime: %i\\\",requestedStartTime, requestedEndTime );\\n                        console.log(\\\"before first if statement (line 250): reservedEndTime: %i, reservedStartTime: %i\\\",reservedEndTime, reservedStartTime );\\n\\n                        // currentIdxPlusOne = i+1;\\n                        uint [2] memory reservedParkingMapping0 = [reservedParkingTimes[_tokenId][0].startTime, reservedParkingTimes[_tokenId][0].endTime];\\n                        uint [2] memory reservedParkingMapping1 = [reservedParkingTimes[_tokenId][1].startTime, reservedParkingTimes[_tokenId][1].endTime];\\n\\n                        console.log(\\\"reservedParkingMapping at idx 0 startTime: %i endTime %i\\\", reservedParkingMapping0[0],reservedParkingMapping0[1]);\\n                        console.log(\\\"reservedParkingMapping at idx 1 startTime: %i endTime %i\\\", reservedParkingMapping1[0],reservedParkingMapping1[1]);\\n                        console.log(\\\"i: %i\\\", i);\\n\\n                     if (requestedStartTime > reservedParkingTimes[_tokenId][i].endTime) {\\n                        console.log(\\\"overflow check: %i, timeSlotsLength: %i\\\", overflowCheck, timeSlotsLength);\\n                        console.log(\\\"i: %i\\\", i);\\n\\n                        if (overflowCheck > timeSlotsLength) {\\n                        revert(\\\"append to the end fam\\\");\\n                        } else {\\n                            if(requestedEndTime < reservedParkingTimes[_tokenId][overflowCheck].startTime) {\\n                                if  (i == 0) {\\n                                 slotInMiddleForZero(_tokenId, caller, requestedStartTime, requestedEndTime, timeSlotsLength);\\n                                 return true;\\n                            } else if (i > 0) {\\n                                slotInMiddleForOther(_tokenId, caller, requestedStartTime, requestedEndTime, timeSlotsLength, i);\\n                                return true;\\n                            } else {\\n                                revert(\\\"something went wrong\\\");\\n                            }\\n\\n\\n\\n                                \\n                            }\\n\\n                            continue;\\n                        }\\n\\n                            console.log(\\\"i: %i\\\", i);\\n\\n                            continue;\\n                 } else if (requestedStartTime > reservedParkingTimes[_tokenId][i].endTime && i++ > timeSlotsLength ) {\\n                        revert(\\\"append to the end fam\\\");\\n                 } else {\\n                    revert(\\\"idk mayn\\\");\\n                 } \\n\\n                        \\n                 \\n                 revert(\\\"If ur reading this, it means ur on to something\\\");\\n\\n            }\\n\\n            revert(\\\"down here man\\\");\\n\\n  \\n\\n\\n     }\\n\\n\\n    // function slotTimeSlotinMiddle(uint256 _tokenId, address caller, uint256 requestedStartTime, uint256 requestedEndTime, uint timeSlotsLength) internal {\\n    //                     uint i = 0;\\n    //                 for (i; i < timeSlotsLength; i++) {\\n    //             if (reservedParkingTimes[_tokenId][i].endTime < requestedStartTime) {\\n\\n    //                 if (i+1 >= timeSlotsLength) {\\n    //                     revert(\\\"got em\\\");\\n    //             // TimeSlots memory tempTimeSlot;\\n    //             // tempTimeSlot.walletAddress = caller;\\n    //             // tempTimeSlot.startTime = requestedStartTime;\\n    //             // tempTimeSlot.endTime = requestedEndTime;\\n    //             // reservedParkingTimes[_tokenId].push(tempTimeSlot);\\n    //                 } else if (reservedParkingTimes[_tokenId][i+1].startTime > requestedEndTime) {\\n    //                     delete tempReservedParkingTimes[_tokenId];\\n                    \\n    //                 // int tempTimeSlotsArrayLength = int(timeSlotsLength)+1;\\n    //                 TimeSlots memory tempTimeSlot ;\\n\\n    //                 tempTimeSlot.walletAddress = caller;\\n    //                 tempTimeSlot.startTime = requestedStartTime;\\n    //                 tempTimeSlot.endTime = requestedEndTime;\\n\\n    //                 if  (i == 0) {\\n\\n    //                 TimeSlots memory holderTimeSlot;\\n                    \\n    //                 holderTimeSlot.walletAddress = reservedParkingTimes[_tokenId][i].walletAddress;\\n    //                 holderTimeSlot.startTime = reservedParkingTimes[_tokenId][i].startTime;\\n    //                 holderTimeSlot.endTime = reservedParkingTimes[_tokenId][i].endTime;\\n                    \\n    //                 tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n    //                 uint j = i+1;\\n    //                 for (j; j < timeSlotsLength; j++ ) {\\n    //                 TimeSlots memory holderTimeSlot;\\n                    \\n    //                 holderTimeSlot.walletAddress = reservedParkingTimes[_tokenId][j].walletAddress;\\n    //                 holderTimeSlot.startTime = reservedParkingTimes[_tokenId][j].startTime;\\n    //                 holderTimeSlot.endTime = reservedParkingTimes[_tokenId][j].endTime;\\n    //                 }\\n\\n\\n \\n    //                 } else {\\n    //                     revert(\\\"no bueno\\\");\\n    //                 }\\n\\n    //                 // for (uint x = 0; x <= i; x++) {\\n    //                 // TimeSlots memory holderTimeSlot;\\n                    \\n    //                 // holderTimeSlot.walletAddress = reservedParkingTimes[_tokenId][x].walletAddress;\\n    //                 // holderTimeSlot.startTime = reservedParkingTimes[_tokenId][x].startTime;\\n    //                 // holderTimeSlot.endTime = reservedParkingTimes[_tokenId][x].endTime;\\n\\n    //                 //     tempReservedParkingTimes[_tokenId].push(holderTimeSlot);\\n\\n    //                 // }\\n\\n    //                 //     tempReservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n    //                 //     uint y = i+1;\\n\\n    //                 //   for (y; y <= timeSlotsLength; y++) {\\n\\n    //                 //     TimeSlots memory holderTimeSlot;\\n                    \\n    //                 // holderTimeSlot.walletAddress = reservedParkingTimes[_tokenId][y].walletAddress;\\n    //                 // holderTimeSlot.startTime = reservedParkingTimes[_tokenId][y].startTime;\\n    //                 // holderTimeSlot.endTime = reservedParkingTimes[_tokenId][y].endTime;\\n    //                 //     // tempTimeSlotArray.push(reservedParkingTimes[_tokenId][y]);\\n    //                 //     tempReservedParkingTimes[_tokenId].push(holderTimeSlot);\\n    //                 // }\\n\\n    //                 // reservedParkingTimes[_tokenId] = tempReservedParkingTimes[_tokenId];\\n\\n    //                 } else {\\n\\n    //             // TimeSlots memory tempTimeSlot ;\\n    //             // tempTimeSlot.walletAddress = caller;\\n    //             // tempTimeSlot.startTime = requestedStartTime;\\n    //             // tempTimeSlot.endTime = requestedEndTime;\\n    //             // reservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n    //             revert(\\\"teehee\\\");\\n                        \\n    //                 }\\n    //             } \\n    //             else {\\n    //                 revert(\\\"Nah bruh\\\");\\n    //             }\\n\\n\\n    //         }\\n\\n    //         revert(\\\"I be flossin'\\\");\\n\\n    // }\\n\\n    function reserveParkingSpotToken(uint256 _tokenId, uint8 _requestedStartHour, uint8 _requestedStartMinute, uint8 _requestedEndHour, uint8 _requestedEndMinute) public {\\n        require(_requestedStartHour <= 23, \\\"Start hour must be between 0 and 23\\\");\\n        require(_requestedStartMinute <= 59, \\\"Start minute must be between 0 and 59\\\");\\n        require(_requestedEndHour <= 23, \\\"End hour must be between 0 and 23\\\");\\n        require(_requestedEndMinute <= 59, \\\"End minute must be between 0 and 59\\\");\\n     \\n        (uint256 parkingSpotStartTime, uint256 parkingSpotEndTime) = retrievePermittedParkingTimes(_tokenId);\\n        uint256 requestedStartTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedStartHour,_requestedStartMinute), _tokenId);\\n        uint256 requestedEndTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedEndHour,_requestedEndMinute), _tokenId);\\n\\n        // requestedStartTimeUnix += _requestedStartFromCurrentDateSeconds;\\n        // requestedEndTimeUnix += _requestedEndFromCurrentDateSeconds;\\n\\n        uint timeSlotsLength = reservedParkingTimes[_tokenId].length;\\n\\n        if (timeSlotsLength == 0) {\\n\\n        TimeSlots memory tempTimeSlot ;\\n        tempTimeSlot.walletAddress = msg.sender;\\n        tempTimeSlot.startTime = requestedStartTimeUnix;\\n        tempTimeSlot.endTime = requestedEndTimeUnix;\\n        reservedParkingTimes[_tokenId].push(tempTimeSlot);\\n\\n        } else if (timeSlotsLength == 1) {\\n            if (reservedParkingTimes[_tokenId][0].endTime < requestedStartTimeUnix) {\\n                TimeSlots memory tempTimeSlot ;\\n                tempTimeSlot.walletAddress = msg.sender;\\n                tempTimeSlot.startTime = requestedStartTimeUnix;\\n                tempTimeSlot.endTime = requestedEndTimeUnix;\\n                reservedParkingTimes[_tokenId].push(tempTimeSlot);\\n            } else {\\n                revert(\\\"Time Slot unavailable, please try again\\\");\\n            }\\n        } else {\\n            slotTimeSlotinMiddle(_tokenId, msg.sender, requestedStartTimeUnix, requestedEndTimeUnix, timeSlotsLength);\\n        }\\n\\n    }\\n\\n\\n    // function endParkingSession(uint256 _tokenId) public returns (bool) {\\n    //     require(msg.sender == pst.ownerOf(_tokenId);)\\n\\n    // }\\n\\n    function returnParkingSpotToken(uint256 _tokenId) public returns (bool) {\\n\\n        uint256 parkingEndtimeUnix = requestedParkingTimes[_tokenId][1];\\n\\n        if (block.timestamp >= parkingEndtimeUnix) {\\n            address currentUser = pst.ownerOf(_tokenId);\\n                pst.safeTransferFrom(currentUser, pst._parkingSpotOwners(_tokenId), _tokenId);\\n                psa.setSpotInUse(_tokenId, false);\\n                setSessionInProgress(currentUser, false);\\n                depositors[currentUser] -= sessionCost[_tokenId];\\n                payable(pst.paymentAddress(_tokenId)).transfer(sessionCost[_tokenId]);\\n                return true;\\n            } else {\\n                revert(\\\"Session is not over!\\\");\\n                \\n    //         } \\n    //     } else if (parkingEndtimeUnix == 0) {\\n    //             address currentUser = pst.ownerOf(_tokenId);\\n    //             pst.safeTransferFrom(currentUser, parkingSpotOwner[_tokenId], _tokenId);\\n    //             psa.setSpotInUse(_tokenId, false);\\n    //             return true;\\n    //         } else {\\n    //             revert(\\\"Session has is not over!\\\");\\n    // }\\n\\n        revert(\\\"Session is not over!\\\");\\n\\n            }\\n\\n    emit EndActiveParkingSesion(_tokenId);\\n\\n}\\n\\nfunction getLatestPrice() public view returns (int) {\\n        (\\n            /*uint80 roundID*/,\\n            int price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = ethUSDpriceFeed.latestRoundData();\\n        return price;\\n    }\\n\\nfunction removeActiveSession(uint _index) public {\\n        require(_index < activeSessions.length, \\\"index out of bound\\\");\\n\\n        for (uint i = _index; i < activeSessions.length - 1; i++) {\\n            activeSessions[i] = activeSessions[i + 1];\\n        }\\n        activeSessions.pop();\\n    }\\n\\n    function checkIfParkingSessionOver() external {\\n        for (uint i = 0; i < activeSessions.length; i++) {\\n        uint256 parkingEndtimeUnix = requestedParkingTimes[activeSessions[i]][1];\\n\\n        if (block.timestamp > parkingEndtimeUnix) {\\n            returnParkingSpotToken(activeSessions[i]);\\n            removeActiveSession(i);\\n        }\\n\\n\\n        }\\n\\n    }\\n\\n\\n}\\n\\n\",\"keccak256\":\"0xd51c74062fd8b2e07e4cbd22d22b3ed7b7af01691ce78355dabf0fdbc265968e\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525060008082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155505033601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073e7f1725e7734ce288f8367e1bb143e90bb3f0512601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061540d8061011b6000396000f3fe60806040526004361061011f5760003560e01c80638cd443c5116100a0578063c6e5a41911610064578063c6e5a41914610425578063d0e30db014610462578063d21828551461046c578063dde85429146104a9578063eed75f6d146104d25761011f565b80638cd443c5146103285780638da5cb5b146103675780638e15f473146103925780639e698c5f146103bd578063b919310c146103e65761011f565b80632e1a7d4d116100e75780632e1a7d4d1461021b5780632f9b0ed01461024457806340eb2f051461026f5780636312c05d146102ac578063727bc20a146102e95761011f565b8063088c05eb14610124578063153a06d31461016157806323a85b02146101785780632b425ab3146101a15780632bebbe4d146101de575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190613a05565b61050f565b6040516101589190613a4d565b60405180910390f35b34801561016d57600080fd5b5061017661052f565b005b34801561018457600080fd5b5061019f600480360381019061019a9190613ad7565b6105da565b005b3480156101ad57600080fd5b506101c860048036038101906101c39190613b52565b610dec565b6040516101d59190613a4d565b60405180910390f35b3480156101ea57600080fd5b5061020560048036038101906102009190613b7f565b6111ec565b6040516102129190613bce565b60405180910390f35b34801561022757600080fd5b50610242600480360381019061023d9190613b52565b611214565b005b34801561025057600080fd5b50610259611468565b6040516102669190613bce565b60405180910390f35b34801561027b57600080fd5b5061029660048036038101906102919190613b52565b61146e565b6040516102a39190613bf8565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190613c13565b6114a1565b6040516102e09190613bce565b60405180910390f35b3480156102f557600080fd5b50610310600480360381019061030b9190613b7f565b6115fe565b60405161031f93929190613c66565b60405180910390f35b34801561033457600080fd5b5061034f600480360381019061034a9190613b7f565b6116d5565b60405161035e93929190613c66565b60405180910390f35b34801561037357600080fd5b5061037c61173c565b6040516103899190613cbe565b60405180910390f35b34801561039e57600080fd5b506103a7611762565b6040516103b49190613cf2565b60405180910390f35b3480156103c957600080fd5b506103e460048036038101906103df9190613ad7565b611803565b005b3480156103f257600080fd5b5061040d60048036038101906104089190613b7f565b611c0d565b60405161041c93929190613c66565b60405180910390f35b34801561043157600080fd5b5061044c60048036038101906104479190613b52565b611c74565b6040516104599190613bce565b60405180910390f35b61046a611c98565b005b34801561047857600080fd5b50610493600480360381019061048e9190613b52565b611d29565b6040516104a09190613bce565b60405180910390f35b3480156104b557600080fd5b506104d060048036038101906104cb9190613b52565b611d41565b005b3480156104de57600080fd5b506104f960048036038101906104f49190613a05565b611e33565b6040516105069190613bce565b60405180910390f35b60096020528060005260406000206000915054906101000a900460ff1681565b60005b600c805490508110156105d757600060086000600c848154811061055957610558613d0d565b5b9060005260206000200154815260200190815260200160002060016002811061058557610584613d0d565b5b01549050804211156105c3576105b8600c83815481106105a8576105a7613d0d565b5b9060005260206000200154610dec565b506105c282611d41565b5b5080806105cf90613d6b565b915050610532565b50565b60178460ff161115610621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061890613e37565b60405180910390fd5b603b8360ff161115610668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065f90613ec9565b60405180910390fd5b60178260ff1611156106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a690613f5b565b60405180910390fd5b603b8160ff1611156106f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ed90613fed565b60405180910390fd5b60001515735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff166354e3e36e876040518263ffffffff1660e01b81526004016107479190613bce565b602060405180830381865afa158015610764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107889190614039565b1515146107ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c1906140b2565b60405180910390fd5b6000806107d687611e4b565b9150915060006107ef6107e98888611fb5565b89611fea565b905060006108066108008787611fb5565b8a611fea565b9050662386f26fc10000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610891576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108889061411e565b60405180910390fd5b600061089e8a84846114a1565b905080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610922576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610919906141d6565b60405180910390fd5b60011515735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff1663e91926f18c6040518263ffffffff1660e01b81526004016109739190613bce565b602060405180830381865afa158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b49190614039565b1515146109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ed90614242565b60405180910390fd5b8483118015610a0457508382105b610a43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3a906142d4565b60405180910390fd5b600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e8c6040518263ffffffff1660e01b8152600401610a929190613bce565b6020604051808303816000875af1158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad59190614309565b905080600760008d815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e82338e6040518463ffffffff1660e01b8152600401610b7a93929190614336565b600060405180830381600087803b158015610b9457600080fd5b505af1158015610ba8573d6000803e3d6000fd5b50505050735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16633ee036878c60016040518363ffffffff1660e01b8152600401610bfc92919061436d565b600060405180830381600087803b158015610c1657600080fd5b505af1158015610c2a573d6000803e3d6000fd5b50505050604051806040016040528085815260200184815250600860008d8152602001908152602001600020906002610c649291906137bf565b50610c70336001612101565b81600a60008d815260200190815260200160002081905550600c8b9080600181540180825580915050600190039060005260206000200160009091909190915055610cb96137ff565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508481602001818152505083816040018181525050600d60008d815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550507f29566464b948eb793ccbbcc498430edbeb10ad3930c3918b23cddd4064a68b838c8c8c8c8c604051610dd69594939291906143a5565b60405180910390a1505050505050505050505050565b60008060086000848152602001908152602001600020600160028110610e1557610e14613d0d565b5b015490508042106111ac57600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610e6f9190613bce565b6020604051808303816000875af1158015610e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb29190614309565b905073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e8273dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663c55fd06b886040518263ffffffff1660e01b8152600401610f329190613bce565b602060405180830381865afa158015610f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f739190614309565b876040518463ffffffff1660e01b8152600401610f9293929190614336565b600060405180830381600087803b158015610fac57600080fd5b505af1158015610fc0573d6000803e3d6000fd5b50505050735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16633ee036878560006040518363ffffffff1660e01b815260040161101492919061436d565b600060405180830381600087803b15801561102e57600080fd5b505af1158015611042573d6000803e3d6000fd5b50505050611051816000612101565b600a600085815260200190815260200160002054600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110b391906143f8565b9250508190555073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166371053abf856040518263ffffffff1660e01b81526004016111079190613bce565b602060405180830381865afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111489190614309565b73ffffffffffffffffffffffffffffffffffffffff166108fc600a6000878152602001908152602001600020549081150290604051600060405180830381858888f193505050501580156111a0573d6000803e3d6000fd5b506001925050506111e7565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de90614478565b60405180910390fd5b919050565b6008602052816000526040600020816002811061120857600080fd5b01600091509150505481565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115611296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128d906144e4565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112e591906143f8565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161131290614535565b60006040518083038185875af1925050503d806000811461134f576040519150601f19603f3d011682016040523d82523d6000602084013e611354565b606091505b5050905080611398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138f90614596565b60405180910390fd5b60001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461142b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114229061469a565b60405180910390fd5b7f109ee141209f6239a23d90572cc3e0474bd55208d82e0b5ad378d8ee7d9223ea338360405161145c9291906146ba565b60405180910390a15050565b600f5481565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806305f5e100735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff1663828f74b1876040518263ffffffff1660e01b81526004016114f69190613bce565b602060405180830381865afa158015611513573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153791906146f8565b6115419190614725565b9050600061154d611762565b90506000828261155d91906147ae565b670de0b6b3a764000061157091906147ae565b905060006064610e108361158491906147ae565b61158e91906147ae565b90506000878761159e91906143f8565b90507fcf373849aa984dfd76504d4f7b03864086718e62d57440024002847b16783a818983836115ce9190614725565b6040516115dc9291906147df565b60405180910390a181816115f09190614725565b955050505050509392505050565b6000806000600d6000868152602001908152602001600020848154811061162857611627613d0d565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d6000878152602001908152602001600020858154811061167f5761167e613d0d565b5b906000526020600020906003020160010154600d600088815260200190815260200160002086815481106116b6576116b5613d0d565b5b9060005260206000209060030201600201549250925092509250925092565b600d60205281600052604060002081815481106116f157600080fd5b9060005260206000209060030201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156117d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f69190614876565b5050509150508091505090565b60178460ff16111561184a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184190613e37565b60405180910390fd5b603b8360ff161115611891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188890613ec9565b60405180910390fd5b60178260ff1611156118d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cf90613f5b565b60405180910390fd5b603b8160ff16111561191f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191690613fed565b60405180910390fd5b60008061192b87611e4b565b91509150600061194461193e8888611fb5565b89611fea565b9050600061195b6119558787611fb5565b8a611fea565b90506000600d60008b81526020019081526020016000208054905090506000811415611a75576119896137ff565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505082816040018181525050600d60008c815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505050611c01565b6001811415611bf15782600d60008c8152602001908152602001600020600081548110611aa557611aa4613d0d565b5b9060005260206000209060030201600201541015611bb157611ac56137ff565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505082816040018181525050600d60008c815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505050611bec565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be390614963565b60405180910390fd5b611c00565b611bfe8a3385858561215c565b505b5b50505050505050505050565b600e6020528160005260406000208181548110611c2957600080fd5b9060005260206000209060030201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b600c8181548110611c8457600080fd5b906000526020600020016000915090505481565b34600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ce79190614983565b925050819055507f7c4b3a8770ca0dfa675823896daf246993d41e6c18b0e130407888511d56f53a3334604051611d1f9291906146ba565b60405180910390a1565b600a6020528060005260406000206000915090505481565b600c805490508110611d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7f90614a25565b60405180910390fd5b60008190505b6001600c80549050611da091906143f8565b811015611e0757600c600182611db69190614983565b81548110611dc757611dc6613d0d565b5b9060005260206000200154600c8281548110611de657611de5613d0d565b5b90600052602060002001819055508080611dff90613d6b565b915050611d8e565b50600c805480611e1a57611e19614a45565b5b6001900381819060005260206000200160009055905550565b60066020528060005260406000206000915090505481565b600080600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff1663ccc5ffe9866040518263ffffffff1660e01b8152600401611e9e9190613bce565b6040805180830381865afa158015611eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ede9190614a89565b91509150600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16631a1089c2886040518263ffffffff1660e01b8152600401611f329190613bce565b6040805180830381865afa158015611f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f729190614a89565b915091506000611f8b611f858686611fb5565b89611fea565b90506000611fa2611f9c8585611fb5565b8a611fea565b9050818197509750505050505050915091565b6000611fbf61278a565b611fe260008001546000600101546000600201548660ff168660ff1660006127dd565b905092915050565b600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16635fe20047846040518263ffffffff1660e01b815260040161203a9190613bce565b6040805180830381865afa158015612056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207a9190614c10565b90506000610e108260016002811061209557612094613d0d565b5b602002015160ff166120a79190614c4b565b61ffff16905060006001836000600281106120c5576120c4613d0d565b5b602002015160ff1614156120e65781866120df91906143f8565b90506120f5565b81866120f29190614983565b90505b80935050505092915050565b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080600090506121a36040518060400160405280601a81526020017f74696d65736c6f74736c656e6774683a2025692c20693a202569000000000000815250848361283e565b5b82811015612746576121cf6040518060600160405280602381526020016153b560239139848361283e565b600081905080806121df90613d6b565b91505061220660405180606001604052806039815260200161537c603991398584846128dd565b6000600d60008a8152602001908152602001600020838154811061222d5761222c613d0d565b5b90600052602060002090600302016002015490506000600d60008b8152602001908152602001600020838154811061226857612267613d0d565b5b906000526020600020906003020160010154905061229f6040518060800160405280605281526020016152cb60529139898961283e565b6122c260405180608001604052806050815260200161527b60509139838361283e565b60006040518060400160405280600d60008e81526020019081526020016000206000815481106122f5576122f4613d0d565b5b9060005260206000209060030201600101548152602001600d60008e815260200190815260200160002060008154811061233257612331613d0d565b5b906000526020600020906003020160020154815250905060006040518060400160405280600d60008f815260200190815260200160002060018154811061237c5761237b613d0d565b5b9060005260206000209060030201600101548152602001600d60008f81526020019081526020016000206001815481106123b9576123b8613d0d565b5b90600052602060002090600302016002015481525090506124236040518060600160405280603881526020016152436038913983600060028110612400576123ff613d0d565b5b60200201518460016002811061241957612418613d0d565b5b602002015161283e565b61247660405180606001604052806038815260200161531d603891398260006002811061245357612452613d0d565b5b60200201518360016002811061246c5761246b613d0d565b5b602002015161283e565b6124b56040518060400160405280600581526020017f693a2025690000000000000000000000000000000000000000000000000000008152508761297f565b600d60008d815260200190815260200160002086815481106124da576124d9613d0d565b5b9060005260206000209060030201600201548a11156126685761251660405180606001604052806027815260200161535560279139868a61283e565b6125556040518060400160405280600581526020017f693a2025690000000000000000000000000000000000000000000000000000008152508761297f565b87851115612598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258f90614cd3565b60405180910390fd5b600d60008d815260200190815260200160002085815481106125bd576125bc613d0d565b5b90600052602060002090600302016001015489101561265e5760008614156125fc576125ec8c8c8c8c8c612a1b565b5060019650505050505050612781565b6000861115612623576126138c8c8c8c8c8b612ee3565b5060019650505050505050612781565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265590614d3f565b60405180910390fd5b5050505050612733565b600d60008d8152602001908152602001600020868154811061268d5761268c613d0d565b5b9060005260206000209060030201600201548a1180156126b857508786806126b490613d6b565b9750115b156126f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ef90614cd3565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272a90614dab565b60405180910390fd5b808061273e90613d6b565b9150506121a4565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277890614e17565b60405180910390fd5b95945050505050565b61279342613411565b6000800160008060010160008060020160008060030160008060040160008060050160008c919050558b919050558a91905055899190505588919050558791905055505050505050565b600081603c846127ed9190614725565b610e10866127fb9190614725565b6201518061280a8b8b8b613498565b6128149190614725565b61281e9190614983565b6128289190614983565b6128329190614983565b90509695505050505050565b6128d883838360405160240161285693929190614eae565b6040516020818303038152906040527f969cdd03000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506135f7565b505050565b612979848484846040516024016128f79493929190614eec565b6040516020818303038152906040527f08ee5666000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506135f7565b50505050565b612a178282604051602401612995929190614f38565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506135f7565b5050565b6000600e60008781526020019081526020016000206000612a3c9190613836565b612a446137ff565b600d6000888152602001908152602001600020600081548110612a6a57612a69613d0d565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d6000888152602001908152602001600020600081548110612af957612af8613d0d565b5b906000526020600020906003020160010154816020018181525050600d6000888152602001908152602001600020600081548110612b3a57612b39613d0d565b5b906000526020600020906003020160020154816040018181525050600e600088815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505085816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508481602001818152505083816040018181525050600e600088815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506000600190505b83811015612e9f57600d60008981526020019081526020016000208181548110612d0957612d08613d0d565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d60008981526020019081526020016000208181548110612d9757612d96613d0d565b5b906000526020600020906003020160010154826020018181525050600d60008981526020019081526020016000208181548110612dd757612dd6613d0d565b5b906000526020600020906003020160020154826040018181525050600e600089815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550508080612e9790613d6b565b915050612cdc565b50600e6000888152602001908152602001600020600d6000898152602001908152602001600020908054612ed492919061385a565b50600191505095945050505050565b6000600e60008881526020019081526020016000206000612f049190613836565b612f436040518060400160405280600981526020017f696e6465783a20256900000000000000000000000000000000000000000000008152508361297f565b612f4b6137ff565b60005b83811161311057600d60008a81526020019081526020016000208181548110612f7a57612f79613d0d565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d60008a8152602001908152602001600020818154811061300857613007613d0d565b5b906000526020600020906003020160010154826020018181525050600d60008a8152602001908152602001600020818154811061304857613047613d0d565b5b906000526020600020906003020160020154826040018181525050600e60008a815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050808061310890613d6b565b915050612f4e565b5086816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508581602001818152505084816040018181525050600e600089815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505060006001846132069190614983565b90505b848110156133cc57600d60008a8152602001908152602001600020818154811061323657613235613d0d565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d60008a815260200190815260200160002081815481106132c4576132c3613d0d565b5b906000526020600020906003020160010154826020018181525050600d60008a8152602001908152602001600020818154811061330457613303613d0d565b5b906000526020600020906003020160020154826040018181525050600e60008a815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505080806133c490613d6b565b915050613209565b600e60008a8152602001908152602001600020600d60008b815260200190815260200160002090805461340092919061385a565b506001925050509695505050505050565b600080600080600080613431620151808861342c91906147ae565b613620565b8096508197508298505050506000620151808861344e9190614f68565b9050610e108161345e91906147ae565b9350610e108161346e9190614f68565b9050603c8161347d91906147ae565b9250603c8161348c9190614f68565b91505091939550919395565b60006107b28410156134a957600080fd5b600084905060008490506000849050600062253d8c60046064600c600e876134d19190614f99565b6134db919061502d565b611324886134e99190615097565b6134f39190615097565b6134fd919061502d565b6003613509919061512b565b613513919061502d565b600c80600c600e886135259190614f99565b61352f919061502d565b613539919061512b565b6002876135469190614f99565b6135509190614f99565b61016f61355d919061512b565b613567919061502d565b6004600c600e886135789190614f99565b613582919061502d565b6112c0896135909190615097565b61359a9190615097565b6105b56135a7919061512b565b6135b1919061502d565b617d4b866135bf9190614f99565b6135c99190615097565b6135d39190615097565b6135dd9190614f99565b6135e79190614f99565b9050809450505050509392505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080600080849050600062253d8c62010bd98361363e9190615097565b6136489190615097565b9050600062023ab182600461365d919061512b565b613667919061502d565b9050600460038262023ab161367c919061512b565b6136869190615097565b613690919061502d565b8261369b9190614f99565b9150600062164b096001846136b09190615097565b610fa06136bd919061512b565b6136c7919061502d565b9050601f6004826105b56136db919061512b565b6136e5919061502d565b846136f09190614f99565b6136fa9190615097565b9250600061098f84605061370e919061512b565b613718919061502d565b9050600060508261098f61372c919061512b565b613736919061502d565b856137419190614f99565b9050600b82613750919061502d565b945084600c61375f919061512b565b60028361376c9190615097565b6137769190614f99565b915084836031866137879190614f99565b6064613793919061512b565b61379d9190615097565b6137a79190615097565b92508298508197508096505050505050509193909250565b82600281019282156137ee579160200282015b828111156137ed5782518255916020019190600101906137d2565b5b5090506137fb919061392d565b5090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b5080546000825560030290600052602060002090810190613857919061394a565b50565b82805482825590600052602060002090600302810192821561391c5760005260206000209160030282015b8281111561391b5782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820154816001015560028201548160020155505091600301919060030190613885565b5b509050613929919061394a565b5090565b5b8082111561394657600081600090555060010161392e565b5090565b5b8082111561399457600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090555060030161394b565b5090565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006139d2826139a7565b9050919050565b6139e2816139c7565b81146139ed57600080fd5b50565b6000813590506139ff816139d9565b92915050565b600060208284031215613a1b57613a1a6139a2565b5b6000613a29848285016139f0565b91505092915050565b60008115159050919050565b613a4781613a32565b82525050565b6000602082019050613a626000830184613a3e565b92915050565b6000819050919050565b613a7b81613a68565b8114613a8657600080fd5b50565b600081359050613a9881613a72565b92915050565b600060ff82169050919050565b613ab481613a9e565b8114613abf57600080fd5b50565b600081359050613ad181613aab565b92915050565b600080600080600060a08688031215613af357613af26139a2565b5b6000613b0188828901613a89565b9550506020613b1288828901613ac2565b9450506040613b2388828901613ac2565b9350506060613b3488828901613ac2565b9250506080613b4588828901613ac2565b9150509295509295909350565b600060208284031215613b6857613b676139a2565b5b6000613b7684828501613a89565b91505092915050565b60008060408385031215613b9657613b956139a2565b5b6000613ba485828601613a89565b9250506020613bb585828601613a89565b9150509250929050565b613bc881613a68565b82525050565b6000602082019050613be36000830184613bbf565b92915050565b613bf2816139c7565b82525050565b6000602082019050613c0d6000830184613be9565b92915050565b600080600060608486031215613c2c57613c2b6139a2565b5b6000613c3a86828701613a89565b9350506020613c4b86828701613a89565b9250506040613c5c86828701613a89565b9150509250925092565b6000606082019050613c7b6000830186613be9565b613c886020830185613bbf565b613c956040830184613bbf565b949350505050565b6000613ca8826139a7565b9050919050565b613cb881613c9d565b82525050565b6000602082019050613cd36000830184613caf565b92915050565b6000819050919050565b613cec81613cd9565b82525050565b6000602082019050613d076000830184613ce3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613d7682613a68565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613da957613da8613d3c565b5b600182019050919050565b600082825260208201905092915050565b7f537461727420686f7572206d757374206265206265747765656e203020616e6460008201527f2032330000000000000000000000000000000000000000000000000000000000602082015250565b6000613e21602383613db4565b9150613e2c82613dc5565b604082019050919050565b60006020820190508181036000830152613e5081613e14565b9050919050565b7f5374617274206d696e757465206d757374206265206265747765656e2030206160008201527f6e64203539000000000000000000000000000000000000000000000000000000602082015250565b6000613eb3602583613db4565b9150613ebe82613e57565b604082019050919050565b60006020820190508181036000830152613ee281613ea6565b9050919050565b7f456e6420686f7572206d757374206265206265747765656e203020616e64203260008201527f3300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613f45602183613db4565b9150613f5082613ee9565b604082019050919050565b60006020820190508181036000830152613f7481613f38565b9050919050565b7f456e64206d696e757465206d757374206265206265747765656e203020616e6460008201527f2035390000000000000000000000000000000000000000000000000000000000602082015250565b6000613fd7602383613db4565b9150613fe282613f7b565b604082019050919050565b6000602082019050818103600083015261400681613fca565b9050919050565b61401681613a32565b811461402157600080fd5b50565b6000815190506140338161400d565b92915050565b60006020828403121561404f5761404e6139a2565b5b600061405d84828501614024565b91505092915050565b7f5061726b696e672073706f742063757272656e746c7920696e20757365210000600082015250565b600061409c601e83613db4565b91506140a782614066565b602082019050919050565b600060208201905081810360008301526140cb8161408f565b9050919050565b7f4d757374206465706f736974206174206c6561737420302e3031204574680000600082015250565b6000614108601e83613db4565b9150614113826140d2565b602082019050919050565b60006020820190508181036000830152614137816140fb565b9050919050565b7f596f7520646f6e2774206861766520656e6f75676820455448206465706f736960008201527f74656420746f2070617920666f7220796f75722072657175657374656420647560208201527f726174696f6e2100000000000000000000000000000000000000000000000000604082015250565b60006141c0604783613db4565b91506141cb8261413e565b606082019050919050565b600060208201905081810360008301526141ef816141b3565b9050919050565b7f5061726b696e672073706f7420697320756e617661696c61626c652100000000600082015250565b600061422c601c83613db4565b9150614237826141f6565b602082019050919050565b6000602082019050818103600083015261425b8161421f565b9050919050565b7f5061726b696e672073706f7420756e617661696c61626c65206174207468697360008201527f2074696d65210000000000000000000000000000000000000000000000000000602082015250565b60006142be602683613db4565b91506142c982614262565b604082019050919050565b600060208201905081810360008301526142ed816142b1565b9050919050565b600081519050614303816139d9565b92915050565b60006020828403121561431f5761431e6139a2565b5b600061432d848285016142f4565b91505092915050565b600060608201905061434b6000830186613be9565b6143586020830185613be9565b6143656040830184613bbf565b949350505050565b60006040820190506143826000830185613bbf565b61438f6020830184613a3e565b9392505050565b61439f81613a9e565b82525050565b600060a0820190506143ba6000830188613bbf565b6143c76020830187614396565b6143d46040830186614396565b6143e16060830185614396565b6143ee6080830184614396565b9695505050505050565b600061440382613a68565b915061440e83613a68565b92508282101561442157614420613d3c565b5b828203905092915050565b7f53657373696f6e206973206e6f74206f76657221000000000000000000000000600082015250565b6000614462601483613db4565b915061446d8261442c565b602082019050919050565b6000602082019050818103600083015261449181614455565b9050919050565b7f4e6f7420656e6f75676820455448206465706f73697465640000000000000000600082015250565b60006144ce601883613db4565b91506144d982614498565b602082019050919050565b600060208201905081810360008301526144fd816144c1565b9050919050565b600081905092915050565b50565b600061451f600083614504565b915061452a8261450f565b600082019050919050565b600061454082614512565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000614580601483613db4565b915061458b8261454a565b602082019050919050565b600060208201905081810360008301526145af81614573565b9050919050565b7f596f752063616e6e6f7420776974686472617720455448207768696c6520706160008201527f726b696e672073657373696f6e20696e2070726f67726573732e20506c65617360208201527f65207761697420756e74696c207468652073657373696f6e20697320636f6d7060408201527f6c657465642c206f7220656e64207468652073657373696f6e206d616e75616c60608201527f6c79210000000000000000000000000000000000000000000000000000000000608082015250565b6000614684608383613db4565b915061468f826145b6565b60a082019050919050565b600060208201905081810360008301526146b381614677565b9050919050565b60006040820190506146cf6000830185613be9565b6146dc6020830184613bbf565b9392505050565b6000815190506146f281613a72565b92915050565b60006020828403121561470e5761470d6139a2565b5b600061471c848285016146e3565b91505092915050565b600061473082613a68565b915061473b83613a68565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561477457614773613d3c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006147b982613a68565b91506147c483613a68565b9250826147d4576147d361477f565b5b828204905092915050565b60006040820190506147f46000830185613bbf565b6148016020830184613bbf565b9392505050565b600069ffffffffffffffffffff82169050919050565b61482781614808565b811461483257600080fd5b50565b6000815190506148448161481e565b92915050565b61485381613cd9565b811461485e57600080fd5b50565b6000815190506148708161484a565b92915050565b600080600080600060a08688031215614892576148916139a2565b5b60006148a088828901614835565b95505060206148b188828901614861565b94505060406148c2888289016146e3565b93505060606148d3888289016146e3565b92505060806148e488828901614835565b9150509295509295909350565b7f54696d6520536c6f7420756e617661696c61626c652c20706c6561736520747260008201527f7920616761696e00000000000000000000000000000000000000000000000000602082015250565b600061494d602783613db4565b9150614958826148f1565b604082019050919050565b6000602082019050818103600083015261497c81614940565b9050919050565b600061498e82613a68565b915061499983613a68565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156149ce576149cd613d3c565b5b828201905092915050565b7f696e646578206f7574206f6620626f756e640000000000000000000000000000600082015250565b6000614a0f601283613db4565b9150614a1a826149d9565b602082019050919050565b60006020820190508181036000830152614a3e81614a02565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081519050614a8381613aab565b92915050565b60008060408385031215614aa057614a9f6139a2565b5b6000614aae85828601614a74565b9250506020614abf85828601614a74565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614b1782614ace565b810181811067ffffffffffffffff82111715614b3657614b35614adf565b5b80604052505050565b6000614b49613998565b9050614b558282614b0e565b919050565b600067ffffffffffffffff821115614b7557614b74614adf565b5b602082029050919050565b600080fd5b6000614b98614b9384614b5a565b614b3f565b90508060208402830185811115614bb257614bb1614b80565b5b835b81811015614bdb5780614bc78882614a74565b845260208401935050602081019050614bb4565b5050509392505050565b600082601f830112614bfa57614bf9614ac9565b5b6002614c07848285614b85565b91505092915050565b600060408284031215614c2657614c256139a2565b5b6000614c3484828501614be5565b91505092915050565b600061ffff82169050919050565b6000614c5682614c3d565b9150614c6183614c3d565b92508161ffff0483118215151615614c7c57614c7b613d3c565b5b828202905092915050565b7f617070656e6420746f2074686520656e642066616d0000000000000000000000600082015250565b6000614cbd601583613db4565b9150614cc882614c87565b602082019050919050565b60006020820190508181036000830152614cec81614cb0565b9050919050565b7f736f6d657468696e672077656e742077726f6e67000000000000000000000000600082015250565b6000614d29601483613db4565b9150614d3482614cf3565b602082019050919050565b60006020820190508181036000830152614d5881614d1c565b9050919050565b7f69646b206d61796e000000000000000000000000000000000000000000000000600082015250565b6000614d95600883613db4565b9150614da082614d5f565b602082019050919050565b60006020820190508181036000830152614dc481614d88565b9050919050565b7f646f776e2068657265206d616e00000000000000000000000000000000000000600082015250565b6000614e01600d83613db4565b9150614e0c82614dcb565b602082019050919050565b60006020820190508181036000830152614e3081614df4565b9050919050565b600081519050919050565b60005b83811015614e60578082015181840152602081019050614e45565b83811115614e6f576000848401525b50505050565b6000614e8082614e37565b614e8a8185613db4565b9350614e9a818560208601614e42565b614ea381614ace565b840191505092915050565b60006060820190508181036000830152614ec88186614e75565b9050614ed76020830185613bbf565b614ee46040830184613bbf565b949350505050565b60006080820190508181036000830152614f068187614e75565b9050614f156020830186613bbf565b614f226040830185613bbf565b614f2f6060830184613bbf565b95945050505050565b60006040820190508181036000830152614f528185614e75565b9050614f616020830184613bbf565b9392505050565b6000614f7382613a68565b9150614f7e83613a68565b925082614f8e57614f8d61477f565b5b828206905092915050565b6000614fa482613cd9565b9150614faf83613cd9565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615614fea57614fe9613d3c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561502257615021613d3c565b5b828203905092915050565b600061503882613cd9565b915061504383613cd9565b9250826150535761505261477f565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561508c5761508b613d3c565b5b828205905092915050565b60006150a282613cd9565b91506150ad83613cd9565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156150e8576150e7613d3c565b5b817f80000000000000000000000000000000000000000000000000000000000000000383126000831216156151205761511f613d3c565b5b828201905092915050565b600061513682613cd9565b915061514183613cd9565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156151805761517f613d3c565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156151bd576151bc613d3c565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156151fa576151f9613d3c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561523757615236613d3c565b5b82820290509291505056fe72657365727665645061726b696e674d617070696e6720617420696478203020737461727454696d653a20256920656e6454696d652025696265666f72652066697273742069662073746174656d656e7420286c696e6520323530293a207265736572766564456e6454696d653a2025692c207265736572766564537461727454696d653a2025696265666f72652066697273742069662073746174656d656e7420286c696e6520323530293a20726571756573746564537461727454696d653a2025692c20726571756573746564456e6454696d653a20256972657365727665645061726b696e674d617070696e6720617420696478203120737461727454696d653a20256920656e6454696d652025696f766572666c6f7720636865636b3a2025692c2074696d65536c6f74734c656e6774683a20256920696e206c6f6f70202b2b2074696d65736c6f74736c656e6774683a2025692c20693a2025692c206f766572666c6f77636865636b3a20256920696e206c6f6f702074696d65736c6f74736c656e6774683a2025692c20693a202569a2646970667358221220e76b734abd3168e5842287773d56cc111b29f15b3a8f4d2d257f12602124694564736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c80638cd443c5116100a0578063c6e5a41911610064578063c6e5a41914610425578063d0e30db014610462578063d21828551461046c578063dde85429146104a9578063eed75f6d146104d25761011f565b80638cd443c5146103285780638da5cb5b146103675780638e15f473146103925780639e698c5f146103bd578063b919310c146103e65761011f565b80632e1a7d4d116100e75780632e1a7d4d1461021b5780632f9b0ed01461024457806340eb2f051461026f5780636312c05d146102ac578063727bc20a146102e95761011f565b8063088c05eb14610124578063153a06d31461016157806323a85b02146101785780632b425ab3146101a15780632bebbe4d146101de575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190613a05565b61050f565b6040516101589190613a4d565b60405180910390f35b34801561016d57600080fd5b5061017661052f565b005b34801561018457600080fd5b5061019f600480360381019061019a9190613ad7565b6105da565b005b3480156101ad57600080fd5b506101c860048036038101906101c39190613b52565b610dec565b6040516101d59190613a4d565b60405180910390f35b3480156101ea57600080fd5b5061020560048036038101906102009190613b7f565b6111ec565b6040516102129190613bce565b60405180910390f35b34801561022757600080fd5b50610242600480360381019061023d9190613b52565b611214565b005b34801561025057600080fd5b50610259611468565b6040516102669190613bce565b60405180910390f35b34801561027b57600080fd5b5061029660048036038101906102919190613b52565b61146e565b6040516102a39190613bf8565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190613c13565b6114a1565b6040516102e09190613bce565b60405180910390f35b3480156102f557600080fd5b50610310600480360381019061030b9190613b7f565b6115fe565b60405161031f93929190613c66565b60405180910390f35b34801561033457600080fd5b5061034f600480360381019061034a9190613b7f565b6116d5565b60405161035e93929190613c66565b60405180910390f35b34801561037357600080fd5b5061037c61173c565b6040516103899190613cbe565b60405180910390f35b34801561039e57600080fd5b506103a7611762565b6040516103b49190613cf2565b60405180910390f35b3480156103c957600080fd5b506103e460048036038101906103df9190613ad7565b611803565b005b3480156103f257600080fd5b5061040d60048036038101906104089190613b7f565b611c0d565b60405161041c93929190613c66565b60405180910390f35b34801561043157600080fd5b5061044c60048036038101906104479190613b52565b611c74565b6040516104599190613bce565b60405180910390f35b61046a611c98565b005b34801561047857600080fd5b50610493600480360381019061048e9190613b52565b611d29565b6040516104a09190613bce565b60405180910390f35b3480156104b557600080fd5b506104d060048036038101906104cb9190613b52565b611d41565b005b3480156104de57600080fd5b506104f960048036038101906104f49190613a05565b611e33565b6040516105069190613bce565b60405180910390f35b60096020528060005260406000206000915054906101000a900460ff1681565b60005b600c805490508110156105d757600060086000600c848154811061055957610558613d0d565b5b9060005260206000200154815260200190815260200160002060016002811061058557610584613d0d565b5b01549050804211156105c3576105b8600c83815481106105a8576105a7613d0d565b5b9060005260206000200154610dec565b506105c282611d41565b5b5080806105cf90613d6b565b915050610532565b50565b60178460ff161115610621576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061890613e37565b60405180910390fd5b603b8360ff161115610668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065f90613ec9565b60405180910390fd5b60178260ff1611156106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a690613f5b565b60405180910390fd5b603b8160ff1611156106f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ed90613fed565b60405180910390fd5b60001515735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff166354e3e36e876040518263ffffffff1660e01b81526004016107479190613bce565b602060405180830381865afa158015610764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107889190614039565b1515146107ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c1906140b2565b60405180910390fd5b6000806107d687611e4b565b9150915060006107ef6107e98888611fb5565b89611fea565b905060006108066108008787611fb5565b8a611fea565b9050662386f26fc10000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610891576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108889061411e565b60405180910390fd5b600061089e8a84846114a1565b905080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610922576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610919906141d6565b60405180910390fd5b60011515735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff1663e91926f18c6040518263ffffffff1660e01b81526004016109739190613bce565b602060405180830381865afa158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b49190614039565b1515146109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ed90614242565b60405180910390fd5b8483118015610a0457508382105b610a43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3a906142d4565b60405180910390fd5b600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e8c6040518263ffffffff1660e01b8152600401610a929190613bce565b6020604051808303816000875af1158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad59190614309565b905080600760008d815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e82338e6040518463ffffffff1660e01b8152600401610b7a93929190614336565b600060405180830381600087803b158015610b9457600080fd5b505af1158015610ba8573d6000803e3d6000fd5b50505050735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16633ee036878c60016040518363ffffffff1660e01b8152600401610bfc92919061436d565b600060405180830381600087803b158015610c1657600080fd5b505af1158015610c2a573d6000803e3d6000fd5b50505050604051806040016040528085815260200184815250600860008d8152602001908152602001600020906002610c649291906137bf565b50610c70336001612101565b81600a60008d815260200190815260200160002081905550600c8b9080600181540180825580915050600190039060005260206000200160009091909190915055610cb96137ff565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508481602001818152505083816040018181525050600d60008d815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550507f29566464b948eb793ccbbcc498430edbeb10ad3930c3918b23cddd4064a68b838c8c8c8c8c604051610dd69594939291906143a5565b60405180910390a1505050505050505050505050565b60008060086000848152602001908152602001600020600160028110610e1557610e14613d0d565b5b015490508042106111ac57600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610e6f9190613bce565b6020604051808303816000875af1158015610e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb29190614309565b905073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e8273dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663c55fd06b886040518263ffffffff1660e01b8152600401610f329190613bce565b602060405180830381865afa158015610f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f739190614309565b876040518463ffffffff1660e01b8152600401610f9293929190614336565b600060405180830381600087803b158015610fac57600080fd5b505af1158015610fc0573d6000803e3d6000fd5b50505050735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16633ee036878560006040518363ffffffff1660e01b815260040161101492919061436d565b600060405180830381600087803b15801561102e57600080fd5b505af1158015611042573d6000803e3d6000fd5b50505050611051816000612101565b600a600085815260200190815260200160002054600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110b391906143f8565b9250508190555073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166371053abf856040518263ffffffff1660e01b81526004016111079190613bce565b602060405180830381865afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111489190614309565b73ffffffffffffffffffffffffffffffffffffffff166108fc600a6000878152602001908152602001600020549081150290604051600060405180830381858888f193505050501580156111a0573d6000803e3d6000fd5b506001925050506111e7565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de90614478565b60405180910390fd5b919050565b6008602052816000526040600020816002811061120857600080fd5b01600091509150505481565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115611296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128d906144e4565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112e591906143f8565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161131290614535565b60006040518083038185875af1925050503d806000811461134f576040519150601f19603f3d011682016040523d82523d6000602084013e611354565b606091505b5050905080611398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138f90614596565b60405180910390fd5b60001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461142b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114229061469a565b60405180910390fd5b7f109ee141209f6239a23d90572cc3e0474bd55208d82e0b5ad378d8ee7d9223ea338360405161145c9291906146ba565b60405180910390a15050565b600f5481565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806305f5e100735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff1663828f74b1876040518263ffffffff1660e01b81526004016114f69190613bce565b602060405180830381865afa158015611513573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153791906146f8565b6115419190614725565b9050600061154d611762565b90506000828261155d91906147ae565b670de0b6b3a764000061157091906147ae565b905060006064610e108361158491906147ae565b61158e91906147ae565b90506000878761159e91906143f8565b90507fcf373849aa984dfd76504d4f7b03864086718e62d57440024002847b16783a818983836115ce9190614725565b6040516115dc9291906147df565b60405180910390a181816115f09190614725565b955050505050509392505050565b6000806000600d6000868152602001908152602001600020848154811061162857611627613d0d565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d6000878152602001908152602001600020858154811061167f5761167e613d0d565b5b906000526020600020906003020160010154600d600088815260200190815260200160002086815481106116b6576116b5613d0d565b5b9060005260206000209060030201600201549250925092509250925092565b600d60205281600052604060002081815481106116f157600080fd5b9060005260206000209060030201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156117d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f69190614876565b5050509150508091505090565b60178460ff16111561184a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184190613e37565b60405180910390fd5b603b8360ff161115611891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188890613ec9565b60405180910390fd5b60178260ff1611156118d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cf90613f5b565b60405180910390fd5b603b8160ff16111561191f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191690613fed565b60405180910390fd5b60008061192b87611e4b565b91509150600061194461193e8888611fb5565b89611fea565b9050600061195b6119558787611fb5565b8a611fea565b90506000600d60008b81526020019081526020016000208054905090506000811415611a75576119896137ff565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505082816040018181525050600d60008c815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505050611c01565b6001811415611bf15782600d60008c8152602001908152602001600020600081548110611aa557611aa4613d0d565b5b9060005260206000209060030201600201541015611bb157611ac56137ff565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381602001818152505082816040018181525050600d60008c815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505050611bec565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be390614963565b60405180910390fd5b611c00565b611bfe8a3385858561215c565b505b5b50505050505050505050565b600e6020528160005260406000208181548110611c2957600080fd5b9060005260206000209060030201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b600c8181548110611c8457600080fd5b906000526020600020016000915090505481565b34600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ce79190614983565b925050819055507f7c4b3a8770ca0dfa675823896daf246993d41e6c18b0e130407888511d56f53a3334604051611d1f9291906146ba565b60405180910390a1565b600a6020528060005260406000206000915090505481565b600c805490508110611d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7f90614a25565b60405180910390fd5b60008190505b6001600c80549050611da091906143f8565b811015611e0757600c600182611db69190614983565b81548110611dc757611dc6613d0d565b5b9060005260206000200154600c8281548110611de657611de5613d0d565b5b90600052602060002001819055508080611dff90613d6b565b915050611d8e565b50600c805480611e1a57611e19614a45565b5b6001900381819060005260206000200160009055905550565b60066020528060005260406000206000915090505481565b600080600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff1663ccc5ffe9866040518263ffffffff1660e01b8152600401611e9e9190613bce565b6040805180830381865afa158015611eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ede9190614a89565b91509150600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16631a1089c2886040518263ffffffff1660e01b8152600401611f329190613bce565b6040805180830381865afa158015611f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f729190614a89565b915091506000611f8b611f858686611fb5565b89611fea565b90506000611fa2611f9c8585611fb5565b8a611fea565b9050818197509750505050505050915091565b6000611fbf61278a565b611fe260008001546000600101546000600201548660ff168660ff1660006127dd565b905092915050565b600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16635fe20047846040518263ffffffff1660e01b815260040161203a9190613bce565b6040805180830381865afa158015612056573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207a9190614c10565b90506000610e108260016002811061209557612094613d0d565b5b602002015160ff166120a79190614c4b565b61ffff16905060006001836000600281106120c5576120c4613d0d565b5b602002015160ff1614156120e65781866120df91906143f8565b90506120f5565b81866120f29190614983565b90505b80935050505092915050565b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080600090506121a36040518060400160405280601a81526020017f74696d65736c6f74736c656e6774683a2025692c20693a202569000000000000815250848361283e565b5b82811015612746576121cf6040518060600160405280602381526020016153b560239139848361283e565b600081905080806121df90613d6b565b91505061220660405180606001604052806039815260200161537c603991398584846128dd565b6000600d60008a8152602001908152602001600020838154811061222d5761222c613d0d565b5b90600052602060002090600302016002015490506000600d60008b8152602001908152602001600020838154811061226857612267613d0d565b5b906000526020600020906003020160010154905061229f6040518060800160405280605281526020016152cb60529139898961283e565b6122c260405180608001604052806050815260200161527b60509139838361283e565b60006040518060400160405280600d60008e81526020019081526020016000206000815481106122f5576122f4613d0d565b5b9060005260206000209060030201600101548152602001600d60008e815260200190815260200160002060008154811061233257612331613d0d565b5b906000526020600020906003020160020154815250905060006040518060400160405280600d60008f815260200190815260200160002060018154811061237c5761237b613d0d565b5b9060005260206000209060030201600101548152602001600d60008f81526020019081526020016000206001815481106123b9576123b8613d0d565b5b90600052602060002090600302016002015481525090506124236040518060600160405280603881526020016152436038913983600060028110612400576123ff613d0d565b5b60200201518460016002811061241957612418613d0d565b5b602002015161283e565b61247660405180606001604052806038815260200161531d603891398260006002811061245357612452613d0d565b5b60200201518360016002811061246c5761246b613d0d565b5b602002015161283e565b6124b56040518060400160405280600581526020017f693a2025690000000000000000000000000000000000000000000000000000008152508761297f565b600d60008d815260200190815260200160002086815481106124da576124d9613d0d565b5b9060005260206000209060030201600201548a11156126685761251660405180606001604052806027815260200161535560279139868a61283e565b6125556040518060400160405280600581526020017f693a2025690000000000000000000000000000000000000000000000000000008152508761297f565b87851115612598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258f90614cd3565b60405180910390fd5b600d60008d815260200190815260200160002085815481106125bd576125bc613d0d565b5b90600052602060002090600302016001015489101561265e5760008614156125fc576125ec8c8c8c8c8c612a1b565b5060019650505050505050612781565b6000861115612623576126138c8c8c8c8c8b612ee3565b5060019650505050505050612781565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265590614d3f565b60405180910390fd5b5050505050612733565b600d60008d8152602001908152602001600020868154811061268d5761268c613d0d565b5b9060005260206000209060030201600201548a1180156126b857508786806126b490613d6b565b9750115b156126f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ef90614cd3565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272a90614dab565b60405180910390fd5b808061273e90613d6b565b9150506121a4565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277890614e17565b60405180910390fd5b95945050505050565b61279342613411565b6000800160008060010160008060020160008060030160008060040160008060050160008c919050558b919050558a91905055899190505588919050558791905055505050505050565b600081603c846127ed9190614725565b610e10866127fb9190614725565b6201518061280a8b8b8b613498565b6128149190614725565b61281e9190614983565b6128289190614983565b6128329190614983565b90509695505050505050565b6128d883838360405160240161285693929190614eae565b6040516020818303038152906040527f969cdd03000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506135f7565b505050565b612979848484846040516024016128f79493929190614eec565b6040516020818303038152906040527f08ee5666000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506135f7565b50505050565b612a178282604051602401612995929190614f38565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506135f7565b5050565b6000600e60008781526020019081526020016000206000612a3c9190613836565b612a446137ff565b600d6000888152602001908152602001600020600081548110612a6a57612a69613d0d565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d6000888152602001908152602001600020600081548110612af957612af8613d0d565b5b906000526020600020906003020160010154816020018181525050600d6000888152602001908152602001600020600081548110612b3a57612b39613d0d565b5b906000526020600020906003020160020154816040018181525050600e600088815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505085816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508481602001818152505083816040018181525050600e600088815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550506000600190505b83811015612e9f57600d60008981526020019081526020016000208181548110612d0957612d08613d0d565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d60008981526020019081526020016000208181548110612d9757612d96613d0d565b5b906000526020600020906003020160010154826020018181525050600d60008981526020019081526020016000208181548110612dd757612dd6613d0d565b5b906000526020600020906003020160020154826040018181525050600e600089815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015550508080612e9790613d6b565b915050612cdc565b50600e6000888152602001908152602001600020600d6000898152602001908152602001600020908054612ed492919061385a565b50600191505095945050505050565b6000600e60008881526020019081526020016000206000612f049190613836565b612f436040518060400160405280600981526020017f696e6465783a20256900000000000000000000000000000000000000000000008152508361297f565b612f4b6137ff565b60005b83811161311057600d60008a81526020019081526020016000208181548110612f7a57612f79613d0d565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d60008a8152602001908152602001600020818154811061300857613007613d0d565b5b906000526020600020906003020160010154826020018181525050600d60008a8152602001908152602001600020818154811061304857613047613d0d565b5b906000526020600020906003020160020154826040018181525050600e60008a815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201555050808061310890613d6b565b915050612f4e565b5086816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508581602001818152505084816040018181525050600e600089815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505060006001846132069190614983565b90505b848110156133cc57600d60008a8152602001908152602001600020818154811061323657613235613d0d565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600d60008a815260200190815260200160002081815481106132c4576132c3613d0d565b5b906000526020600020906003020160010154826020018181525050600d60008a8152602001908152602001600020818154811061330457613303613d0d565b5b906000526020600020906003020160020154826040018181525050600e60008a815260200190815260200160002082908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155505080806133c490613d6b565b915050613209565b600e60008a8152602001908152602001600020600d60008b815260200190815260200160002090805461340092919061385a565b506001925050509695505050505050565b600080600080600080613431620151808861342c91906147ae565b613620565b8096508197508298505050506000620151808861344e9190614f68565b9050610e108161345e91906147ae565b9350610e108161346e9190614f68565b9050603c8161347d91906147ae565b9250603c8161348c9190614f68565b91505091939550919395565b60006107b28410156134a957600080fd5b600084905060008490506000849050600062253d8c60046064600c600e876134d19190614f99565b6134db919061502d565b611324886134e99190615097565b6134f39190615097565b6134fd919061502d565b6003613509919061512b565b613513919061502d565b600c80600c600e886135259190614f99565b61352f919061502d565b613539919061512b565b6002876135469190614f99565b6135509190614f99565b61016f61355d919061512b565b613567919061502d565b6004600c600e886135789190614f99565b613582919061502d565b6112c0896135909190615097565b61359a9190615097565b6105b56135a7919061512b565b6135b1919061502d565b617d4b866135bf9190614f99565b6135c99190615097565b6135d39190615097565b6135dd9190614f99565b6135e79190614f99565b9050809450505050509392505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080600080849050600062253d8c62010bd98361363e9190615097565b6136489190615097565b9050600062023ab182600461365d919061512b565b613667919061502d565b9050600460038262023ab161367c919061512b565b6136869190615097565b613690919061502d565b8261369b9190614f99565b9150600062164b096001846136b09190615097565b610fa06136bd919061512b565b6136c7919061502d565b9050601f6004826105b56136db919061512b565b6136e5919061502d565b846136f09190614f99565b6136fa9190615097565b9250600061098f84605061370e919061512b565b613718919061502d565b9050600060508261098f61372c919061512b565b613736919061502d565b856137419190614f99565b9050600b82613750919061502d565b945084600c61375f919061512b565b60028361376c9190615097565b6137769190614f99565b915084836031866137879190614f99565b6064613793919061512b565b61379d9190615097565b6137a79190615097565b92508298508197508096505050505050509193909250565b82600281019282156137ee579160200282015b828111156137ed5782518255916020019190600101906137d2565b5b5090506137fb919061392d565b5090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b5080546000825560030290600052602060002090810190613857919061394a565b50565b82805482825590600052602060002090600302810192821561391c5760005260206000209160030282015b8281111561391b5782826000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001820154816001015560028201548160020155505091600301919060030190613885565b5b509050613929919061394a565b5090565b5b8082111561394657600081600090555060010161392e565b5090565b5b8082111561399457600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090555060030161394b565b5090565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006139d2826139a7565b9050919050565b6139e2816139c7565b81146139ed57600080fd5b50565b6000813590506139ff816139d9565b92915050565b600060208284031215613a1b57613a1a6139a2565b5b6000613a29848285016139f0565b91505092915050565b60008115159050919050565b613a4781613a32565b82525050565b6000602082019050613a626000830184613a3e565b92915050565b6000819050919050565b613a7b81613a68565b8114613a8657600080fd5b50565b600081359050613a9881613a72565b92915050565b600060ff82169050919050565b613ab481613a9e565b8114613abf57600080fd5b50565b600081359050613ad181613aab565b92915050565b600080600080600060a08688031215613af357613af26139a2565b5b6000613b0188828901613a89565b9550506020613b1288828901613ac2565b9450506040613b2388828901613ac2565b9350506060613b3488828901613ac2565b9250506080613b4588828901613ac2565b9150509295509295909350565b600060208284031215613b6857613b676139a2565b5b6000613b7684828501613a89565b91505092915050565b60008060408385031215613b9657613b956139a2565b5b6000613ba485828601613a89565b9250506020613bb585828601613a89565b9150509250929050565b613bc881613a68565b82525050565b6000602082019050613be36000830184613bbf565b92915050565b613bf2816139c7565b82525050565b6000602082019050613c0d6000830184613be9565b92915050565b600080600060608486031215613c2c57613c2b6139a2565b5b6000613c3a86828701613a89565b9350506020613c4b86828701613a89565b9250506040613c5c86828701613a89565b9150509250925092565b6000606082019050613c7b6000830186613be9565b613c886020830185613bbf565b613c956040830184613bbf565b949350505050565b6000613ca8826139a7565b9050919050565b613cb881613c9d565b82525050565b6000602082019050613cd36000830184613caf565b92915050565b6000819050919050565b613cec81613cd9565b82525050565b6000602082019050613d076000830184613ce3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613d7682613a68565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613da957613da8613d3c565b5b600182019050919050565b600082825260208201905092915050565b7f537461727420686f7572206d757374206265206265747765656e203020616e6460008201527f2032330000000000000000000000000000000000000000000000000000000000602082015250565b6000613e21602383613db4565b9150613e2c82613dc5565b604082019050919050565b60006020820190508181036000830152613e5081613e14565b9050919050565b7f5374617274206d696e757465206d757374206265206265747765656e2030206160008201527f6e64203539000000000000000000000000000000000000000000000000000000602082015250565b6000613eb3602583613db4565b9150613ebe82613e57565b604082019050919050565b60006020820190508181036000830152613ee281613ea6565b9050919050565b7f456e6420686f7572206d757374206265206265747765656e203020616e64203260008201527f3300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613f45602183613db4565b9150613f5082613ee9565b604082019050919050565b60006020820190508181036000830152613f7481613f38565b9050919050565b7f456e64206d696e757465206d757374206265206265747765656e203020616e6460008201527f2035390000000000000000000000000000000000000000000000000000000000602082015250565b6000613fd7602383613db4565b9150613fe282613f7b565b604082019050919050565b6000602082019050818103600083015261400681613fca565b9050919050565b61401681613a32565b811461402157600080fd5b50565b6000815190506140338161400d565b92915050565b60006020828403121561404f5761404e6139a2565b5b600061405d84828501614024565b91505092915050565b7f5061726b696e672073706f742063757272656e746c7920696e20757365210000600082015250565b600061409c601e83613db4565b91506140a782614066565b602082019050919050565b600060208201905081810360008301526140cb8161408f565b9050919050565b7f4d757374206465706f736974206174206c6561737420302e3031204574680000600082015250565b6000614108601e83613db4565b9150614113826140d2565b602082019050919050565b60006020820190508181036000830152614137816140fb565b9050919050565b7f596f7520646f6e2774206861766520656e6f75676820455448206465706f736960008201527f74656420746f2070617920666f7220796f75722072657175657374656420647560208201527f726174696f6e2100000000000000000000000000000000000000000000000000604082015250565b60006141c0604783613db4565b91506141cb8261413e565b606082019050919050565b600060208201905081810360008301526141ef816141b3565b9050919050565b7f5061726b696e672073706f7420697320756e617661696c61626c652100000000600082015250565b600061422c601c83613db4565b9150614237826141f6565b602082019050919050565b6000602082019050818103600083015261425b8161421f565b9050919050565b7f5061726b696e672073706f7420756e617661696c61626c65206174207468697360008201527f2074696d65210000000000000000000000000000000000000000000000000000602082015250565b60006142be602683613db4565b91506142c982614262565b604082019050919050565b600060208201905081810360008301526142ed816142b1565b9050919050565b600081519050614303816139d9565b92915050565b60006020828403121561431f5761431e6139a2565b5b600061432d848285016142f4565b91505092915050565b600060608201905061434b6000830186613be9565b6143586020830185613be9565b6143656040830184613bbf565b949350505050565b60006040820190506143826000830185613bbf565b61438f6020830184613a3e565b9392505050565b61439f81613a9e565b82525050565b600060a0820190506143ba6000830188613bbf565b6143c76020830187614396565b6143d46040830186614396565b6143e16060830185614396565b6143ee6080830184614396565b9695505050505050565b600061440382613a68565b915061440e83613a68565b92508282101561442157614420613d3c565b5b828203905092915050565b7f53657373696f6e206973206e6f74206f76657221000000000000000000000000600082015250565b6000614462601483613db4565b915061446d8261442c565b602082019050919050565b6000602082019050818103600083015261449181614455565b9050919050565b7f4e6f7420656e6f75676820455448206465706f73697465640000000000000000600082015250565b60006144ce601883613db4565b91506144d982614498565b602082019050919050565b600060208201905081810360008301526144fd816144c1565b9050919050565b600081905092915050565b50565b600061451f600083614504565b915061452a8261450f565b600082019050919050565b600061454082614512565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000614580601483613db4565b915061458b8261454a565b602082019050919050565b600060208201905081810360008301526145af81614573565b9050919050565b7f596f752063616e6e6f7420776974686472617720455448207768696c6520706160008201527f726b696e672073657373696f6e20696e2070726f67726573732e20506c65617360208201527f65207761697420756e74696c207468652073657373696f6e20697320636f6d7060408201527f6c657465642c206f7220656e64207468652073657373696f6e206d616e75616c60608201527f6c79210000000000000000000000000000000000000000000000000000000000608082015250565b6000614684608383613db4565b915061468f826145b6565b60a082019050919050565b600060208201905081810360008301526146b381614677565b9050919050565b60006040820190506146cf6000830185613be9565b6146dc6020830184613bbf565b9392505050565b6000815190506146f281613a72565b92915050565b60006020828403121561470e5761470d6139a2565b5b600061471c848285016146e3565b91505092915050565b600061473082613a68565b915061473b83613a68565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561477457614773613d3c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006147b982613a68565b91506147c483613a68565b9250826147d4576147d361477f565b5b828204905092915050565b60006040820190506147f46000830185613bbf565b6148016020830184613bbf565b9392505050565b600069ffffffffffffffffffff82169050919050565b61482781614808565b811461483257600080fd5b50565b6000815190506148448161481e565b92915050565b61485381613cd9565b811461485e57600080fd5b50565b6000815190506148708161484a565b92915050565b600080600080600060a08688031215614892576148916139a2565b5b60006148a088828901614835565b95505060206148b188828901614861565b94505060406148c2888289016146e3565b93505060606148d3888289016146e3565b92505060806148e488828901614835565b9150509295509295909350565b7f54696d6520536c6f7420756e617661696c61626c652c20706c6561736520747260008201527f7920616761696e00000000000000000000000000000000000000000000000000602082015250565b600061494d602783613db4565b9150614958826148f1565b604082019050919050565b6000602082019050818103600083015261497c81614940565b9050919050565b600061498e82613a68565b915061499983613a68565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156149ce576149cd613d3c565b5b828201905092915050565b7f696e646578206f7574206f6620626f756e640000000000000000000000000000600082015250565b6000614a0f601283613db4565b9150614a1a826149d9565b602082019050919050565b60006020820190508181036000830152614a3e81614a02565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081519050614a8381613aab565b92915050565b60008060408385031215614aa057614a9f6139a2565b5b6000614aae85828601614a74565b9250506020614abf85828601614a74565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614b1782614ace565b810181811067ffffffffffffffff82111715614b3657614b35614adf565b5b80604052505050565b6000614b49613998565b9050614b558282614b0e565b919050565b600067ffffffffffffffff821115614b7557614b74614adf565b5b602082029050919050565b600080fd5b6000614b98614b9384614b5a565b614b3f565b90508060208402830185811115614bb257614bb1614b80565b5b835b81811015614bdb5780614bc78882614a74565b845260208401935050602081019050614bb4565b5050509392505050565b600082601f830112614bfa57614bf9614ac9565b5b6002614c07848285614b85565b91505092915050565b600060408284031215614c2657614c256139a2565b5b6000614c3484828501614be5565b91505092915050565b600061ffff82169050919050565b6000614c5682614c3d565b9150614c6183614c3d565b92508161ffff0483118215151615614c7c57614c7b613d3c565b5b828202905092915050565b7f617070656e6420746f2074686520656e642066616d0000000000000000000000600082015250565b6000614cbd601583613db4565b9150614cc882614c87565b602082019050919050565b60006020820190508181036000830152614cec81614cb0565b9050919050565b7f736f6d657468696e672077656e742077726f6e67000000000000000000000000600082015250565b6000614d29601483613db4565b9150614d3482614cf3565b602082019050919050565b60006020820190508181036000830152614d5881614d1c565b9050919050565b7f69646b206d61796e000000000000000000000000000000000000000000000000600082015250565b6000614d95600883613db4565b9150614da082614d5f565b602082019050919050565b60006020820190508181036000830152614dc481614d88565b9050919050565b7f646f776e2068657265206d616e00000000000000000000000000000000000000600082015250565b6000614e01600d83613db4565b9150614e0c82614dcb565b602082019050919050565b60006020820190508181036000830152614e3081614df4565b9050919050565b600081519050919050565b60005b83811015614e60578082015181840152602081019050614e45565b83811115614e6f576000848401525b50505050565b6000614e8082614e37565b614e8a8185613db4565b9350614e9a818560208601614e42565b614ea381614ace565b840191505092915050565b60006060820190508181036000830152614ec88186614e75565b9050614ed76020830185613bbf565b614ee46040830184613bbf565b949350505050565b60006080820190508181036000830152614f068187614e75565b9050614f156020830186613bbf565b614f226040830185613bbf565b614f2f6060830184613bbf565b95945050505050565b60006040820190508181036000830152614f528185614e75565b9050614f616020830184613bbf565b9392505050565b6000614f7382613a68565b9150614f7e83613a68565b925082614f8e57614f8d61477f565b5b828206905092915050565b6000614fa482613cd9565b9150614faf83613cd9565b9250827f800000000000000000000000000000000000000000000000000000000000000001821260008412151615614fea57614fe9613d3c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561502257615021613d3c565b5b828203905092915050565b600061503882613cd9565b915061504383613cd9565b9250826150535761505261477f565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561508c5761508b613d3c565b5b828205905092915050565b60006150a282613cd9565b91506150ad83613cd9565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156150e8576150e7613d3c565b5b817f80000000000000000000000000000000000000000000000000000000000000000383126000831216156151205761511f613d3c565b5b828201905092915050565b600061513682613cd9565b915061514183613cd9565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156151805761517f613d3c565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156151bd576151bc613d3c565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156151fa576151f9613d3c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561523757615236613d3c565b5b82820290509291505056fe72657365727665645061726b696e674d617070696e6720617420696478203020737461727454696d653a20256920656e6454696d652025696265666f72652066697273742069662073746174656d656e7420286c696e6520323530293a207265736572766564456e6454696d653a2025692c207265736572766564537461727454696d653a2025696265666f72652066697273742069662073746174656d656e7420286c696e6520323530293a20726571756573746564537461727454696d653a2025692c20726571756573746564456e6454696d653a20256972657365727665645061726b696e674d617070696e6720617420696478203120737461727454696d653a20256920656e6454696d652025696f766572666c6f7720636865636b3a2025692c2074696d65536c6f74734c656e6774683a20256920696e206c6f6f70202b2b2074696d65736c6f74736c656e6774683a2025692c20693a2025692c206f766572666c6f77636865636b3a20256920696e206c6f6f702074696d65736c6f74736c656e6774683a2025692c20693a202569a2646970667358221220e76b734abd3168e5842287773d56cc111b29f15b3a8f4d2d257f12602124694564736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2490,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "current",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(DateTime)2472_storage"
      },
      {
        "astId": 2494,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "depositors",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2498,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "currentParkingSpotOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2504,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "requestedParkingTimes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 2508,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "sessionInProgress",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2512,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "sessionCost",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2517,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "availableSlots",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(TimeSlots)2479_storage)"
      },
      {
        "astId": 2520,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "activeSessions",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2526,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "reservedParkingTimes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_array(t_struct(TimeSlots)2479_storage)dyn_storage)"
      },
      {
        "astId": 2532,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "tempReservedParkingTimes",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_struct(TimeSlots)2479_storage)dyn_storage)"
      },
      {
        "astId": 2534,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "testLoop",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2537,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "ethUSDpriceFeed",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 2551,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "owner",
        "offset": 0,
        "slot": "17",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TimeSlots)2479_storage)dyn_storage": {
        "base": "t_struct(TimeSlots)2479_storage",
        "encoding": "dynamic_array",
        "label": "struct RequestParkingSpotToken.TimeSlots[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(TimeSlots)2479_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RequestParkingSpotToken.TimeSlots[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TimeSlots)2479_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_uint256,t_struct(TimeSlots)2479_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RequestParkingSpotToken.TimeSlots)",
        "numberOfBytes": "32",
        "value": "t_struct(TimeSlots)2479_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DateTime)2472_storage": {
        "encoding": "inplace",
        "label": "struct RequestParkingSpotToken.DateTime",
        "members": [
          {
            "astId": 2461,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Year",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2463,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Month",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2465,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Day",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2467,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Hour",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2469,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Minute",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2471,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Second",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(TimeSlots)2479_storage": {
        "encoding": "inplace",
        "label": "struct RequestParkingSpotToken.TimeSlots",
        "members": [
          {
            "astId": 2474,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "walletAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2476,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2478,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimeUnix",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTimeUnix",
          "type": "uint256"
        }
      ],
      "name": "calculateSessionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_requestedStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_requestedEndTime",
          "type": "uint256"
        }
      ],
      "name": "checkAvailableSpots",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentParkingSpotOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getEndTimeLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getStartTimeLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartMinute",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndMinute",
          "type": "uint8"
        }
      ],
      "name": "requestParkingSpotToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestedParkingTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_requestedStartFromCurrentDateSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedStartMinute",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndHour",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_requestedEndMinute",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_requestedEndFromCurrentDateSeconds",
          "type": "uint256"
        }
      ],
      "name": "reserveParkingSpotToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "returnParkingSpotToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sessionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sessionInProgress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testLoop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb44874e409580de15ab8759fa61c2e67ad4b8296104eed155b66a139613b6d70",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "2960541",
    "logsBloom": "0x
    "blockHash": "0x6411a7a775524a24e15179763f9247bddeb3678106ff988fa0349478fc7cd194",
    "transactionHash": "0xb44874e409580de15ab8759fa61c2e67ad4b8296104eed155b66a139613b6d70",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "2960541",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "50f5186a9fad6a26882828084ebadeb3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimeUnix\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimeUnix\",\"type\":\"uint256\"}],\"name\":\"calculateSessionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestedStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestedEndTime\",\"type\":\"uint256\"}],\"name\":\"checkAvailableSpots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentParkingSpotOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getEndTimeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getStartTimeLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartMinute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndMinute\",\"type\":\"uint8\"}],\"name\":\"requestParkingSpotToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestedParkingTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestedStartFromCurrentDateSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedStartMinute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndHour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_requestedEndMinute\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_requestedEndFromCurrentDateSeconds\",\"type\":\"uint256\"}],\"name\":\"reserveParkingSpotToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"returnParkingSpotToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sessionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sessionInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testLoop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequestParkingSpotToken.sol\":\"RequestParkingSpotToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/BokkyPooBahsDateTimeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.00 - Contract Instance\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\\n//\\n// GNU Lesser General Public License 3.0\\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\\n// ----------------------------------------------------------------------------\\n\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\ncontract BokkyPooBahsDateTimeContract {\\n    uint public constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint public constant SECONDS_PER_HOUR = 60 * 60;\\n    uint public constant SECONDS_PER_MINUTE = 60;\\n    int public constant OFFSET19700101 = 2440588;\\n\\n    uint public constant DOW_MON = 1;\\n    uint public constant DOW_TUE = 2;\\n    uint public constant DOW_WED = 3;\\n    uint public constant DOW_THU = 4;\\n    uint public constant DOW_FRI = 5;\\n    uint public constant DOW_SAT = 6;\\n    uint public constant DOW_SUN = 7;\\n\\n    function _now() public view returns (uint timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function _nowDateTime() public view returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n    function _daysFromDate(uint year, uint month, uint day) public pure returns (uint _days) {\\n        return BokkyPooBahsDateTimeLibrary._daysFromDate(year, month, day);\\n    }\\n    function _daysToDate(uint _days) public pure returns (uint year, uint month, uint day) {\\n        return BokkyPooBahsDateTimeLibrary._daysToDate(_days);\\n    }\\n    function timestampFromDate(uint year, uint month, uint day) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, day);\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(year, month, day, hour, minute, second);\\n    }\\n    function timestampToDate(uint timestamp) public pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n    }\\n    function timestampToDateTime(uint timestamp) public pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(timestamp);\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDate(year, month, day);\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDateTime(year, month, day, hour, minute, second);\\n    }\\n    function isLeapYear(uint timestamp) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary.isLeapYear(timestamp);\\n    }\\n    function _isLeapYear(uint year) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary._isLeapYear(year);\\n    }\\n    function isWeekDay(uint timestamp) public pure returns (bool weekDay) {\\n        weekDay = BokkyPooBahsDateTimeLibrary.isWeekDay(timestamp);\\n    }\\n    function isWeekEnd(uint timestamp) public pure returns (bool weekEnd) {\\n        weekEnd = BokkyPooBahsDateTimeLibrary.isWeekEnd(timestamp);\\n    }\\n\\n    function getDaysInMonth(uint timestamp) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary.getDaysInMonth(timestamp);\\n    }\\n    function _getDaysInMonth(uint year, uint month) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\\n    }\\n    function getDayOfWeek(uint timestamp) public pure returns (uint dayOfWeek) {\\n        dayOfWeek = BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp);\\n    }\\n\\n    function getYear(uint timestamp) public pure returns (uint year) {\\n        year = BokkyPooBahsDateTimeLibrary.getYear(timestamp);\\n    }\\n    function getMonth(uint timestamp) public pure returns (uint month) {\\n        month = BokkyPooBahsDateTimeLibrary.getMonth(timestamp);\\n    }\\n    function getDay(uint timestamp) public pure returns (uint day) {\\n        day = BokkyPooBahsDateTimeLibrary.getDay(timestamp);\\n    }\\n    function getHour(uint timestamp) public pure returns (uint hour) {\\n        hour = BokkyPooBahsDateTimeLibrary.getHour(timestamp);\\n    }\\n    function getMinute(uint timestamp) public pure returns (uint minute) {\\n        minute = BokkyPooBahsDateTimeLibrary.getMinute(timestamp);\\n    }\\n    function getSecond(uint timestamp) public pure returns (uint second) {\\n        second = BokkyPooBahsDateTimeLibrary.getSecond(timestamp);\\n    }\\n\\n    function addYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addYears(timestamp, _years);\\n    }\\n    function addMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMonths(timestamp, _months);\\n    }\\n    function addDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, _days);\\n    }\\n    function addHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addHours(timestamp, _hours);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMinutes(timestamp, _minutes);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addSeconds(timestamp, _seconds);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subYears(timestamp, _years);\\n    }\\n    function subMonths(uint timestamp, uint _months) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMonths(timestamp, _months);\\n    }\\n    function subDays(uint timestamp, uint _days) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subDays(timestamp, _days);\\n    }\\n    function subHours(uint timestamp, uint _hours) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subHours(timestamp, _hours);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMinutes(timestamp, _minutes);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subSeconds(timestamp, _seconds);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) public pure returns (uint _years) {\\n        _years = BokkyPooBahsDateTimeLibrary.diffYears(fromTimestamp, toTimestamp);\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) public pure returns (uint _months) {\\n        _months = BokkyPooBahsDateTimeLibrary.diffMonths(fromTimestamp, toTimestamp);\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) public pure returns (uint _days) {\\n        _days = BokkyPooBahsDateTimeLibrary.diffDays(fromTimestamp, toTimestamp);\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) public pure returns (uint _hours) {\\n        _hours = BokkyPooBahsDateTimeLibrary.diffHours(fromTimestamp, toTimestamp);\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) public pure returns (uint _minutes) {\\n        _minutes = BokkyPooBahsDateTimeLibrary.diffMinutes(fromTimestamp, toTimestamp);\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) public pure returns (uint _seconds) {\\n        _seconds = BokkyPooBahsDateTimeLibrary.diffSeconds(fromTimestamp, toTimestamp);\\n    }\\n}\",\"keccak256\":\"0xe9913c812a72dc0d88521026abc5a107b82028b536cb12b5c0a20ddcfbe766ca\",\"license\":\"MIT\"},\"contracts/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x6a972bde66695cafc06e4f6beabef5f5a9386196a62f611d5be2d2e5a3a4967f\",\"license\":\"MIT\"},\"contracts/RequestParkingSpotToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./BokkyPooBahsDateTimeContract.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ninterface ParkingSpotAttributes {\\n    function checkSpotAvailability(uint) external view returns (bool);\\n    function checkSpotPermittedParkingStartTime(uint ) external view returns (uint8, uint8);\\n    function checkSpotPermittedParkingEndTime(uint ) external view returns (uint8, uint8);\\n    function checkParkingSpotTimezone(uint ) external view returns (uint8[2] memory);\\n    function spotInUse(uint) external view returns (bool);\\n    function setSpotInUse(uint, bool ) external;\\n    function pricePerHour(uint) external view returns (uint);\\n\\n}\\n\\ninterface ParkingSpotToken {\\n    function ownerOf(uint256) external returns (address);\\n    function safeTransferFrom(address,address,uint256) external;\\n    function safeTransferFromWithOwnerApprovals(address,address,uint256) external;\\n    function _parkingSpotOwners(uint) external view returns (address);\\n    function paymentAddress(uint) external view returns (address);\\n\\n}\\n\\n\\n\\ncontract RequestParkingSpotToken {\\nusing BokkyPooBahsDateTimeLibrary for *;\\n\\n    struct DateTime {\\n        uint256 Year;\\n        uint256 Month; \\n        uint256 Day;\\n        uint256 Hour; \\n        uint256 Minute;\\n        uint256 Second;\\n    }\\n\\n    struct TimeSlots {\\n        uint256[] startTime;\\n        uint256[] endTime; \\n    }\\n\\n    DateTime current = DateTime(0,0,0,0,0,0);\\n\\n    mapping(address=>uint256) public depositors;\\n    mapping(uint256=> address) public currentParkingSpotOwner;\\n    // mapping(uint256=>uint256[2]) public permittedParkingTimes;\\n    mapping(uint256=>uint256[2]) public requestedParkingTimes;\\n    mapping(address=>bool) public sessionInProgress;\\n    mapping(uint256=>uint256) public sessionCost;\\n    mapping(uint256=>TimeSlots) availableSlots;\\n\\n    uint256 public testLoop;\\n\\n    AggregatorV3Interface internal ethUSDpriceFeed;\\n\\n    ParkingSpotAttributes constant psa = ParkingSpotAttributes(0x5FC8d32690cc91D4c39d9d3abcBD16989F875707);\\n    ParkingSpotToken constant pst = ParkingSpotToken(0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9);\\n\\n    // Payable address can receive Ether\\n    address payable public owner;\\n\\n    // Payable constructor can receive Ether\\n    constructor() payable {\\n        owner = payable(msg.sender);\\n        ethUSDpriceFeed = AggregatorV3Interface(0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512);\\n    }\\n\\n    function deposit() public payable {\\n        depositors[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw(uint256 _amount) public {\\n        require(_amount <= depositors[msg.sender], \\\"Not enough ETH deposited\\\");\\n        depositors[msg.sender] -= _amount;\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n        require(sessionInProgress[msg.sender] == false, \\\"You cannot withdraw ETH while parking session in progress. Please wait until the session is completed, or end the session manually!\\\");\\n\\n    }\\n    \\n    function getCurrentDateTime () internal {\\n        (current.Year, current.Month, current.Day, current.Hour, current.Minute, current.Second) = BokkyPooBahsDateTimeLibrary.timestampToDateTime(block.timestamp);\\n    }\\n\\n    function genericTimeFrameToCurrentUnixTime(uint8 _hour, uint8 _minute) internal returns (uint) {\\n        getCurrentDateTime();\\n       return BokkyPooBahsDateTimeLibrary.timestampFromDateTime(current.Year, current.Month, current.Day, _hour, _minute, 0);\\n    }\\n\\n    function retrievePermittedParkingTimes(uint _tokenId) internal returns (uint256, uint256) {\\n        (uint8 permittedStartHour, uint8 permittedStartMinute) = psa.checkSpotPermittedParkingStartTime(_tokenId);\\n        (uint8 permittedEndHour, uint8 permittedEndMinute) = psa.checkSpotPermittedParkingEndTime(_tokenId);\\n\\n        uint permittedStartTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(permittedStartHour, permittedStartMinute), _tokenId);\\n        uint permittedEndTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(permittedEndHour, permittedEndMinute), _tokenId);\\n        // permittedStartTimeUnix = accountForTimezone(permittedStartTimeUnix, _tokenId);\\n        // permittedEndTimeUnix  =  accountForTimezone(permittedEndTimeUnix, _tokenId);\\n\\n        // permittedParkingTimes[_tokenId] = [permittedStartTimeUnix, permittedEndTimeUnix];\\n\\n        return (permittedStartTimeUnix, permittedEndTimeUnix);\\n    }\\n\\n    function setIsNegative(bool _isNegative) internal {\\n        _isNegative = true;\\n    }\\n\\n    function setSessionInProgress(address _address, bool _status) internal {\\n        sessionInProgress[_address] = _status;\\n    }\\n\\n    function getStartTimeLength(uint256 _tokenId) public view returns (uint256) {\\n        return availableSlots[_tokenId].startTime.length;\\n    }\\n\\n    function getEndTimeLength(uint256 _tokenId) public view returns (uint256) {\\n        return availableSlots[_tokenId].endTime.length;\\n    }\\n\\n    function accountForTimezone(uint _unixTime, uint _tokenId) internal returns (uint256) {\\n        uint8[2] memory timezoneAttributes  = (psa.checkParkingSpotTimezone(_tokenId));    \\n        uint256 offset = (timezoneAttributes[1] * 3600);\\n        uint256 newTime;\\n        if (timezoneAttributes[0] == 1) {\\n         newTime = (_unixTime - offset);\\n\\n        } else {\\n        newTime = (_unixTime + offset);\\n        }\\n\\n        return newTime;\\n\\n    }\\n\\n\\n    function calculateSessionCost(uint256 _tokenId, uint256 _startTimeUnix, uint256 _endTimeUnix) public returns (uint256)  {\\n        uint256 hourlyRateUSD = (psa.pricePerHour(_tokenId) * (10**8));\\n        int256 ethUSDPrice = getLatestPrice();\\n        uint256 hourlyRateGwei = (1000000000000000000 / (uint256(ethUSDPrice) / hourlyRateUSD));   \\n        uint256 gweiBySecond = ((hourlyRateGwei / 3600) / 10**2);\\n\\n        uint256 duration = (_endTimeUnix - _startTimeUnix);\\n\\n        return duration * gweiBySecond;\\n    }\\n\\n    function requestParkingSpotToken(uint256 _tokenId, uint8 _requestedStartHour, uint8 _requestedStartMinute, uint8 _requestedEndHour, uint8 _requestedEndMinute) public {\\n        require(_requestedStartHour <= 23, \\\"Start hour must be between 0 and 23\\\");\\n        require(_requestedStartMinute <= 59, \\\"Start minute must be between 0 and 59\\\");\\n        require(_requestedEndHour <= 23, \\\"End hour must be between 0 and 23\\\");\\n        require(_requestedEndMinute <= 59, \\\"End minute must be between 0 and 59\\\");\\n        require(psa.spotInUse(_tokenId) == false, \\\"Parking spot currently in use!\\\");\\n\\n        (uint256 parkingSpotStartTime, uint256 parkingSpotEndTime) = retrievePermittedParkingTimes(_tokenId);\\n\\n        uint256 requestedStartTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedStartHour,_requestedStartMinute), _tokenId);\\n        uint256 requestedEndTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedEndHour,_requestedEndMinute), _tokenId);\\n        // require(requestedStartTimeUnix > block.timestamp, \\\"Can't request parking spot in the past!\\\");\\n        // require(depositors[msg.sender] >= 1000000000000000000, \\\"Must deposit at least 1 Eth\\\");\\n        require(depositors[msg.sender] >= 10000000000000000, \\\"Must deposit at least 0.01 Eth\\\");\\n        uint256 calculatedSessionCost = calculateSessionCost(_tokenId,requestedStartTimeUnix,requestedEndTimeUnix);\\n        require(depositors[msg.sender] >= calculatedSessionCost , \\\"You don't have enough ETH deposited to pay for your requested duration!\\\" );\\n        require(psa.checkSpotAvailability(_tokenId) == true, \\\"Parking spot is unavailable!\\\");\\n        require(requestedStartTimeUnix > parkingSpotStartTime && requestedEndTimeUnix < parkingSpotEndTime , \\\"Parking spot unavailable at this time!\\\");\\n\\n       address currentOwner = pst.ownerOf(_tokenId);\\n        currentParkingSpotOwner[_tokenId] = currentOwner;\\n        pst.safeTransferFrom(currentOwner, msg.sender, _tokenId);\\n        psa.setSpotInUse(_tokenId, true);\\n        requestedParkingTimes[_tokenId] = [requestedStartTimeUnix, requestedEndTimeUnix ];\\n        setSessionInProgress(msg.sender, true);\\n        sessionCost[_tokenId] = calculatedSessionCost;\\n\\n    }\\n\\n    function checkAvailableSpots(uint256 _tokenId, uint256 _requestedStartTime, uint256 _requestedEndTime) public {\\n        \\n        uint256 [] memory spotStartTimes = availableSlots[_tokenId].startTime;\\n        uint256 [] memory spotEndTimes = availableSlots[_tokenId].endTime;\\n\\n        uint256 startTimeLength = getStartTimeLength(_tokenId);\\n\\n        for (uint i = 0; i < startTimeLength; i++) {\\n            if (_requestedStartTime > spotEndTimes[i] && _requestedEndTime < spotStartTimes[i+1]) {\\n                testLoop = 1111;\\n            } else {\\n                testLoop = 2222;\\n            }\\n        }\\n\\n    }\\n\\n    function reserveParkingSpotToken(uint256 _tokenId, uint256 _requestedStartFromCurrentDateSeconds, uint8 _requestedStartHour, uint8 _requestedStartMinute, uint8 _requestedEndHour, uint8 _requestedEndMinute, uint256 _requestedEndFromCurrentDateSeconds) public {\\n        require(_requestedStartHour <= 23, \\\"Start hour must be between 0 and 23\\\");\\n        require(_requestedStartMinute <= 59, \\\"Start minute must be between 0 and 59\\\");\\n        require(_requestedEndHour <= 23, \\\"End hour must be between 0 and 23\\\");\\n        require(_requestedEndMinute <= 59, \\\"End minute must be between 0 and 59\\\");\\n     \\n        (uint256 parkingSpotStartTime, uint256 parkingSpotEndTime) = retrievePermittedParkingTimes(_tokenId);\\n        uint256 requestedStartTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedStartHour,_requestedStartMinute), _tokenId);\\n        uint256 requestedEndTimeUnix = accountForTimezone(genericTimeFrameToCurrentUnixTime(_requestedEndHour,_requestedEndMinute), _tokenId);\\n\\n        requestedStartTimeUnix += _requestedStartFromCurrentDateSeconds;\\n        requestedEndTimeUnix += _requestedEndFromCurrentDateSeconds;\\n\\n        parkingSpotStartTime += _requestedStartFromCurrentDateSeconds;\\n        parkingSpotEndTime += _requestedEndFromCurrentDateSeconds;\\n\\n        require(requestedStartTimeUnix >= parkingSpotStartTime && parkingSpotEndTime <= parkingSpotEndTime);\\n\\n\\n        // uint256 arrayLength = getAvailableSlotsLength(_tokenId);\\n\\n        // for (x = 1)\\n\\n    }\\n\\n\\n    // function endParkingSession(uint256 _tokenId) public returns (bool) {\\n    //     require(msg.sender == pst.ownerOf(_tokenId);)\\n\\n    // }\\n\\n    function returnParkingSpotToken(uint256 _tokenId) public returns (bool) {\\n\\n        uint256 parkingEndtimeUnix = requestedParkingTimes[_tokenId][1];\\n\\n        if (block.timestamp >= parkingEndtimeUnix) {\\n            address currentUser = pst.ownerOf(_tokenId);\\n                pst.safeTransferFrom(currentUser, pst._parkingSpotOwners(_tokenId), _tokenId);\\n                psa.setSpotInUse(_tokenId, false);\\n                setSessionInProgress(currentUser, false);\\n                depositors[currentUser] -= sessionCost[_tokenId];\\n                payable(pst.paymentAddress(_tokenId)).transfer(sessionCost[_tokenId]);\\n                return true;\\n            } else {\\n                revert(\\\"Session is not over!\\\");\\n                \\n    //         } \\n    //     } else if (parkingEndtimeUnix == 0) {\\n    //             address currentUser = pst.ownerOf(_tokenId);\\n    //             pst.safeTransferFrom(currentUser, parkingSpotOwner[_tokenId], _tokenId);\\n    //             psa.setSpotInUse(_tokenId, false);\\n    //             return true;\\n    //         } else {\\n    //             revert(\\\"Session has is not over!\\\");\\n    // }\\n\\n        revert(\\\"Session is not over!\\\");\\n\\n            }\\n\\n}\\n\\nfunction getLatestPrice() public view returns (int) {\\n        (\\n            /*uint80 roundID*/,\\n            int price,\\n            /*uint startedAt*/,\\n            /*uint timeStamp*/,\\n            /*uint80 answeredInRound*/\\n        ) = ethUSDpriceFeed.latestRoundData();\\n        return price;\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0x827fefffa142f02c93040fecc87c350a67cccdb8d29b5f84f419956b6d2c5e33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525060008082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155505033600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073e7f1725e7734ce288f8367e1bb143e90bb3f0512600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506133b58061011b6000396000f3fe6080604052600436106100fe5760003560e01c806340eb2f05116100955780638e15f473116100645780638e15f4731461036b578063d0e30db014610396578063d2182855146103a0578063eed75f6d146103dd578063eedc4f351461041a576100fe565b806340eb2f051461029d578063454a0f8f146102da5780636312c05d146103035780638da5cb5b14610340576100fe565b80632e1a7d4d116100d15780632e1a7d4d146101e35780632f9b0ed01461020c578063358b0534146102375780634020edce14610274576100fe565b8063088c05eb1461010357806323a85b02146101405780632b425ab3146101695780632bebbe4d146101a6575b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190611f99565b610457565b6040516101379190611fe1565b60405180910390f35b34801561014c57600080fd5b506101676004803603810190610162919061206b565b610477565b005b34801561017557600080fd5b50610190600480360381019061018b91906120e6565b610b32565b60405161019d9190611fe1565b60405180910390f35b3480156101b257600080fd5b506101cd60048036038101906101c89190612113565b610f32565b6040516101da9190612162565b60405180910390f35b3480156101ef57600080fd5b5061020a600480360381019061020591906120e6565b610f5a565b005b34801561021857600080fd5b50610221611175565b60405161022e9190612162565b60405180910390f35b34801561024357600080fd5b5061025e600480360381019061025991906120e6565b61117b565b60405161026b9190612162565b60405180910390f35b34801561028057600080fd5b5061029b6004803603810190610296919061217d565b61119e565b005b3480156102a957600080fd5b506102c460048036038101906102bf91906120e6565b61130f565b6040516102d191906121df565b60405180910390f35b3480156102e657600080fd5b5061030160048036038101906102fc91906121fa565b611342565b005b34801561030f57600080fd5b5061032a6004803603810190610325919061217d565b6114fa565b6040516103379190612162565b60405180910390f35b34801561034c57600080fd5b50610355611613565b60405161036291906122bd565b60405180910390f35b34801561037757600080fd5b50610380611639565b60405161038d91906122f1565b60405180910390f35b61039e6116da565b005b3480156103ac57600080fd5b506103c760048036038101906103c291906120e6565b611732565b6040516103d49190612162565b60405180910390f35b3480156103e957600080fd5b5061040460048036038101906103ff9190611f99565b61174a565b6040516104119190612162565b60405180910390f35b34801561042657600080fd5b50610441600480360381019061043c91906120e6565b611762565b60405161044e9190612162565b60405180910390f35b60096020528060005260406000206000915054906101000a900460ff1681565b60178460ff1611156104be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b59061238f565b60405180910390fd5b603b8360ff161115610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc90612421565b60405180910390fd5b60178260ff16111561054c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610543906124b3565b60405180910390fd5b603b8160ff161115610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90612545565b60405180910390fd5b60001515735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff166354e3e36e876040518263ffffffff1660e01b81526004016105e49190612162565b602060405180830381865afa158015610601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106259190612591565b151514610667576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065e9061260a565b60405180910390fd5b60008061067387611785565b91509150600061068c61068688886118ef565b89611924565b905060006106a361069d87876118ef565b8a611924565b9050662386f26fc10000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561072e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072590612676565b60405180910390fd5b600061073b8a84846114fa565b905080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156107bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b69061272e565b60405180910390fd5b60011515735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff1663e91926f18c6040518263ffffffff1660e01b81526004016108109190612162565b602060405180830381865afa15801561082d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108519190612591565b151514610893576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088a9061279a565b60405180910390fd5b84831180156108a157508382105b6108e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d79061282c565b60405180910390fd5b600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e8c6040518263ffffffff1660e01b815260040161092f9190612162565b6020604051808303816000875af115801561094e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109729190612861565b905080600760008d815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e82338e6040518463ffffffff1660e01b8152600401610a179392919061288e565b600060405180830381600087803b158015610a3157600080fd5b505af1158015610a45573d6000803e3d6000fd5b50505050735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16633ee036878c60016040518363ffffffff1660e01b8152600401610a999291906128c5565b600060405180830381600087803b158015610ab357600080fd5b505af1158015610ac7573d6000803e3d6000fd5b50505050604051806040016040528085815260200184815250600860008d8152602001908152602001600020906002610b01929190611ecf565b50610b0d336001611a3b565b81600a60008d8152602001908152602001600020819055505050505050505050505050565b60008060086000848152602001908152602001600020600160028110610b5b57610b5a6128ee565b5b01549050804210610ef257600073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610bb59190612162565b6020604051808303816000875af1158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf89190612861565b905073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166342842e0e8273dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff1663c55fd06b886040518263ffffffff1660e01b8152600401610c789190612162565b602060405180830381865afa158015610c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb99190612861565b876040518463ffffffff1660e01b8152600401610cd89392919061288e565b600060405180830381600087803b158015610cf257600080fd5b505af1158015610d06573d6000803e3d6000fd5b50505050735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16633ee036878560006040518363ffffffff1660e01b8152600401610d5a9291906128c5565b600060405180830381600087803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b50505050610d97816000611a3b565b600a600085815260200190815260200160002054600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610df9919061294c565b9250508190555073dc64a140aa3e981100a9beca4e685f962f0cf6c973ffffffffffffffffffffffffffffffffffffffff166371053abf856040518263ffffffff1660e01b8152600401610e4d9190612162565b602060405180830381865afa158015610e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8e9190612861565b73ffffffffffffffffffffffffffffffffffffffff166108fc600a6000878152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015610ee6573d6000803e3d6000fd5b50600192505050610f2d565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f24906129cc565b60405180910390fd5b919050565b60086020528160005260406000208160028110610f4e57600080fd5b01600091509150505481565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115610fdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd390612a38565b60405180910390fd5b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461102b919061294c565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161105890612a89565b60006040518083038185875af1925050503d8060008114611095576040519150601f19603f3d011682016040523d82523d6000602084013e61109a565b606091505b50509050806110de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d590612aea565b60405180910390fd5b60001515600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116890612bee565b60405180910390fd5b5050565b600c5481565b6000600b6000838152602001908152602001600020600001805490509050919050565b6000600b600085815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561120057602002820191906000526020600020905b8154815260200190600101908083116111ec575b505050505090506000600b600086815260200190815260200160002060010180548060200260200160405190810160405280929190818152602001828054801561126957602002820191906000526020600020905b815481526020019060010190808311611255575b50505050509050600061127b8661117b565b905060005b818110156113065782818151811061129b5761129a6128ee565b5b6020026020010151861180156112d65750836001826112ba9190612c0e565b815181106112cb576112ca6128ee565b5b602002602001015185105b156112e957610457600c819055506112f3565b6108ae600c819055505b80806112fe90612c64565b915050611280565b50505050505050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60178560ff161115611389576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113809061238f565b60405180910390fd5b603b8460ff1611156113d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c790612421565b60405180910390fd5b60178360ff161115611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e906124b3565b60405180910390fd5b603b8260ff16111561145e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145590612545565b60405180910390fd5b60008061146a89611785565b91509150600061148361147d89896118ef565b8b611924565b9050600061149a61149488886118ef565b8c611924565b905089826114a89190612c0e565b915084816114b69190612c0e565b905089846114c49190612c0e565b935084836114d29190612c0e565b92508382101580156114e45750828311155b6114ed57600080fd5b5050505050505050505050565b6000806305f5e100735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff1663828f74b1876040518263ffffffff1660e01b815260040161154f9190612162565b602060405180830381865afa15801561156c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115909190612cc2565b61159a9190612cef565b905060006115a6611639565b9050600082826115b69190612d78565b670de0b6b3a76400006115c99190612d78565b905060006064610e10836115dd9190612d78565b6115e79190612d78565b9050600087876115f7919061294c565b905081816116059190612cef565b955050505050509392505050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd9190612e17565b5050509150508091505090565b34600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117299190612c0e565b92505081905550565b600a6020528060005260406000206000915090505481565b60066020528060005260406000206000915090505481565b6000600b6000838152602001908152602001600020600101805490509050919050565b600080600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff1663ccc5ffe9866040518263ffffffff1660e01b81526004016117d89190612162565b6040805180830381865afa1580156117f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118189190612ea7565b91509150600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16631a1089c2886040518263ffffffff1660e01b815260040161186c9190612162565b6040805180830381865afa158015611888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ac9190612ea7565b9150915060006118c56118bf86866118ef565b89611924565b905060006118dc6118d685856118ef565b8a611924565b9050818197509750505050505050915091565b60006118f9611a96565b61191c60008001546000600101546000600201548660ff168660ff166000611ae9565b905092915050565b600080735fc8d32690cc91d4c39d9d3abcbd16989f87570773ffffffffffffffffffffffffffffffffffffffff16635fe20047846040518263ffffffff1660e01b81526004016119749190612162565b6040805180830381865afa158015611990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b4919061302e565b90506000610e10826001600281106119cf576119ce6128ee565b5b602002015160ff166119e19190613069565b61ffff16905060006001836000600281106119ff576119fe6128ee565b5b602002015160ff161415611a20578186611a19919061294c565b9050611a2f565b8186611a2c9190612c0e565b90505b80935050505092915050565b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b611a9f42611b4a565b6000800160008060010160008060020160008060030160008060040160008060050160008c919050558b919050558a91905055899190505588919050558791905055505050505050565b600081603c84611af99190612cef565b610e1086611b079190612cef565b62015180611b168b8b8b611bd1565b611b209190612cef565b611b2a9190612c0e565b611b349190612c0e565b611b3e9190612c0e565b90509695505050505050565b600080600080600080611b6a6201518088611b659190612d78565b611d30565b80965081975082985050505060006201518088611b8791906130a5565b9050610e1081611b979190612d78565b9350610e1081611ba791906130a5565b9050603c81611bb69190612d78565b9250603c81611bc591906130a5565b91505091939550919395565b60006107b2841015611be257600080fd5b600084905060008490506000849050600062253d8c60046064600c600e87611c0a91906130d6565b611c14919061316a565b61132488611c2291906131d4565b611c2c91906131d4565b611c36919061316a565b6003611c429190613268565b611c4c919061316a565b600c80600c600e88611c5e91906130d6565b611c68919061316a565b611c729190613268565b600287611c7f91906130d6565b611c8991906130d6565b61016f611c969190613268565b611ca0919061316a565b6004600c600e88611cb191906130d6565b611cbb919061316a565b6112c089611cc991906131d4565b611cd391906131d4565b6105b5611ce09190613268565b611cea919061316a565b617d4b86611cf891906130d6565b611d0291906131d4565b611d0c91906131d4565b611d1691906130d6565b611d2091906130d6565b9050809450505050509392505050565b600080600080849050600062253d8c62010bd983611d4e91906131d4565b611d5891906131d4565b9050600062023ab1826004611d6d9190613268565b611d77919061316a565b9050600460038262023ab1611d8c9190613268565b611d9691906131d4565b611da0919061316a565b82611dab91906130d6565b9150600062164b09600184611dc091906131d4565b610fa0611dcd9190613268565b611dd7919061316a565b9050601f6004826105b5611deb9190613268565b611df5919061316a565b84611e0091906130d6565b611e0a91906131d4565b9250600061098f846050611e1e9190613268565b611e28919061316a565b9050600060508261098f611e3c9190613268565b611e46919061316a565b85611e5191906130d6565b9050600b82611e60919061316a565b945084600c611e6f9190613268565b600283611e7c91906131d4565b611e8691906130d6565b91508483603186611e9791906130d6565b6064611ea39190613268565b611ead91906131d4565b611eb791906131d4565b92508298508197508096505050505050509193909250565b8260028101928215611efe579160200282015b82811115611efd578251825591602001919060010190611ee2565b5b509050611f0b9190611f0f565b5090565b5b80821115611f28576000816000905550600101611f10565b5090565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f6682611f3b565b9050919050565b611f7681611f5b565b8114611f8157600080fd5b50565b600081359050611f9381611f6d565b92915050565b600060208284031215611faf57611fae611f36565b5b6000611fbd84828501611f84565b91505092915050565b60008115159050919050565b611fdb81611fc6565b82525050565b6000602082019050611ff66000830184611fd2565b92915050565b6000819050919050565b61200f81611ffc565b811461201a57600080fd5b50565b60008135905061202c81612006565b92915050565b600060ff82169050919050565b61204881612032565b811461205357600080fd5b50565b6000813590506120658161203f565b92915050565b600080600080600060a0868803121561208757612086611f36565b5b60006120958882890161201d565b95505060206120a688828901612056565b94505060406120b788828901612056565b93505060606120c888828901612056565b92505060806120d988828901612056565b9150509295509295909350565b6000602082840312156120fc576120fb611f36565b5b600061210a8482850161201d565b91505092915050565b6000806040838503121561212a57612129611f36565b5b60006121388582860161201d565b92505060206121498582860161201d565b9150509250929050565b61215c81611ffc565b82525050565b60006020820190506121776000830184612153565b92915050565b60008060006060848603121561219657612195611f36565b5b60006121a48682870161201d565b93505060206121b58682870161201d565b92505060406121c68682870161201d565b9150509250925092565b6121d981611f5b565b82525050565b60006020820190506121f460008301846121d0565b92915050565b600080600080600080600060e0888a03121561221957612218611f36565b5b60006122278a828b0161201d565b97505060206122388a828b0161201d565b96505060406122498a828b01612056565b955050606061225a8a828b01612056565b945050608061226b8a828b01612056565b93505060a061227c8a828b01612056565b92505060c061228d8a828b0161201d565b91505092959891949750929550565b60006122a782611f3b565b9050919050565b6122b78161229c565b82525050565b60006020820190506122d260008301846122ae565b92915050565b6000819050919050565b6122eb816122d8565b82525050565b600060208201905061230660008301846122e2565b92915050565b600082825260208201905092915050565b7f537461727420686f7572206d757374206265206265747765656e203020616e6460008201527f2032330000000000000000000000000000000000000000000000000000000000602082015250565b600061237960238361230c565b91506123848261231d565b604082019050919050565b600060208201905081810360008301526123a88161236c565b9050919050565b7f5374617274206d696e757465206d757374206265206265747765656e2030206160008201527f6e64203539000000000000000000000000000000000000000000000000000000602082015250565b600061240b60258361230c565b9150612416826123af565b604082019050919050565b6000602082019050818103600083015261243a816123fe565b9050919050565b7f456e6420686f7572206d757374206265206265747765656e203020616e64203260008201527f3300000000000000000000000000000000000000000000000000000000000000602082015250565b600061249d60218361230c565b91506124a882612441565b604082019050919050565b600060208201905081810360008301526124cc81612490565b9050919050565b7f456e64206d696e757465206d757374206265206265747765656e203020616e6460008201527f2035390000000000000000000000000000000000000000000000000000000000602082015250565b600061252f60238361230c565b915061253a826124d3565b604082019050919050565b6000602082019050818103600083015261255e81612522565b9050919050565b61256e81611fc6565b811461257957600080fd5b50565b60008151905061258b81612565565b92915050565b6000602082840312156125a7576125a6611f36565b5b60006125b58482850161257c565b91505092915050565b7f5061726b696e672073706f742063757272656e746c7920696e20757365210000600082015250565b60006125f4601e8361230c565b91506125ff826125be565b602082019050919050565b60006020820190508181036000830152612623816125e7565b9050919050565b7f4d757374206465706f736974206174206c6561737420302e3031204574680000600082015250565b6000612660601e8361230c565b915061266b8261262a565b602082019050919050565b6000602082019050818103600083015261268f81612653565b9050919050565b7f596f7520646f6e2774206861766520656e6f75676820455448206465706f736960008201527f74656420746f2070617920666f7220796f75722072657175657374656420647560208201527f726174696f6e2100000000000000000000000000000000000000000000000000604082015250565b600061271860478361230c565b915061272382612696565b606082019050919050565b600060208201905081810360008301526127478161270b565b9050919050565b7f5061726b696e672073706f7420697320756e617661696c61626c652100000000600082015250565b6000612784601c8361230c565b915061278f8261274e565b602082019050919050565b600060208201905081810360008301526127b381612777565b9050919050565b7f5061726b696e672073706f7420756e617661696c61626c65206174207468697360008201527f2074696d65210000000000000000000000000000000000000000000000000000602082015250565b600061281660268361230c565b9150612821826127ba565b604082019050919050565b6000602082019050818103600083015261284581612809565b9050919050565b60008151905061285b81611f6d565b92915050565b60006020828403121561287757612876611f36565b5b60006128858482850161284c565b91505092915050565b60006060820190506128a360008301866121d0565b6128b060208301856121d0565b6128bd6040830184612153565b949350505050565b60006040820190506128da6000830185612153565b6128e76020830184611fd2565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061295782611ffc565b915061296283611ffc565b9250828210156129755761297461291d565b5b828203905092915050565b7f53657373696f6e206973206e6f74206f76657221000000000000000000000000600082015250565b60006129b660148361230c565b91506129c182612980565b602082019050919050565b600060208201905081810360008301526129e5816129a9565b9050919050565b7f4e6f7420656e6f75676820455448206465706f73697465640000000000000000600082015250565b6000612a2260188361230c565b9150612a2d826129ec565b602082019050919050565b60006020820190508181036000830152612a5181612a15565b9050919050565b600081905092915050565b50565b6000612a73600083612a58565b9150612a7e82612a63565b600082019050919050565b6000612a9482612a66565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000612ad460148361230c565b9150612adf82612a9e565b602082019050919050565b60006020820190508181036000830152612b0381612ac7565b9050919050565b7f596f752063616e6e6f7420776974686472617720455448207768696c6520706160008201527f726b696e672073657373696f6e20696e2070726f67726573732e20506c65617360208201527f65207761697420756e74696c207468652073657373696f6e20697320636f6d7060408201527f6c657465642c206f7220656e64207468652073657373696f6e206d616e75616c60608201527f6c79210000000000000000000000000000000000000000000000000000000000608082015250565b6000612bd860838361230c565b9150612be382612b0a565b60a082019050919050565b60006020820190508181036000830152612c0781612bcb565b9050919050565b6000612c1982611ffc565b9150612c2483611ffc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612c5957612c5861291d565b5b828201905092915050565b6000612c6f82611ffc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ca257612ca161291d565b5b600182019050919050565b600081519050612cbc81612006565b92915050565b600060208284031215612cd857612cd7611f36565b5b6000612ce684828501612cad565b91505092915050565b6000612cfa82611ffc565b9150612d0583611ffc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612d3e57612d3d61291d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d8382611ffc565b9150612d8e83611ffc565b925082612d9e57612d9d612d49565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b612dc881612da9565b8114612dd357600080fd5b50565b600081519050612de581612dbf565b92915050565b612df4816122d8565b8114612dff57600080fd5b50565b600081519050612e1181612deb565b92915050565b600080600080600060a08688031215612e3357612e32611f36565b5b6000612e4188828901612dd6565b9550506020612e5288828901612e02565b9450506040612e6388828901612cad565b9350506060612e7488828901612cad565b9250506080612e8588828901612dd6565b9150509295509295909350565b600081519050612ea18161203f565b92915050565b60008060408385031215612ebe57612ebd611f36565b5b6000612ecc85828601612e92565b9250506020612edd85828601612e92565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f3582612eec565b810181811067ffffffffffffffff82111715612f5457612f53612efd565b5b80604052505050565b6000612f67611f2c565b9050612f738282612f2c565b919050565b600067ffffffffffffffff821115612f9357612f92612efd565b5b602082029050919050565b600080fd5b6000612fb6612fb184612f78565b612f5d565b90508060208402830185811115612fd057612fcf612f9e565b5b835b81811015612ff95780612fe58882612e92565b845260208401935050602081019050612fd2565b5050509392505050565b600082601f83011261301857613017612ee7565b5b6002613025848285612fa3565b91505092915050565b60006040828403121561304457613043611f36565b5b600061305284828501613003565b91505092915050565b600061ffff82169050919050565b60006130748261305b565b915061307f8361305b565b92508161ffff048311821515161561309a5761309961291d565b5b828202905092915050565b60006130b082611ffc565b91506130bb83611ffc565b9250826130cb576130ca612d49565b5b828206905092915050565b60006130e1826122d8565b91506130ec836122d8565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156131275761312661291d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01821360008412161561315f5761315e61291d565b5b828203905092915050565b6000613175826122d8565b9150613180836122d8565b9250826131905761318f612d49565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156131c9576131c861291d565b5b828205905092915050565b60006131df826122d8565b91506131ea836122d8565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156132255761322461291d565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561325d5761325c61291d565b5b828201905092915050565b6000613273826122d8565b915061327e836122d8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156132bd576132bc61291d565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156132fa576132f961291d565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156133375761333661291d565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156133745761337361291d565b5b82820290509291505056fea2646970667358221220988fbca6855963336677d7ce2dfd75360d5404195a1cc96de00ffefcea8f8cb664736f6c634300080c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2455,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "current",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(DateTime)2437_storage"
      },
      {
        "astId": 2459,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "depositors",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2463,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "currentParkingSpotOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2469,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "requestedParkingTimes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 2473,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "sessionInProgress",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2477,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "sessionCost",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2482,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "availableSlots",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(TimeSlots)2444_storage)"
      },
      {
        "astId": 2484,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "testLoop",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2487,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "ethUSDpriceFeed",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 2501,
        "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
        "label": "owner",
        "offset": 0,
        "slot": "14",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_uint256,t_struct(TimeSlots)2444_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RequestParkingSpotToken.TimeSlots)",
        "numberOfBytes": "32",
        "value": "t_struct(TimeSlots)2444_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DateTime)2437_storage": {
        "encoding": "inplace",
        "label": "struct RequestParkingSpotToken.DateTime",
        "members": [
          {
            "astId": 2426,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Year",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2428,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Month",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2430,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Day",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2432,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Hour",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2434,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Minute",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2436,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "Second",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(TimeSlots)2444_storage": {
        "encoding": "inplace",
        "label": "struct RequestParkingSpotToken.TimeSlots",
        "members": [
          {
            "astId": 2440,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2443,
            "contract": "contracts/RequestParkingSpotToken.sol:RequestParkingSpotToken",
            "label": "endTime",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
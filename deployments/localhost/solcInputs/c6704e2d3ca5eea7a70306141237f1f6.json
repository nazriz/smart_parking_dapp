{
  "language": "Solidity",
  "sources": {
    "contracts/ParkingSpotAttributes.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface ParkingSpotToken {\n    function ownerOf(uint) external view returns (address);\n}\n\n\ncontract ParkingSpotAttributes {\n\nstruct availabilityTimes {\n    uint16 startTime;\n    uint16 endTime;\n}\n\nmapping(uint => bool) public spot_available;\nmapping(uint=> availabilityTimes) public permittedParkingTime;\n\n\n// Interface address is for local network, must be updated for network deployed to.\nParkingSpotToken constant pst = ParkingSpotToken(0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9);\n\nfunction isApprovedOrOwner(uint _parking_spot_id) internal view returns (bool) {\n        return pst.ownerOf(_parking_spot_id) == msg.sender;\n    }\n\nfunction setSpotAvailability(uint _parking_spot_id, bool _availability) external {\n    require(isApprovedOrOwner(_parking_spot_id), \"Not approved to update parking spot Availability\"); \n    spot_available[_parking_spot_id] = _availability;\n}\n\nfunction setSpotPermittedParkingTime(uint _parking_spot_id, uint16 _start_time, uint16 _end_time) external {\n    require(isApprovedOrOwner(_parking_spot_id), \"Not approved to update parking spot availability times\");\n    permittedParkingTime[_parking_spot_id] = availabilityTimes(_start_time, _end_time);\n}\n\nfunction checkSpotAvailability(uint _parking_spot_id) public view returns (bool) {\n    return spot_available[_parking_spot_id];\n}\n\nfunction checkSpotPermittedParkingStartTime(uint _parking_spot_id) public view returns (uint16) {\n    availabilityTimes storage _attr = permittedParkingTime[_parking_spot_id];\n    return _attr.startTime;\n}\n\nfunction checkSpotPermittedParkingEndTime(uint _parking_spot_id) public view returns (uint16) {\n    availabilityTimes storage _attr = permittedParkingTime[_parking_spot_id];\n    return _attr.endTime;\n}\n}"
    },
    "contracts/RequestParkingSpotToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n\ncontract RequestParkingSpotToken {\n    // Payable address can receive Ether\n    address payable public owner;\n\n    // Payable constructor can receive Ether\n    constructor() payable {\n        owner = payable(msg.sender);\n    }\n\n    // Function to deposit Ether into this contract.\n    // Call this function along with some Ether.\n    // The balance of this contract will be automatically updated.\n    function deposit() public payable {}\n\n    // Call this function along with some Ether.\n    // The function will throw an error since this function is not payable.\n    function notPayable() public {}\n\n    // Function to withdraw all Ether from this contract.\n    function withdraw() public {\n        // get the amount of Ether stored in this contract\n        uint amount = address(this).balance;\n\n        // send all Ether to owner\n        // Owner can receive Ether since the address of owner is payable\n        (bool success, ) = owner.call{value: amount}(\"\");\n        require(success, \"Failed to send Ether\");\n    }\n\n    // Function to transfer Ether from this contract to address from input\n    function transfer(address payable _to, uint _amount) public {\n        // Note that \"to\" is declared as payable\n        (bool success, ) = _to.call{value: _amount}(\"\");\n        require(success, \"Failed to send Ether\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
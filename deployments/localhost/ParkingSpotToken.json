{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_parkingSpotOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForRequestContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_index",
          "type": "uint16"
        }
      ],
      "name": "mintParkingSpot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForRequestContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "spotTokenised",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa00f6db090ed2fa5e1dabbf13563c92bf7293bb7a0fb5d3ec77e1826a389dcd9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "2965122",
    "logsBloom": "0x
    "blockHash": "0xf377121105bece2608f887559af3c4bb3bfa232abe358d629f6b1a20dd5986c5",
    "transactionHash": "0xa00f6db090ed2fa5e1dabbf13563c92bf7293bb7a0fb5d3ec77e1826a389dcd9",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "2965122",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4a0ac90c94295af46183ead8bddf886b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_parkingSpotOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForRequestContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"}],\"name\":\"mintParkingSpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForRequestContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"spotTokenised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ParkingSpotToken.sol\":\"ParkingSpotToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./openzeppelin/ERC721/IERC721.sol\\\";\\nimport \\\"./openzeppelin/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"./openzeppelin/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"./openzeppelin/utils/Address.sol\\\";\\nimport \\\"./openzeppelin/utils/Context.sol\\\";\\nimport \\\"./openzeppelin/utils/Strings.sol\\\";\\nimport \\\"./openzeppelin/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    mapping(uint => mapping(address => bool)) internal _approvedForRequestContract;\\n\\n    mapping(uint256 => address) public _parkingSpotOwners;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    function setApprovalForRequestContract(uint256 tokenId, address operator, bool approved) public virtual {\\n        _setApprovalForRequestContract(msg.sender, tokenId, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function isApprovedForRequestContract(uint256 tokenId, address operator) public view virtual returns (bool) {\\n        return  _approvedForRequestContract[tokenId][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n        _parkingSpotOwners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    function checkParkingSpotOwners(uint tokenId, address sender) internal returns (bool) {\\n        return _parkingSpotOwners[tokenId] == sender;\\n\\n        // if (_parkingSpotOwners[tokenId] == sender) {\\n        //     return true;\\n        // } else {\\n        //     return false;\\n        // }\\n\\n         \\n    }\\n\\n    function _setApprovalForRequestContract(\\n        address sender,\\n        uint tokenId,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(checkParkingSpotOwners(tokenId, sender), \\\"Only the true owner of the parking token can change approval status for the parking Requests contract. \\\");\\n        _approvedForRequestContract[tokenId][operator] = approved;\\n\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x13c2147215369ac9701961f55a6a2eb8c4091e778dda17448f903456a9e2d1e7\",\"license\":\"MIT\"},\"contracts/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x15bb93c43c4348034826187df8c5d9150ab1d3e68123580bd96c235ef92a9a19\",\"license\":\"MIT\"},\"contracts/ParkingSpotToken.sol\":{\"content\":\"// contracts/GameItem.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"./ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ninterface OffchainParkingDataResponse {\\n    function checkParkingSpotLocationOwner(address _address) external view returns ( bytes32);\\n    function checkParkingSpotLocationOwnerArray(address _address, uint16 _index) external view returns ( bytes32);\\n}\\ncontract ParkingSpotToken is ERC721URIStorage {\\n\\n    mapping(bytes32=>bool) public spotTokenised;\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIds;\\n\\n    constructor() ERC721(\\\"ParkingSpotToken\\\", \\\"PST\\\") public {\\n    }\\n\\n// Interface address is for local network, must be updated for network deployed to.\\n\\n    OffchainParkingDataResponse constant opdr = OffchainParkingDataResponse(0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0);\\n\\n\\n    function confirmNotMinted(bytes32 _parkingSpot) internal view returns (bool) {\\n        return spotTokenised[_parkingSpot];\\n    }\\n\\n    function retrieveLatLongBytes(uint16 _index) internal returns (bytes32) {\\n        return opdr.checkParkingSpotLocationOwnerArray(msg.sender, _index);\\n    }\\n\\n    function generateTokenURI(bytes32 _parkingSpot) internal returns (string memory ) {\\n        require(!confirmNotMinted(_parkingSpot), \\\"Parking spot co-ordinates are already minted as a token\\\");\\n        string memory plainDataSchemeURI = \\\"data:text/plain;charset=UTF-8,parkingSpotLatLong:\\\";\\n        string memory parkingSpotString = Strings.toHexString(uint160(msg.sender), 32);\\n        string memory dataSchemeURI = string.concat(plainDataSchemeURI,parkingSpotString);\\n        return dataSchemeURI;\\n    }\\n\\n    function prepareData(uint16 _index) internal returns (string memory) {\\n        bytes32 parkingSpotLatLong = retrieveLatLongBytes(_index);\\n        string memory finalTokenURI = generateTokenURI(parkingSpotLatLong);\\n        return finalTokenURI;\\n    }\\n\\n\\n    function mintParkingSpot(address user, uint16 _index) public returns (uint256) {\\n        _tokenIds.increment();\\n\\n        string memory tokenURI = prepareData(_index);\\n\\n        uint256 newItemId = _tokenIds.current();\\n        _mint(user, newItemId);\\n        _setTokenURI(newItemId, tokenURI);\\n\\n        return newItemId;\\n    }\\n\\n    // function safeTransferFromWithOwnerApprovals(\\n    //     address from,\\n    //     address to,\\n    //     uint256 tokenId\\n    // ) public virtual {\\n    //     require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n    //     _safeTransferWithOwnerApprovals(from, to, tokenId, \\\"0x\\\");\\n    // }\\n\\n    // function _safeTransferWithOwnerApprovals(\\n    //     address from,\\n    //     address to,\\n    //     uint256 tokenId,\\n    //     bytes memory data\\n    // ) internal virtual {\\n    //     _transferWithOwnerApprovals(from, to, tokenId);\\n    //     require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    // }\\n\\n    // function _transferWithOwnerApprovals(\\n    //     address from,\\n    //     address to,\\n    //     uint256 tokenId\\n    // ) internal virtual {\\n    //     require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n    //     require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n    //     _beforeTokenTransfer(from, to, tokenId);\\n\\n    //     // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n    //     require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n    //     // Clear approvals from the previous owner\\n    //     // delete _tokenApprovals[tokenId];\\n\\n    //     unchecked {\\n    //         // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n    //         // `from`'s balance is the number of token held, which is at least one before the current\\n    //         // transfer.\\n    //         // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n    //         // all 2**256 token ids to be minted, which in practice is impossible.\\n    //         _balances[from] -= 1;\\n    //         _balances[to] += 1;\\n    //     }\\n    //     _owners[tokenId] = to;\\n    //     _parkingSpotOwners[tokenId] = to;\\n\\n    //     emit Transfer(from, to, tokenId);\\n\\n    //     _afterTokenTransfer(from, to, tokenId);\\n    // }\\n\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual override returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender) || isApprovedForRequestContract(tokenId, spender);\\n    }\\n    \\n}\",\"keccak256\":\"0xfdfb211ec65ff938dda3c929234443fa47726057e94fc66378f78d7cf29cedae\",\"license\":\"MIT\"},\"contracts/openzeppelin/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9fc95022b555d8009f0007a93ddf955523aaa0ca0877cd8edc4579f1f819bb1b\",\"license\":\"MIT\"},\"contracts/openzeppelin/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"contracts/openzeppelin/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"contracts/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9720545d8ea1f76222f98683f861f919e9c28bd5d5503caa7e3620a21b6aaa24\",\"license\":\"MIT\"},\"contracts/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/openzeppelin/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/openzeppelin/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"contracts/openzeppelin/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280601081526020017f5061726b696e6753706f74546f6b656e000000000000000000000000000000008152506040518060400160405280600381526020017f5053540000000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000b8565b508060019080519060200190620000af929190620000b8565b505050620001cd565b828054620000c69062000197565b90600052602060002090601f016020900481019282620000ea576000855562000136565b82601f106200010557805160ff191683800117855562000136565b8280016001018555821562000136579182015b828111156200013557825182559160200191906001019062000118565b5b50905062000145919062000149565b5090565b5b80821115620001645760008160009055506001016200014a565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001b057607f821691505b60208210811415620001c757620001c662000168565b5b50919050565b61340180620001dd6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a2578063b88d4fde11610071578063b88d4fde14610303578063c55fd06b1461031f578063c87b56dd1461034f578063cc6b64a41461037f578063e985e9c5146103af57610116565b806370a08231146102695780637ac485e71461029957806395d89b41146102c9578063a22cb465146102e757610116565b806323b872dd116100e957806323b872dd146101b55780632d67219e146101d157806333a92ccd1461020157806342842e0e1461021d5780636352211e1461023957610116565b806301ffc9a71461011b57806306fdde031461014b578063081812fc14610169578063095ea7b314610199575b600080fd5b61013560048036038101906101309190612053565b6103df565b604051610142919061209b565b60405180910390f35b6101536104c1565b604051610160919061214f565b60405180910390f35b610183600480360381019061017e91906121a7565b610553565b6040516101909190612215565b60405180910390f35b6101b360048036038101906101ae919061225c565b610599565b005b6101cf60048036038101906101ca919061229c565b6106b1565b005b6101eb60048036038101906101e69190612329565b610711565b6040516101f89190612378565b60405180910390f35b61021b600480360381019061021691906123bf565b610757565b005b6102376004803603810190610232919061229c565b610768565b005b610253600480360381019061024e91906121a7565b610788565b6040516102609190612215565b60405180910390f35b610283600480360381019061027e9190612412565b61083a565b6040516102909190612378565b60405180910390f35b6102b360048036038101906102ae919061243f565b6108f2565b6040516102c0919061209b565b60405180910390f35b6102d161095a565b6040516102de919061214f565b60405180910390f35b61030160048036038101906102fc919061247f565b6109ec565b005b61031d600480360381019061031891906125f4565b610a02565b005b610339600480360381019061033491906121a7565b610a64565b6040516103469190612215565b60405180910390f35b610369600480360381019061036491906121a7565b610a97565b604051610376919061214f565b60405180910390f35b610399600480360381019061039491906126ad565b610baa565b6040516103a6919061209b565b60405180910390f35b6103c960048036038101906103c491906126da565b610bca565b6040516103d6919061209b565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104aa57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104ba57506104b982610c5e565b5b9050919050565b6060600080546104d090612749565b80601f01602080910402602001604051908101604052809291908181526020018280546104fc90612749565b80156105495780601f1061051e57610100808354040283529160200191610549565b820191906000526020600020905b81548152906001019060200180831161052c57829003601f168201915b5050505050905090565b600061055e82610cc8565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105a482610788565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c906127ed565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610634610d13565b73ffffffffffffffffffffffffffffffffffffffff16148061066357506106628161065d610d13565b610bca565b5b6106a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106999061287f565b60405180910390fd5b6106ac8383610d1b565b505050565b6106c26106bc610d13565b82610dd4565b610701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f890612911565b60405180910390fd5b61070c838383610e7a565b505050565b600061071d600a611170565b600061072883611186565b90506000610736600a6111ac565b905061074285826111ba565b61074c8183611426565b809250505092915050565b6107633384848461149a565b505050565b61078383838360405180602001604052806000815250610a02565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610831576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108289061297d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a290612a0f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006006600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606001805461096990612749565b80601f016020809104026020016040519081016040528092919081815260200182805461099590612749565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b5050505050905090565b6109fe6109f7610d13565b8383611551565b5050565b610a13610a0d610d13565b83610dd4565b610a52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4990612911565b60405180910390fd5b610a5e848484846116be565b50505050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060610aa282610cc8565b6000600860008481526020019081526020016000208054610ac290612749565b80601f0160208091040260200160405190810160405280929190818152602001828054610aee90612749565b8015610b3b5780601f10610b1057610100808354040283529160200191610b3b565b820191906000526020600020905b815481529060010190602001808311610b1e57829003601f168201915b505050505090506000610b4c61171a565b9050600081511415610b62578192505050610ba5565b600082511115610b97578082604051602001610b7f929190612a6b565b60405160208183030381529060405292505050610ba5565b610ba084611731565b925050505b919050565b60096020528060005260406000206000915054906101000a900460ff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610cd181611799565b610d10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d079061297d565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610d8e83610788565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610de083610788565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610e225750610e218185610bca565b5b80610e6057508373ffffffffffffffffffffffffffffffffffffffff16610e4884610553565b73ffffffffffffffffffffffffffffffffffffffff16145b80610e715750610e7083856108f2565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610e9a82610788565b73ffffffffffffffffffffffffffffffffffffffff1614610ef0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee790612b01565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5790612b93565b60405180910390fd5b610f6b838383611805565b8273ffffffffffffffffffffffffffffffffffffffff16610f8b82610788565b73ffffffffffffffffffffffffffffffffffffffff1614610fe1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd890612b01565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461116b83838361180a565b505050565b6001816000016000828254019250508190555050565b606060006111938361180f565b905060006111a0826118a8565b90508092505050919050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561122a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122190612bff565b60405180910390fd5b61123381611799565b15611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126a90612c6b565b60405180910390fd5b61127f60008383611805565b61128881611799565b156112c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bf90612c6b565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46114226000838361180a565b5050565b61142f82611799565b61146e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146590612cfd565b60405180910390fd5b80600860008481526020019081526020016000209080519060200190611495929190611f44565b505050565b6114a48385611966565b6114e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114da90612ddb565b60405180910390fd5b806006600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156115c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b790612e47565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116b1919061209b565b60405180910390a3505050565b6116c9848484610e7a565b6116d5848484846119d2565b611714576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170b90612ed9565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061173c82610cc8565b600061174661171a565b905060008151116117665760405180602001604052806000815250611791565b8061177084611b5a565b604051602001611781929190612a6b565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000739fe46736679d2d9a65f0992f2272de9f3c7fa6e073ffffffffffffffffffffffffffffffffffffffff16630902d94933846040518363ffffffff1660e01b8152600401611860929190612f08565b602060405180830381865afa15801561187d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a19190612f46565b9050919050565b60606118b382611cbb565b156118f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ea90612fe5565b60405180910390fd5b600060405180606001604052806031815260200161339b60319139905060006119333373ffffffffffffffffffffffffffffffffffffffff166020611ce5565b90506000828260405160200161194a929190612a6b565b6040516020818303038152906040529050809350505050919050565b60008173ffffffffffffffffffffffffffffffffffffffff166007600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b60006119f38473ffffffffffffffffffffffffffffffffffffffff16611f21565b15611b4d578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a1c610d13565b8786866040518563ffffffff1660e01b8152600401611a3e949392919061305a565b6020604051808303816000875af1925050508015611a7a57506040513d601f19601f82011682018060405250810190611a7791906130bb565b60015b611afd573d8060008114611aaa576040519150601f19603f3d011682016040523d82523d6000602084013e611aaf565b606091505b50600081511415611af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aec90612ed9565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611b52565b600190505b949350505050565b60606000821415611ba2576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611cb6565b600082905060005b60008214611bd4578080611bbd90613117565b915050600a82611bcd919061318f565b9150611baa565b60008167ffffffffffffffff811115611bf057611bef6124c9565b5b6040519080825280601f01601f191660200182016040528015611c225781602001600182028036833780820191505090505b5090505b60008514611caf57600182611c3b91906131c0565b9150600a85611c4a91906131f4565b6030611c569190613225565b60f81b818381518110611c6c57611c6b61327b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611ca8919061318f565b9450611c26565b8093505050505b919050565b60006009600083815260200190815260200160002060009054906101000a900460ff169050919050565b606060006002836002611cf891906132aa565b611d029190613225565b67ffffffffffffffff811115611d1b57611d1a6124c9565b5b6040519080825280601f01601f191660200182016040528015611d4d5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611d8557611d8461327b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611de957611de861327b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611e2991906132aa565b611e339190613225565b90505b6001811115611ed3577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611e7557611e7461327b565b5b1a60f81b828281518110611e8c57611e8b61327b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611ecc90613304565b9050611e36565b5060008414611f17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0e9061337a565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611f5090612749565b90600052602060002090601f016020900481019282611f725760008555611fb9565b82601f10611f8b57805160ff1916838001178555611fb9565b82800160010185558215611fb9579182015b82811115611fb8578251825591602001919060010190611f9d565b5b509050611fc69190611fca565b5090565b5b80821115611fe3576000816000905550600101611fcb565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61203081611ffb565b811461203b57600080fd5b50565b60008135905061204d81612027565b92915050565b60006020828403121561206957612068611ff1565b5b60006120778482850161203e565b91505092915050565b60008115159050919050565b61209581612080565b82525050565b60006020820190506120b0600083018461208c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120f05780820151818401526020810190506120d5565b838111156120ff576000848401525b50505050565b6000601f19601f8301169050919050565b6000612121826120b6565b61212b81856120c1565b935061213b8185602086016120d2565b61214481612105565b840191505092915050565b600060208201905081810360008301526121698184612116565b905092915050565b6000819050919050565b61218481612171565b811461218f57600080fd5b50565b6000813590506121a18161217b565b92915050565b6000602082840312156121bd576121bc611ff1565b5b60006121cb84828501612192565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121ff826121d4565b9050919050565b61220f816121f4565b82525050565b600060208201905061222a6000830184612206565b92915050565b612239816121f4565b811461224457600080fd5b50565b60008135905061225681612230565b92915050565b6000806040838503121561227357612272611ff1565b5b600061228185828601612247565b925050602061229285828601612192565b9150509250929050565b6000806000606084860312156122b5576122b4611ff1565b5b60006122c386828701612247565b93505060206122d486828701612247565b92505060406122e586828701612192565b9150509250925092565b600061ffff82169050919050565b612306816122ef565b811461231157600080fd5b50565b600081359050612323816122fd565b92915050565b600080604083850312156123405761233f611ff1565b5b600061234e85828601612247565b925050602061235f85828601612314565b9150509250929050565b61237281612171565b82525050565b600060208201905061238d6000830184612369565b92915050565b61239c81612080565b81146123a757600080fd5b50565b6000813590506123b981612393565b92915050565b6000806000606084860312156123d8576123d7611ff1565b5b60006123e686828701612192565b93505060206123f786828701612247565b9250506040612408868287016123aa565b9150509250925092565b60006020828403121561242857612427611ff1565b5b600061243684828501612247565b91505092915050565b6000806040838503121561245657612455611ff1565b5b600061246485828601612192565b925050602061247585828601612247565b9150509250929050565b6000806040838503121561249657612495611ff1565b5b60006124a485828601612247565b92505060206124b5858286016123aa565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61250182612105565b810181811067ffffffffffffffff821117156125205761251f6124c9565b5b80604052505050565b6000612533611fe7565b905061253f82826124f8565b919050565b600067ffffffffffffffff82111561255f5761255e6124c9565b5b61256882612105565b9050602081019050919050565b82818337600083830152505050565b600061259761259284612544565b612529565b9050828152602081018484840111156125b3576125b26124c4565b5b6125be848285612575565b509392505050565b600082601f8301126125db576125da6124bf565b5b81356125eb848260208601612584565b91505092915050565b6000806000806080858703121561260e5761260d611ff1565b5b600061261c87828801612247565b945050602061262d87828801612247565b935050604061263e87828801612192565b925050606085013567ffffffffffffffff81111561265f5761265e611ff6565b5b61266b878288016125c6565b91505092959194509250565b6000819050919050565b61268a81612677565b811461269557600080fd5b50565b6000813590506126a781612681565b92915050565b6000602082840312156126c3576126c2611ff1565b5b60006126d184828501612698565b91505092915050565b600080604083850312156126f1576126f0611ff1565b5b60006126ff85828601612247565b925050602061271085828601612247565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061276157607f821691505b602082108114156127755761277461271a565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006127d76021836120c1565b91506127e28261277b565b604082019050919050565b60006020820190508181036000830152612806816127ca565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612869603d836120c1565b91506128748261280d565b604082019050919050565b600060208201905081810360008301526128988161285c565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006128fb602d836120c1565b91506129068261289f565b604082019050919050565b6000602082019050818103600083015261292a816128ee565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006129676018836120c1565b915061297282612931565b602082019050919050565b600060208201905081810360008301526129968161295a565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006129f96029836120c1565b9150612a048261299d565b604082019050919050565b60006020820190508181036000830152612a28816129ec565b9050919050565b600081905092915050565b6000612a45826120b6565b612a4f8185612a2f565b9350612a5f8185602086016120d2565b80840191505092915050565b6000612a778285612a3a565b9150612a838284612a3a565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612aeb6025836120c1565b9150612af682612a8f565b604082019050919050565b60006020820190508181036000830152612b1a81612ade565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612b7d6024836120c1565b9150612b8882612b21565b604082019050919050565b60006020820190508181036000830152612bac81612b70565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612be96020836120c1565b9150612bf482612bb3565b602082019050919050565b60006020820190508181036000830152612c1881612bdc565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612c55601c836120c1565b9150612c6082612c1f565b602082019050919050565b60006020820190508181036000830152612c8481612c48565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612ce7602e836120c1565b9150612cf282612c8b565b604082019050919050565b60006020820190508181036000830152612d1681612cda565b9050919050565b7f4f6e6c79207468652074727565206f776e6572206f6620746865207061726b6960008201527f6e6720746f6b656e2063616e206368616e676520617070726f76616c2073746160208201527f74757320666f7220746865207061726b696e6720526571756573747320636f6e60408201527f74726163742e2000000000000000000000000000000000000000000000000000606082015250565b6000612dc56067836120c1565b9150612dd082612d1d565b608082019050919050565b60006020820190508181036000830152612df481612db8565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612e316019836120c1565b9150612e3c82612dfb565b602082019050919050565b60006020820190508181036000830152612e6081612e24565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612ec36032836120c1565b9150612ece82612e67565b604082019050919050565b60006020820190508181036000830152612ef281612eb6565b9050919050565b612f02816122ef565b82525050565b6000604082019050612f1d6000830185612206565b612f2a6020830184612ef9565b9392505050565b600081519050612f4081612681565b92915050565b600060208284031215612f5c57612f5b611ff1565b5b6000612f6a84828501612f31565b91505092915050565b7f5061726b696e672073706f7420636f2d6f7264696e617465732061726520616c60008201527f7265616479206d696e746564206173206120746f6b656e000000000000000000602082015250565b6000612fcf6037836120c1565b9150612fda82612f73565b604082019050919050565b60006020820190508181036000830152612ffe81612fc2565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061302c82613005565b6130368185613010565b93506130468185602086016120d2565b61304f81612105565b840191505092915050565b600060808201905061306f6000830187612206565b61307c6020830186612206565b6130896040830185612369565b818103606083015261309b8184613021565b905095945050505050565b6000815190506130b581612027565b92915050565b6000602082840312156130d1576130d0611ff1565b5b60006130df848285016130a6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061312282612171565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613155576131546130e8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061319a82612171565b91506131a583612171565b9250826131b5576131b4613160565b5b828204905092915050565b60006131cb82612171565b91506131d683612171565b9250828210156131e9576131e86130e8565b5b828203905092915050565b60006131ff82612171565b915061320a83612171565b92508261321a57613219613160565b5b828206905092915050565b600061323082612171565b915061323b83612171565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156132705761326f6130e8565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006132b582612171565b91506132c083612171565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132f9576132f86130e8565b5b828202905092915050565b600061330f82612171565b91506000821415613323576133226130e8565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006133646020836120c1565b915061336f8261332e565b602082019050919050565b6000602082019050818103600083015261339381613357565b905091905056fe646174613a746578742f706c61696e3b636861727365743d5554462d382c7061726b696e6753706f744c61744c6f6e673aa26469706673582212202dd4ac5e8662ace1c3c48a0eefb39cb7467be7a30ea12f7d64228ad43d7b52c964736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a2578063b88d4fde11610071578063b88d4fde14610303578063c55fd06b1461031f578063c87b56dd1461034f578063cc6b64a41461037f578063e985e9c5146103af57610116565b806370a08231146102695780637ac485e71461029957806395d89b41146102c9578063a22cb465146102e757610116565b806323b872dd116100e957806323b872dd146101b55780632d67219e146101d157806333a92ccd1461020157806342842e0e1461021d5780636352211e1461023957610116565b806301ffc9a71461011b57806306fdde031461014b578063081812fc14610169578063095ea7b314610199575b600080fd5b61013560048036038101906101309190612053565b6103df565b604051610142919061209b565b60405180910390f35b6101536104c1565b604051610160919061214f565b60405180910390f35b610183600480360381019061017e91906121a7565b610553565b6040516101909190612215565b60405180910390f35b6101b360048036038101906101ae919061225c565b610599565b005b6101cf60048036038101906101ca919061229c565b6106b1565b005b6101eb60048036038101906101e69190612329565b610711565b6040516101f89190612378565b60405180910390f35b61021b600480360381019061021691906123bf565b610757565b005b6102376004803603810190610232919061229c565b610768565b005b610253600480360381019061024e91906121a7565b610788565b6040516102609190612215565b60405180910390f35b610283600480360381019061027e9190612412565b61083a565b6040516102909190612378565b60405180910390f35b6102b360048036038101906102ae919061243f565b6108f2565b6040516102c0919061209b565b60405180910390f35b6102d161095a565b6040516102de919061214f565b60405180910390f35b61030160048036038101906102fc919061247f565b6109ec565b005b61031d600480360381019061031891906125f4565b610a02565b005b610339600480360381019061033491906121a7565b610a64565b6040516103469190612215565b60405180910390f35b610369600480360381019061036491906121a7565b610a97565b604051610376919061214f565b60405180910390f35b610399600480360381019061039491906126ad565b610baa565b6040516103a6919061209b565b60405180910390f35b6103c960048036038101906103c491906126da565b610bca565b6040516103d6919061209b565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104aa57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104ba57506104b982610c5e565b5b9050919050565b6060600080546104d090612749565b80601f01602080910402602001604051908101604052809291908181526020018280546104fc90612749565b80156105495780601f1061051e57610100808354040283529160200191610549565b820191906000526020600020905b81548152906001019060200180831161052c57829003601f168201915b5050505050905090565b600061055e82610cc8565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105a482610788565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060c906127ed565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610634610d13565b73ffffffffffffffffffffffffffffffffffffffff16148061066357506106628161065d610d13565b610bca565b5b6106a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106999061287f565b60405180910390fd5b6106ac8383610d1b565b505050565b6106c26106bc610d13565b82610dd4565b610701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f890612911565b60405180910390fd5b61070c838383610e7a565b505050565b600061071d600a611170565b600061072883611186565b90506000610736600a6111ac565b905061074285826111ba565b61074c8183611426565b809250505092915050565b6107633384848461149a565b505050565b61078383838360405180602001604052806000815250610a02565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610831576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108289061297d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a290612a0f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006006600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606001805461096990612749565b80601f016020809104026020016040519081016040528092919081815260200182805461099590612749565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b5050505050905090565b6109fe6109f7610d13565b8383611551565b5050565b610a13610a0d610d13565b83610dd4565b610a52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4990612911565b60405180910390fd5b610a5e848484846116be565b50505050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060610aa282610cc8565b6000600860008481526020019081526020016000208054610ac290612749565b80601f0160208091040260200160405190810160405280929190818152602001828054610aee90612749565b8015610b3b5780601f10610b1057610100808354040283529160200191610b3b565b820191906000526020600020905b815481529060010190602001808311610b1e57829003601f168201915b505050505090506000610b4c61171a565b9050600081511415610b62578192505050610ba5565b600082511115610b97578082604051602001610b7f929190612a6b565b60405160208183030381529060405292505050610ba5565b610ba084611731565b925050505b919050565b60096020528060005260406000206000915054906101000a900460ff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610cd181611799565b610d10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d079061297d565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610d8e83610788565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610de083610788565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610e225750610e218185610bca565b5b80610e6057508373ffffffffffffffffffffffffffffffffffffffff16610e4884610553565b73ffffffffffffffffffffffffffffffffffffffff16145b80610e715750610e7083856108f2565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610e9a82610788565b73ffffffffffffffffffffffffffffffffffffffff1614610ef0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee790612b01565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5790612b93565b60405180910390fd5b610f6b838383611805565b8273ffffffffffffffffffffffffffffffffffffffff16610f8b82610788565b73ffffffffffffffffffffffffffffffffffffffff1614610fe1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd890612b01565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461116b83838361180a565b505050565b6001816000016000828254019250508190555050565b606060006111938361180f565b905060006111a0826118a8565b90508092505050919050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561122a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122190612bff565b60405180910390fd5b61123381611799565b15611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126a90612c6b565b60405180910390fd5b61127f60008383611805565b61128881611799565b156112c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bf90612c6b565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46114226000838361180a565b5050565b61142f82611799565b61146e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146590612cfd565b60405180910390fd5b80600860008481526020019081526020016000209080519060200190611495929190611f44565b505050565b6114a48385611966565b6114e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114da90612ddb565b60405180910390fd5b806006600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156115c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b790612e47565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116b1919061209b565b60405180910390a3505050565b6116c9848484610e7a565b6116d5848484846119d2565b611714576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170b90612ed9565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061173c82610cc8565b600061174661171a565b905060008151116117665760405180602001604052806000815250611791565b8061177084611b5a565b604051602001611781929190612a6b565b6040516020818303038152906040525b915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000739fe46736679d2d9a65f0992f2272de9f3c7fa6e073ffffffffffffffffffffffffffffffffffffffff16630902d94933846040518363ffffffff1660e01b8152600401611860929190612f08565b602060405180830381865afa15801561187d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a19190612f46565b9050919050565b60606118b382611cbb565b156118f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ea90612fe5565b60405180910390fd5b600060405180606001604052806031815260200161339b60319139905060006119333373ffffffffffffffffffffffffffffffffffffffff166020611ce5565b90506000828260405160200161194a929190612a6b565b6040516020818303038152906040529050809350505050919050565b60008173ffffffffffffffffffffffffffffffffffffffff166007600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b60006119f38473ffffffffffffffffffffffffffffffffffffffff16611f21565b15611b4d578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a1c610d13565b8786866040518563ffffffff1660e01b8152600401611a3e949392919061305a565b6020604051808303816000875af1925050508015611a7a57506040513d601f19601f82011682018060405250810190611a7791906130bb565b60015b611afd573d8060008114611aaa576040519150601f19603f3d011682016040523d82523d6000602084013e611aaf565b606091505b50600081511415611af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aec90612ed9565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611b52565b600190505b949350505050565b60606000821415611ba2576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611cb6565b600082905060005b60008214611bd4578080611bbd90613117565b915050600a82611bcd919061318f565b9150611baa565b60008167ffffffffffffffff811115611bf057611bef6124c9565b5b6040519080825280601f01601f191660200182016040528015611c225781602001600182028036833780820191505090505b5090505b60008514611caf57600182611c3b91906131c0565b9150600a85611c4a91906131f4565b6030611c569190613225565b60f81b818381518110611c6c57611c6b61327b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611ca8919061318f565b9450611c26565b8093505050505b919050565b60006009600083815260200190815260200160002060009054906101000a900460ff169050919050565b606060006002836002611cf891906132aa565b611d029190613225565b67ffffffffffffffff811115611d1b57611d1a6124c9565b5b6040519080825280601f01601f191660200182016040528015611d4d5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611d8557611d8461327b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611de957611de861327b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611e2991906132aa565b611e339190613225565b90505b6001811115611ed3577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611e7557611e7461327b565b5b1a60f81b828281518110611e8c57611e8b61327b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611ecc90613304565b9050611e36565b5060008414611f17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0e9061337a565b60405180910390fd5b8091505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054611f5090612749565b90600052602060002090601f016020900481019282611f725760008555611fb9565b82601f10611f8b57805160ff1916838001178555611fb9565b82800160010185558215611fb9579182015b82811115611fb8578251825591602001919060010190611f9d565b5b509050611fc69190611fca565b5090565b5b80821115611fe3576000816000905550600101611fcb565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61203081611ffb565b811461203b57600080fd5b50565b60008135905061204d81612027565b92915050565b60006020828403121561206957612068611ff1565b5b60006120778482850161203e565b91505092915050565b60008115159050919050565b61209581612080565b82525050565b60006020820190506120b0600083018461208c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120f05780820151818401526020810190506120d5565b838111156120ff576000848401525b50505050565b6000601f19601f8301169050919050565b6000612121826120b6565b61212b81856120c1565b935061213b8185602086016120d2565b61214481612105565b840191505092915050565b600060208201905081810360008301526121698184612116565b905092915050565b6000819050919050565b61218481612171565b811461218f57600080fd5b50565b6000813590506121a18161217b565b92915050565b6000602082840312156121bd576121bc611ff1565b5b60006121cb84828501612192565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121ff826121d4565b9050919050565b61220f816121f4565b82525050565b600060208201905061222a6000830184612206565b92915050565b612239816121f4565b811461224457600080fd5b50565b60008135905061225681612230565b92915050565b6000806040838503121561227357612272611ff1565b5b600061228185828601612247565b925050602061229285828601612192565b9150509250929050565b6000806000606084860312156122b5576122b4611ff1565b5b60006122c386828701612247565b93505060206122d486828701612247565b92505060406122e586828701612192565b9150509250925092565b600061ffff82169050919050565b612306816122ef565b811461231157600080fd5b50565b600081359050612323816122fd565b92915050565b600080604083850312156123405761233f611ff1565b5b600061234e85828601612247565b925050602061235f85828601612314565b9150509250929050565b61237281612171565b82525050565b600060208201905061238d6000830184612369565b92915050565b61239c81612080565b81146123a757600080fd5b50565b6000813590506123b981612393565b92915050565b6000806000606084860312156123d8576123d7611ff1565b5b60006123e686828701612192565b93505060206123f786828701612247565b9250506040612408868287016123aa565b9150509250925092565b60006020828403121561242857612427611ff1565b5b600061243684828501612247565b91505092915050565b6000806040838503121561245657612455611ff1565b5b600061246485828601612192565b925050602061247585828601612247565b9150509250929050565b6000806040838503121561249657612495611ff1565b5b60006124a485828601612247565b92505060206124b5858286016123aa565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61250182612105565b810181811067ffffffffffffffff821117156125205761251f6124c9565b5b80604052505050565b6000612533611fe7565b905061253f82826124f8565b919050565b600067ffffffffffffffff82111561255f5761255e6124c9565b5b61256882612105565b9050602081019050919050565b82818337600083830152505050565b600061259761259284612544565b612529565b9050828152602081018484840111156125b3576125b26124c4565b5b6125be848285612575565b509392505050565b600082601f8301126125db576125da6124bf565b5b81356125eb848260208601612584565b91505092915050565b6000806000806080858703121561260e5761260d611ff1565b5b600061261c87828801612247565b945050602061262d87828801612247565b935050604061263e87828801612192565b925050606085013567ffffffffffffffff81111561265f5761265e611ff6565b5b61266b878288016125c6565b91505092959194509250565b6000819050919050565b61268a81612677565b811461269557600080fd5b50565b6000813590506126a781612681565b92915050565b6000602082840312156126c3576126c2611ff1565b5b60006126d184828501612698565b91505092915050565b600080604083850312156126f1576126f0611ff1565b5b60006126ff85828601612247565b925050602061271085828601612247565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061276157607f821691505b602082108114156127755761277461271a565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006127d76021836120c1565b91506127e28261277b565b604082019050919050565b60006020820190508181036000830152612806816127ca565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612869603d836120c1565b91506128748261280d565b604082019050919050565b600060208201905081810360008301526128988161285c565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006128fb602d836120c1565b91506129068261289f565b604082019050919050565b6000602082019050818103600083015261292a816128ee565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006129676018836120c1565b915061297282612931565b602082019050919050565b600060208201905081810360008301526129968161295a565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006129f96029836120c1565b9150612a048261299d565b604082019050919050565b60006020820190508181036000830152612a28816129ec565b9050919050565b600081905092915050565b6000612a45826120b6565b612a4f8185612a2f565b9350612a5f8185602086016120d2565b80840191505092915050565b6000612a778285612a3a565b9150612a838284612a3a565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612aeb6025836120c1565b9150612af682612a8f565b604082019050919050565b60006020820190508181036000830152612b1a81612ade565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612b7d6024836120c1565b9150612b8882612b21565b604082019050919050565b60006020820190508181036000830152612bac81612b70565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612be96020836120c1565b9150612bf482612bb3565b602082019050919050565b60006020820190508181036000830152612c1881612bdc565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612c55601c836120c1565b9150612c6082612c1f565b602082019050919050565b60006020820190508181036000830152612c8481612c48565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612ce7602e836120c1565b9150612cf282612c8b565b604082019050919050565b60006020820190508181036000830152612d1681612cda565b9050919050565b7f4f6e6c79207468652074727565206f776e6572206f6620746865207061726b6960008201527f6e6720746f6b656e2063616e206368616e676520617070726f76616c2073746160208201527f74757320666f7220746865207061726b696e6720526571756573747320636f6e60408201527f74726163742e2000000000000000000000000000000000000000000000000000606082015250565b6000612dc56067836120c1565b9150612dd082612d1d565b608082019050919050565b60006020820190508181036000830152612df481612db8565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612e316019836120c1565b9150612e3c82612dfb565b602082019050919050565b60006020820190508181036000830152612e6081612e24565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612ec36032836120c1565b9150612ece82612e67565b604082019050919050565b60006020820190508181036000830152612ef281612eb6565b9050919050565b612f02816122ef565b82525050565b6000604082019050612f1d6000830185612206565b612f2a6020830184612ef9565b9392505050565b600081519050612f4081612681565b92915050565b600060208284031215612f5c57612f5b611ff1565b5b6000612f6a84828501612f31565b91505092915050565b7f5061726b696e672073706f7420636f2d6f7264696e617465732061726520616c60008201527f7265616479206d696e746564206173206120746f6b656e000000000000000000602082015250565b6000612fcf6037836120c1565b9150612fda82612f73565b604082019050919050565b60006020820190508181036000830152612ffe81612fc2565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061302c82613005565b6130368185613010565b93506130468185602086016120d2565b61304f81612105565b840191505092915050565b600060808201905061306f6000830187612206565b61307c6020830186612206565b6130896040830185612369565b818103606083015261309b8184613021565b905095945050505050565b6000815190506130b581612027565b92915050565b6000602082840312156130d1576130d0611ff1565b5b60006130df848285016130a6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061312282612171565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613155576131546130e8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061319a82612171565b91506131a583612171565b9250826131b5576131b4613160565b5b828204905092915050565b60006131cb82612171565b91506131d683612171565b9250828210156131e9576131e86130e8565b5b828203905092915050565b60006131ff82612171565b915061320a83612171565b92508261321a57613219613160565b5b828206905092915050565b600061323082612171565b915061323b83612171565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156132705761326f6130e8565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006132b582612171565b91506132c083612171565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156132f9576132f86130e8565b5b828202905092915050565b600061330f82612171565b91506000821415613323576133226130e8565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006133646020836120c1565b915061336f8261332e565b602082019050919050565b6000602082019050818103600083015261339381613357565b905091905056fe646174613a746578742f706c61696e3b636861727365743d5554462d382c7061726b696e6753706f744c61744c6f6e673aa26469706673582212202dd4ac5e8662ace1c3c48a0eefb39cb7467be7a30ea12f7d64228ad43d7b52c964736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7208,
        "contract": "contracts/ParkingSpotToken.sol:ParkingSpotToken",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 7210,
        "contract": "contracts/ParkingSpotToken.sol:ParkingSpotToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 7214,
        "contract": "contracts/ParkingSpotToken.sol:ParkingSpotToken",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7218,
        "contract": "contracts/ParkingSpotToken.sol:ParkingSpotToken",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7222,
        "contract": "contracts/ParkingSpotToken.sol:ParkingSpotToken",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7228,
        "contract": "contracts/ParkingSpotToken.sol:ParkingSpotToken",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7234,
        "contract": "contracts/ParkingSpotToken.sol:ParkingSpotToken",
        "label": "_approvedForRequestContract",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7238,
        "contract": "contracts/ParkingSpotToken.sol:ParkingSpotToken",
        "label": "_parkingSpotOwners",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 8178,
        "contract": "contracts/ParkingSpotToken.sol:ParkingSpotToken",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 8860,
        "contract": "contracts/ParkingSpotToken.sol:ParkingSpotToken",
        "label": "spotTokenised",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 8867,
        "contract": "contracts/ParkingSpotToken.sol:ParkingSpotToken",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)4575_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)4575_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4574,
            "contract": "contracts/ParkingSpotToken.sol:ParkingSpotToken",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}